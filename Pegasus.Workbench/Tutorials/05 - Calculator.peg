@using System.Globalization

// This calculator makes use of Pegasus' "left
//  recursion" support to provide the correct
//  order of operations.
// Left recursion happens when a rule calls
//  itself immediately, before consuming any
//  characters.
// Left recursive rules must be memoized.

start <double>
  = value:additive EOF { value }

additive <double> -memoize
    = left:additive "+" right:multiplicative { left + right }
    / left:additive "-" right:multiplicative { left - right }
    / multiplicative

multiplicative <double> -memoize
    = left:multiplicative "*" right:power { left * right }
    / left:multiplicative "/" right:power { left / right }
    / power

power <double>
    = left:primary "^" right:power { Math.Pow(left, right) }
    / primary

primary <double> -memoize
    = decimal
    / "-" primary:primary { -primary }
    / "(" additive:additive ")" { additive }

decimal <double>
    = value:([0-9]+ ("." [0-9]+)?) { double.Parse(value, CultureInfo.InvariantCulture) }

EOF
  = !.
