@model Rule
{{
    this.currentResultName = this.CreateVariable("r");
    this.currentResultType = this.types[model.Expression];
    var memoize = model.Flags.Any(f => f.Name == "memoize");
    var leftRecursive = memoize && this.leftRecursiveRules.Contains(model);
}}
{{if model.Expression is TypedExpression}}
    private IParseResult<
        {{@RenderCode this.currentResultType}}
        > {{: model.Identifier.Name}}(ref Cursor cursor)
{{else}}
    private IParseResult<{{= this.currentResultType }}> {{: model.Identifier.Name}}(ref Cursor cursor)
{{/if}}
{
    IParseResult<{{= this.currentResultType }}> {{: this.currentResultName }} = null;
    {{if leftRecursive}}
        var storageKey = {{= ToLiteral(model.Identifier.Name + ":") }} + cursor.StateKey + ":" + cursor.Location;
        if (this.storage.ContainsKey(storageKey))
        {
            {{: this.currentResultName }} = (IParseResult<{{= this.currentResultType }}>)this.storage[storageKey];
            if ({{: this.currentResultName }} != null)
            {
                cursor = {{: this.currentResultName }}.EndCursor;
            }
            return {{: this.currentResultName }};
        }
        {{
            var startCursorName = this.CreateVariable("startCursor");
            var resultName = this.currentResultName;
            var nextResultName = this.CreateVariable("r");
        }}
        this.storage[storageKey] = null;
        var {{: startCursorName }} = cursor;
        while (true)
        {
            IParseResult<{{= this.currentResultType }}> {{: nextResultName }} = null;
            {{ this.currentResultName = nextResultName; }}
            {{@WalkRule model}}
            {{ this.currentResultName = resultName; }}
            if ({{: nextResultName }} == null || ({{: this.currentResultName }} != null && {{: this.currentResultName }}.EndCursor.Location >= r1.EndCursor.Location))
            {
                break;
            }
            this.storage[storageKey] = {{: this.currentResultName }} = {{: nextResultName }};
            cursor = {{: startCursorName }};
        }
        if ({{: this.currentResultName }} != null)
        {
            cursor = {{: this.currentResultName }}.EndCursor;
        }
    {{elif memoize}}
        var storageKey = {{= ToLiteral(model.Identifier.Name + ":") }} + cursor.StateKey + ":" + cursor.Location;
        if (this.storage.ContainsKey(storageKey))
        {
            {{: this.currentResultName }} = (IParseResult<{{= this.currentResultType }}>)this.storage[storageKey];
            if ({{: this.currentResultName }} != null)
            {
                cursor = {{: this.currentResultName }}.EndCursor;
            }
            return {{: this.currentResultName }};
        }
        {{@WalkRule model}}
        this.storage[storageKey] = {{: this.currentResultName }};
    {{else}}
        {{@WalkRule model}}
    {{/if}}
    return {{: this.currentResultName }};
}

{{
    this.currentResultName = null;
    this.currentResultType = null;
    this.variables.Clear();
}}
