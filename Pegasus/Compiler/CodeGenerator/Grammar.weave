@model Grammar
{{
    var settings = model.Settings.ToLookup(s => s.Key.Name, s => s.Value);
    var assemblyName = Assembly.GetExecutingAssembly().GetName();
}}
// -----------------------------------------------------------------------
// <auto-generated>
//   This code was generated by {{= assemblyName.Name }} {{= assemblyName.Version }}
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated.
// </auto-generated>
// -----------------------------------------------------------------------

{{
    var @namespace = settings["namespace"].SingleOrDefault() ?? "Parsers";
    var classname = settings["classname"].SingleOrDefault() ?? "Parser";
    var accessibility = settings["accessibility"].SingleOrDefault() ?? "public";
    var startRule = settings["start"].Select(n => n.ToString()).SingleOrDefault() ?? model.Rules[0].Identifier.Name;
    var resources = settings["resources"].SingleOrDefault();
    var memoize = model.Rules.SelectMany(r => r.Flags.Select(f => f.Name)).Any(f => f == "memoize");
    var type = this.types[model.Rules.Single(r => r.Identifier.Name == startRule).Expression];
}}
namespace
{{@RenderCode @namespace}}
{
    using System;
    using System.Collections.Generic;
    using Pegasus.Common;
    {{each @using in settings["using"]}}
        using
            {{@RenderCode @using}}
            ;
    {{/each}}
    {{if resources != null}}
        using ParserResources =
            {{@RenderCode resources}}
            ;
    {{/if}}

    [System.CodeDom.Compiler.GeneratedCode("{{= assemblyName.Name }}", "{{= assemblyName.Version }}")]
    {{@RenderCode accessibility}}
    partial class
    {{@RenderCode classname}}
    {
        {{each members in settings["members"]}}
            {{@RenderCode members}}
        {{/each}}
        {{if memoize}}
            private Dictionary<string, object> storage;
        {{/if}}
        public {{= type }} Parse(string subject, string fileName = null)
        {
            {{if memoize}}
                try
                {
                    this.storage = new Dictionary<string, object>();
                    var cursor = new Cursor(subject, 0, fileName);
                    var result = this.{{: startRule }}(ref cursor);
                    if (result == null)
                    {
                        throw ExceptionHelper(cursor, state => "Failed to parse '{{= startRule }}'.");
                    }
                    return result.Value;
                }
                finally
                {
                    this.storage = null;
                }
            {{else}}
                var cursor = new Cursor(subject, 0, fileName);
                var result = this.{{: startRule }}(ref cursor);
                if (result == null)
                {
                    throw ExceptionHelper(cursor, state => "Failed to parse '{{= startRule }}'.");
                }
                return result.Value;
            {{/if}}
        }

        {{@WalkGrammar model}}
        private IParseResult<string> ParseLiteral(ref Cursor cursor, string literal, bool ignoreCase = false)
        {
            if (cursor.Location + literal.Length <= cursor.Subject.Length)
            {
                var substr = cursor.Subject.Substring(cursor.Location, literal.Length);
                if (ignoreCase ? substr.Equals(literal, StringComparison.OrdinalIgnoreCase) : substr == literal)
                {
                    var endCursor = cursor.Advance(substr.Length);
                    var result = new ParseResult<string>(cursor, endCursor, substr);
                    cursor = endCursor;
                    return result;
                }
            }
            return null;
        }

        private IParseResult<string> ParseClass(ref Cursor cursor, string characterRanges, bool negated = false, bool ignoreCase = false)
        {
            if (cursor.Location + 1 <= cursor.Subject.Length)
            {
                var c = cursor.Subject[cursor.Location];
                bool match = false;
                for (int i = 0; !match && i < characterRanges.Length; i += 2)
                {
                    match = c >= characterRanges[i] && c <= characterRanges[i + 1];
                }
                if (!match && ignoreCase && (char.IsUpper(c) || char.IsLower(c)))
                {
                    var cs = c.ToString();
                    for (int i = 0; !match && i < characterRanges.Length; i += 2)
                    {
                        var min = characterRanges[i];
                        var max = characterRanges[i + 1];
                        for (char o = min; !match && o <= max; o++)
                        {
                            match = (char.IsUpper(o) || char.IsLower(o)) && cs.Equals(o.ToString(), StringComparison.CurrentCultureIgnoreCase);
                        }
                    }
                }
                if (match ^ negated)
                {
                    var endCursor = cursor.Advance(1);
                    var result = new ParseResult<string>(cursor, endCursor, cursor.Subject.Substring(cursor.Location, 1));
                    cursor = endCursor;
                    return result;
                }
            }
            return null;
        }

        private IParseResult<string> ParseAny(ref Cursor cursor)
        {
            if (cursor.Location + 1 <= cursor.Subject.Length)
            {
                var substr = cursor.Subject.Substring(cursor.Location, 1);
                var endCursor = cursor.Advance(1);
                var result = new ParseResult<string>(cursor, endCursor, substr);
                cursor = endCursor;
                return result;
            }
            return null;
        }

        private IParseResult<T> ReturnHelper<T>(Cursor startCursor, Cursor endCursor, Func<Cursor, T> wrappedCode)
        {
            return new ParseResult<T>(startCursor, endCursor, wrappedCode(endCursor));
        }

        private Exception ExceptionHelper(Cursor cursor, Func<Cursor, string> wrappedCode)
        {
            var ex = new FormatException(wrappedCode(cursor));
            ex.Data["cursor"] = cursor;
            return ex;
        }

        private T ValueOrDefault<T>(IParseResult<T> result)
        {
            return result == null
                ? default(T)
                : result.Value;
        }
    }
}
