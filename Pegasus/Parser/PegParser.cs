// -----------------------------------------------------------------------
// <auto-generated>
// This code was generated by Pegasus 1.0.0.0
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
// </auto-generated>
// -----------------------------------------------------------------------

namespace Pegasus.Parser
{
    using System;
    using System.Collections.Generic;
    using Pegasus;
    using System.Linq;
    using Pegasus.Expressions;

    [System.CodeDom.Compiler.GeneratedCode("Pegasus", "1.0.0.0")]
    public partial class PegParser
    {
        private Cursor rightmostErrorCursor = null;
        private List<string> rightmostErrors = new List<string>();

        public Grammar Parse(string subject)
        {
            var cursor = new Cursor(subject, 0);
            var result = this.grammar(ref cursor);
            if (result == null)
            {
                throw new InvalidOperationException("Expected " + string.Join(", ", this.rightmostErrors) + ".");
            }
            return result.Value;
        }

        private ParseResult<Grammar> grammar(ref Cursor cursor)
        {
            ParseResult<Grammar> r0 = null;
            var startCursor1 = cursor;
            ParseResult<IList<string>> r2 = null;
            r2 = this.__(ref cursor);
            if (r2 != null)
            {
                ParseResult<IList<KeyValuePair<string, string>>> r3 = null;
                var startCursor4 = cursor;
                var l5 = new List<KeyValuePair<string, string>>();
                while (true)
                {
                    ParseResult<KeyValuePair<string, string>> r6 = null;
                    r6 = this.setting(ref cursor);
                    if (r6 != null)
                    {
                        l5.Add(r6.Value);
                    }
                    else
                    {
                        break;
                    }
                }
                if (l5.Count >= 0)
                {
                    var len = cursor.Location - startCursor4.Location;
                    r3 = new ParseResult<IList<KeyValuePair<string, string>>>(len, l5.AsReadOnly());
                }
                else
                {
                    cursor = startCursor4;
                }
                var settings = ValueOrDefault(r3);
                if (r3 != null)
                {
                    ParseResult<IList<string>> r7 = null;
                    var startCursor8 = cursor;
                    var l9 = new List<string>();
                    while (l9.Count < 1)
                    {
                        ParseResult<string> r10 = null;
                        r10 = this.initializer(ref cursor);
                        if (r10 != null)
                        {
                            l9.Add(r10.Value);
                        }
                        else
                        {
                            break;
                        }
                    }
                    if (l9.Count >= 0)
                    {
                        var len = cursor.Location - startCursor8.Location;
                        r7 = new ParseResult<IList<string>>(len, l9.AsReadOnly());
                    }
                    else
                    {
                        cursor = startCursor8;
                    }
                    var initializer = ValueOrDefault(r7);
                    if (r7 != null)
                    {
                        ParseResult<IList<Rule>> r11 = null;
                        var startCursor12 = cursor;
                        var l13 = new List<Rule>();
                        while (true)
                        {
                            ParseResult<Rule> r14 = null;
                            r14 = this.rule(ref cursor);
                            if (r14 != null)
                            {
                                l13.Add(r14.Value);
                            }
                            else
                            {
                                break;
                            }
                        }
                        if (l13.Count >= 1)
                        {
                            var len = cursor.Location - startCursor12.Location;
                            r11 = new ParseResult<IList<Rule>>(len, l13.AsReadOnly());
                        }
                        else
                        {
                            cursor = startCursor12;
                        }
                        var rules = ValueOrDefault(r11);
                        if (r11 != null)
                        {
                            r0 = this.ReturnHelper(startCursor1, cursor, () =>
                            {
                                
        return new Grammar(rules, settings, initializer.SingleOrDefault());
    
                            });
                        }
                        else
                        {
                            cursor = startCursor1;
                        }
                    }
                    else
                    {
                        cursor = startCursor1;
                    }
                }
                else
                {
                    cursor = startCursor1;
                }
            }
            else
            {
                cursor = startCursor1;
            }
            return r0;
        }

        private ParseResult<KeyValuePair<string, string>> setting(ref Cursor cursor)
        {
            ParseResult<KeyValuePair<string, string>> r0 = null;
            var startCursor1 = cursor;
            ParseResult<string> r2 = null;
            r2 = this.ParseLiteral(ref cursor, "@");
            if (r2 != null)
            {
                ParseResult<string> r3 = null;
                r3 = this.identifier(ref cursor);
                var key = ValueOrDefault(r3);
                if (r3 != null)
                {
                    ParseResult<string> r4 = null;
                    if (r4 == null)
                    {
                        r4 = this.@string(ref cursor);
                    }
                    if (r4 == null)
                    {
                        r4 = this.dotted(ref cursor);
                    }
                    var value = ValueOrDefault(r4);
                    if (r4 != null)
                    {
                        ParseResult<IList<string>> r5 = null;
                        var startCursor6 = cursor;
                        var l7 = new List<string>();
                        while (l7.Count < 1)
                        {
                            ParseResult<string> r8 = null;
                            r8 = this.semicolon(ref cursor);
                            if (r8 != null)
                            {
                                l7.Add(r8.Value);
                            }
                            else
                            {
                                break;
                            }
                        }
                        if (l7.Count >= 0)
                        {
                            var len = cursor.Location - startCursor6.Location;
                            r5 = new ParseResult<IList<string>>(len, l7.AsReadOnly());
                        }
                        else
                        {
                            cursor = startCursor6;
                        }
                        if (r5 != null)
                        {
                            r0 = this.ReturnHelper(startCursor1, cursor, () =>
                            {
                                
        return new KeyValuePair<string, string>(key, value);
    
                            });
                        }
                        else
                        {
                            cursor = startCursor1;
                        }
                    }
                    else
                    {
                        cursor = startCursor1;
                    }
                }
                else
                {
                    cursor = startCursor1;
                }
            }
            else
            {
                cursor = startCursor1;
            }
            return r0;
        }

        private ParseResult<string> initializer(ref Cursor cursor)
        {
            ParseResult<string> r0 = null;
            var startCursor1 = cursor;
            ParseResult<string> r2 = null;
            r2 = this.action(ref cursor);
            var code = ValueOrDefault(r2);
            if (r2 != null)
            {
                ParseResult<IList<string>> r3 = null;
                var startCursor4 = cursor;
                var l5 = new List<string>();
                while (l5.Count < 1)
                {
                    ParseResult<string> r6 = null;
                    r6 = this.semicolon(ref cursor);
                    if (r6 != null)
                    {
                        l5.Add(r6.Value);
                    }
                    else
                    {
                        break;
                    }
                }
                if (l5.Count >= 0)
                {
                    var len = cursor.Location - startCursor4.Location;
                    r3 = new ParseResult<IList<string>>(len, l5.AsReadOnly());
                }
                else
                {
                    cursor = startCursor4;
                }
                if (r3 != null)
                {
                    r0 = this.ReturnHelper(startCursor1, cursor, () =>
                    {
                        
        return code;
    
                    });
                }
                else
                {
                    cursor = startCursor1;
                }
            }
            else
            {
                cursor = startCursor1;
            }
            return r0;
        }

        private ParseResult<Rule> rule(ref Cursor cursor)
        {
            ParseResult<Rule> r0 = null;
            var startCursor1 = cursor;
            ParseResult<string> r2 = null;
            r2 = this.identifier(ref cursor);
            var name = ValueOrDefault(r2);
            if (r2 != null)
            {
                ParseResult<IList<string>> r3 = null;
                var startCursor4 = cursor;
                var l5 = new List<string>();
                while (l5.Count < 1)
                {
                    ParseResult<string> r6 = null;
                    r6 = this.@string(ref cursor);
                    if (r6 != null)
                    {
                        l5.Add(r6.Value);
                    }
                    else
                    {
                        break;
                    }
                }
                if (l5.Count >= 0)
                {
                    var len = cursor.Location - startCursor4.Location;
                    r3 = new ParseResult<IList<string>>(len, l5.AsReadOnly());
                }
                else
                {
                    cursor = startCursor4;
                }
                var displayName = ValueOrDefault(r3);
                if (r3 != null)
                {
                    ParseResult<string> r7 = null;
                    r7 = this.equals(ref cursor);
                    if (r7 != null)
                    {
                        ParseResult<Expression> r8 = null;
                        r8 = this.expression(ref cursor);
                        var expression = ValueOrDefault(r8);
                        if (r8 != null)
                        {
                            ParseResult<IList<string>> r9 = null;
                            var startCursor10 = cursor;
                            var l11 = new List<string>();
                            while (l11.Count < 1)
                            {
                                ParseResult<string> r12 = null;
                                r12 = this.semicolon(ref cursor);
                                if (r12 != null)
                                {
                                    l11.Add(r12.Value);
                                }
                                else
                                {
                                    break;
                                }
                            }
                            if (l11.Count >= 0)
                            {
                                var len = cursor.Location - startCursor10.Location;
                                r9 = new ParseResult<IList<string>>(len, l11.AsReadOnly());
                            }
                            else
                            {
                                cursor = startCursor10;
                            }
                            if (r9 != null)
                            {
                                r0 = this.ReturnHelper(startCursor1, cursor, () =>
                                {
                                    
        return new Rule(
            name: name,
            displayName: displayName.SingleOrDefault(),
            expression: expression);
    
                                });
                            }
                            else
                            {
                                cursor = startCursor1;
                            }
                        }
                        else
                        {
                            cursor = startCursor1;
                        }
                    }
                    else
                    {
                        cursor = startCursor1;
                    }
                }
                else
                {
                    cursor = startCursor1;
                }
            }
            else
            {
                cursor = startCursor1;
            }
            return r0;
        }

        private ParseResult<Expression> expression(ref Cursor cursor)
        {
            ParseResult<Expression> r0 = null;
            var startCursor1 = cursor;
            ParseResult<IList<string>> r2 = null;
            var startCursor3 = cursor;
            var l4 = new List<string>();
            while (l4.Count < 1)
            {
                ParseResult<string> r5 = null;
                r5 = this.type(ref cursor);
                if (r5 != null)
                {
                    l4.Add(r5.Value);
                }
                else
                {
                    break;
                }
            }
            if (l4.Count >= 0)
            {
                var len = cursor.Location - startCursor3.Location;
                r2 = new ParseResult<IList<string>>(len, l4.AsReadOnly());
            }
            else
            {
                cursor = startCursor3;
            }
            var type = ValueOrDefault(r2);
            if (r2 != null)
            {
                ParseResult<Expression> r6 = null;
                r6 = this.choice(ref cursor);
                var choice = ValueOrDefault(r6);
                if (r6 != null)
                {
                    r0 = this.ReturnHelper(startCursor1, cursor, () =>
                    {
                        
        var typeValue = type.SingleOrDefault();
        return typeValue != null
            ? new TypedExpression(typeValue, choice)
            : choice;
    
                    });
                }
                else
                {
                    cursor = startCursor1;
                }
            }
            else
            {
                cursor = startCursor1;
            }
            return r0;
        }

        private ParseResult<string> type(ref Cursor cursor)
        {
            ParseResult<string> r0 = null;
            var startCursor1 = cursor;
            ParseResult<string> r2 = null;
            r2 = this.lt(ref cursor);
            if (r2 != null)
            {
                ParseResult<string> r3 = null;
                r3 = this.dotted(ref cursor);
                var dotted = ValueOrDefault(r3);
                if (r3 != null)
                {
                    ParseResult<string> r4 = null;
                    r4 = this.gt(ref cursor);
                    if (r4 != null)
                    {
                        r0 = this.ReturnHelper(startCursor1, cursor, () =>
                        {
                            
        return dotted;
    
                        });
                    }
                    else
                    {
                        cursor = startCursor1;
                    }
                }
                else
                {
                    cursor = startCursor1;
                }
            }
            else
            {
                cursor = startCursor1;
            }
            return r0;
        }

        private ParseResult<Expression> choice(ref Cursor cursor)
        {
            ParseResult<Expression> r0 = null;
            var startCursor1 = cursor;
            ParseResult<Expression> r2 = null;
            r2 = this.sequence(ref cursor);
            var head = ValueOrDefault(r2);
            if (r2 != null)
            {
                ParseResult<IList<Expression>> r3 = null;
                var startCursor4 = cursor;
                var l5 = new List<Expression>();
                while (true)
                {
                    ParseResult<Expression> r6 = null;
                    var startCursor7 = cursor;
                    ParseResult<string> r8 = null;
                    r8 = this.slash(ref cursor);
                    if (r8 != null)
                    {
                        ParseResult<Expression> r9 = null;
                        r9 = this.sequence(ref cursor);
                        var sequence = ValueOrDefault(r9);
                        if (r9 != null)
                        {
                            r6 = this.ReturnHelper(startCursor7, cursor, () =>
                            {
                                 return sequence; 
                            });
                        }
                        else
                        {
                            cursor = startCursor7;
                        }
                    }
                    else
                    {
                        cursor = startCursor7;
                    }
                    if (r6 != null)
                    {
                        l5.Add(r6.Value);
                    }
                    else
                    {
                        break;
                    }
                }
                if (l5.Count >= 0)
                {
                    var len = cursor.Location - startCursor4.Location;
                    r3 = new ParseResult<IList<Expression>>(len, l5.AsReadOnly());
                }
                else
                {
                    cursor = startCursor4;
                }
                var tail = ValueOrDefault(r3);
                if (r3 != null)
                {
                    r0 = this.ReturnHelper(startCursor1, cursor, () =>
                    {
                        
        if (tail.Count == 0)
        {
            return head;
        }
        else
        {
            return (Expression)new ChoiceExpression(new [] { head }.Concat(tail));
        }
    
                    });
                }
                else
                {
                    cursor = startCursor1;
                }
            }
            else
            {
                cursor = startCursor1;
            }
            return r0;
        }

        private ParseResult<Expression> sequence(ref Cursor cursor)
        {
            ParseResult<Expression> r0 = null;
            if (r0 == null)
            {
                var startCursor1 = cursor;
                ParseResult<IList<Expression>> r2 = null;
                var startCursor3 = cursor;
                var l4 = new List<Expression>();
                while (true)
                {
                    ParseResult<Expression> r5 = null;
                    r5 = this.labeled(ref cursor);
                    if (r5 != null)
                    {
                        l4.Add(r5.Value);
                    }
                    else
                    {
                        break;
                    }
                }
                if (l4.Count >= 0)
                {
                    var len = cursor.Location - startCursor3.Location;
                    r2 = new ParseResult<IList<Expression>>(len, l4.AsReadOnly());
                }
                else
                {
                    cursor = startCursor3;
                }
                var elements = ValueOrDefault(r2);
                if (r2 != null)
                {
                    ParseResult<string> r6 = null;
                    r6 = this.action(ref cursor);
                    var code = ValueOrDefault(r6);
                    if (r6 != null)
                    {
                        r0 = this.ReturnHelper(startCursor1, cursor, () =>
                        {
                            
        return (Expression)new SequenceExpression(elements.Concat(new Expression[] { new CodeExpression(code) }));
    
                        });
                    }
                    else
                    {
                        cursor = startCursor1;
                    }
                }
                else
                {
                    cursor = startCursor1;
                }
            }
            if (r0 == null)
            {
                var startCursor7 = cursor;
                ParseResult<IList<Expression>> r8 = null;
                var startCursor9 = cursor;
                var l10 = new List<Expression>();
                while (true)
                {
                    ParseResult<Expression> r11 = null;
                    r11 = this.labeled(ref cursor);
                    if (r11 != null)
                    {
                        l10.Add(r11.Value);
                    }
                    else
                    {
                        break;
                    }
                }
                if (l10.Count >= 0)
                {
                    var len = cursor.Location - startCursor9.Location;
                    r8 = new ParseResult<IList<Expression>>(len, l10.AsReadOnly());
                }
                else
                {
                    cursor = startCursor9;
                }
                var elements = ValueOrDefault(r8);
                if (r8 != null)
                {
                    r0 = this.ReturnHelper(startCursor7, cursor, () =>
                    {
                        
        if (elements.Count == 1)
        {
            return elements[0];
        }
        else
        {
            return new SequenceExpression(elements);
        }
    
                    });
                }
                else
                {
                    cursor = startCursor7;
                }
            }
            return r0;
        }

        private ParseResult<Expression> labeled(ref Cursor cursor)
        {
            ParseResult<Expression> r0 = null;
            if (r0 == null)
            {
                var startCursor1 = cursor;
                ParseResult<string> r2 = null;
                r2 = this.identifier(ref cursor);
                var label = ValueOrDefault(r2);
                if (r2 != null)
                {
                    ParseResult<string> r3 = null;
                    r3 = this.colon(ref cursor);
                    if (r3 != null)
                    {
                        ParseResult<Expression> r4 = null;
                        r4 = this.prefixed(ref cursor);
                        var expression = ValueOrDefault(r4);
                        if (r4 != null)
                        {
                            r0 = this.ReturnHelper(startCursor1, cursor, () =>
                            {
                                
        return (Expression)new PrefixedExpression(label, expression);
    
                            });
                        }
                        else
                        {
                            cursor = startCursor1;
                        }
                    }
                    else
                    {
                        cursor = startCursor1;
                    }
                }
                else
                {
                    cursor = startCursor1;
                }
            }
            if (r0 == null)
            {
                r0 = this.prefixed(ref cursor);
            }
            return r0;
        }

        private ParseResult<Expression> prefixed(ref Cursor cursor)
        {
            ParseResult<Expression> r0 = null;
            if (r0 == null)
            {
                var startCursor1 = cursor;
                ParseResult<string> r2 = null;
                r2 = this.and(ref cursor);
                if (r2 != null)
                {
                    ParseResult<Expression> r3 = null;
                    r3 = this.suffixed(ref cursor);
                    var expression = ValueOrDefault(r3);
                    if (r3 != null)
                    {
                        r0 = this.ReturnHelper(startCursor1, cursor, () =>
                        {
                            
        return (Expression)new AndExpression(expression);
    
                        });
                    }
                    else
                    {
                        cursor = startCursor1;
                    }
                }
                else
                {
                    cursor = startCursor1;
                }
            }
            if (r0 == null)
            {
                var startCursor4 = cursor;
                ParseResult<string> r5 = null;
                r5 = this.not(ref cursor);
                if (r5 != null)
                {
                    ParseResult<Expression> r6 = null;
                    r6 = this.suffixed(ref cursor);
                    var expression = ValueOrDefault(r6);
                    if (r6 != null)
                    {
                        r0 = this.ReturnHelper(startCursor4, cursor, () =>
                        {
                            
        return (Expression)new NotExpression(expression);
    
                        });
                    }
                    else
                    {
                        cursor = startCursor4;
                    }
                }
                else
                {
                    cursor = startCursor4;
                }
            }
            if (r0 == null)
            {
                r0 = this.suffixed(ref cursor);
            }
            return r0;
        }

        private ParseResult<Expression> suffixed(ref Cursor cursor)
        {
            ParseResult<Expression> r0 = null;
            if (r0 == null)
            {
                var startCursor1 = cursor;
                ParseResult<Expression> r2 = null;
                r2 = this.primary(ref cursor);
                var expression = ValueOrDefault(r2);
                if (r2 != null)
                {
                    ParseResult<string> r3 = null;
                    r3 = this.question(ref cursor);
                    if (r3 != null)
                    {
                        r0 = this.ReturnHelper(startCursor1, cursor, () =>
                        {
                            
        return (Expression)new RepetitionExpression(expression, min: 0, max: 1);
    
                        });
                    }
                    else
                    {
                        cursor = startCursor1;
                    }
                }
                else
                {
                    cursor = startCursor1;
                }
            }
            if (r0 == null)
            {
                var startCursor4 = cursor;
                ParseResult<Expression> r5 = null;
                r5 = this.primary(ref cursor);
                var expression = ValueOrDefault(r5);
                if (r5 != null)
                {
                    ParseResult<string> r6 = null;
                    r6 = this.star(ref cursor);
                    if (r6 != null)
                    {
                        r0 = this.ReturnHelper(startCursor4, cursor, () =>
                        {
                            
        return (Expression)new RepetitionExpression(expression, min: 0, max: null);
    
                        });
                    }
                    else
                    {
                        cursor = startCursor4;
                    }
                }
                else
                {
                    cursor = startCursor4;
                }
            }
            if (r0 == null)
            {
                var startCursor7 = cursor;
                ParseResult<Expression> r8 = null;
                r8 = this.primary(ref cursor);
                var expression = ValueOrDefault(r8);
                if (r8 != null)
                {
                    ParseResult<string> r9 = null;
                    r9 = this.plus(ref cursor);
                    if (r9 != null)
                    {
                        r0 = this.ReturnHelper(startCursor7, cursor, () =>
                        {
                            
        return (Expression)new RepetitionExpression(expression, min: 1, max: null);
    
                        });
                    }
                    else
                    {
                        cursor = startCursor7;
                    }
                }
                else
                {
                    cursor = startCursor7;
                }
            }
            if (r0 == null)
            {
                r0 = this.primary(ref cursor);
            }
            return r0;
        }

        private ParseResult<Expression> primary(ref Cursor cursor)
        {
            ParseResult<Expression> r0 = null;
            if (r0 == null)
            {
                var startCursor1 = cursor;
                ParseResult<string> r2 = null;
                r2 = this.identifier(ref cursor);
                var name = ValueOrDefault(r2);
                if (r2 != null)
                {
                    ParseResult<string> r3 = null;
                    var startCursor4 = cursor;
                    ParseResult<string> r5 = null;
                    var startCursor6 = cursor;
                    ParseResult<IList<string>> r7 = null;
                    var startCursor8 = cursor;
                    var l9 = new List<string>();
                    while (l9.Count < 1)
                    {
                        ParseResult<string> r10 = null;
                        r10 = this.@string(ref cursor);
                        if (r10 != null)
                        {
                            l9.Add(r10.Value);
                        }
                        else
                        {
                            break;
                        }
                    }
                    if (l9.Count >= 0)
                    {
                        var len = cursor.Location - startCursor8.Location;
                        r7 = new ParseResult<IList<string>>(len, l9.AsReadOnly());
                    }
                    else
                    {
                        cursor = startCursor8;
                    }
                    if (r7 != null)
                    {
                        ParseResult<string> r11 = null;
                        r11 = this.equals(ref cursor);
                        if (r11 != null)
                        {
                            var len = cursor.Location - startCursor6.Location;
                            r5 = new ParseResult<string>(len, cursor.Subject.Substring(startCursor6.Location, len));
                        }
                        else
                        {
                            cursor = startCursor6;
                        }
                    }
                    else
                    {
                        cursor = startCursor6;
                    }
                    cursor = startCursor4;
                    if (r5 == null)
                    {
                        r3 = new ParseResult<string>(0, string.Empty);
                    }
                    if (r3 != null)
                    {
                        r0 = this.ReturnHelper(startCursor1, cursor, () =>
                        {
                            
        return (Expression)new NameExpression(name);
    
                        });
                    }
                    else
                    {
                        cursor = startCursor1;
                    }
                }
                else
                {
                    cursor = startCursor1;
                }
            }
            if (r0 == null)
            {
                r0 = this.literal(ref cursor);
            }
            if (r0 == null)
            {
                r0 = this.@class(ref cursor);
            }
            if (r0 == null)
            {
                var startCursor12 = cursor;
                ParseResult<string> r13 = null;
                r13 = this.dot(ref cursor);
                if (r13 != null)
                {
                    r0 = this.ReturnHelper(startCursor12, cursor, () =>
                    {
                         return (Expression)new WildcardExpression(); 
                    });
                }
                else
                {
                    cursor = startCursor12;
                }
            }
            if (r0 == null)
            {
                var startCursor14 = cursor;
                ParseResult<string> r15 = null;
                r15 = this.lparen(ref cursor);
                if (r15 != null)
                {
                    ParseResult<Expression> r16 = null;
                    r16 = this.expression(ref cursor);
                    var expression = ValueOrDefault(r16);
                    if (r16 != null)
                    {
                        ParseResult<string> r17 = null;
                        r17 = this.rparen(ref cursor);
                        if (r17 != null)
                        {
                            r0 = this.ReturnHelper(startCursor14, cursor, () =>
                            {
                                 return expression; 
                            });
                        }
                        else
                        {
                            cursor = startCursor14;
                        }
                    }
                    else
                    {
                        cursor = startCursor14;
                    }
                }
                else
                {
                    cursor = startCursor14;
                }
            }
            return r0;
        }

        private ParseResult<string> action(ref Cursor cursor)
        {
            ParseResult<string> r0 = null;
            var startCursor1 = cursor;
            ParseResult<string> r2 = null;
            r2 = this.braced(ref cursor);
            var braced = ValueOrDefault(r2);
            if (r2 != null)
            {
                ParseResult<IList<string>> r3 = null;
                r3 = this.__(ref cursor);
                if (r3 != null)
                {
                    r0 = this.ReturnHelper(startCursor1, cursor, () =>
                    {
                         return braced.Substring(1, braced.Length - 2); 
                    });
                }
                else
                {
                    cursor = startCursor1;
                }
            }
            else
            {
                cursor = startCursor1;
            }
            return r0;
        }

        private ParseResult<string> braced(ref Cursor cursor)
        {
            ParseResult<string> r0 = null;
            var startCursor1 = cursor;
            ParseResult<string> r2 = null;
            r2 = this.ParseLiteral(ref cursor, "{");
            if (r2 != null)
            {
                ParseResult<IList<string>> r3 = null;
                var startCursor4 = cursor;
                var l5 = new List<string>();
                while (true)
                {
                    ParseResult<string> r6 = null;
                    if (r6 == null)
                    {
                        r6 = this.braced(ref cursor);
                    }
                    if (r6 == null)
                    {
                        r6 = this.nonBraceCharacters(ref cursor);
                    }
                    if (r6 != null)
                    {
                        l5.Add(r6.Value);
                    }
                    else
                    {
                        break;
                    }
                }
                if (l5.Count >= 0)
                {
                    var len = cursor.Location - startCursor4.Location;
                    r3 = new ParseResult<IList<string>>(len, l5.AsReadOnly());
                }
                else
                {
                    cursor = startCursor4;
                }
                var parts = ValueOrDefault(r3);
                if (r3 != null)
                {
                    ParseResult<string> r7 = null;
                    r7 = this.ParseLiteral(ref cursor, "}");
                    if (r7 != null)
                    {
                        var len = cursor.Location - startCursor1.Location;
                        r0 = new ParseResult<string>(len, cursor.Subject.Substring(startCursor1.Location, len));
                    }
                    else
                    {
                        cursor = startCursor1;
                    }
                }
                else
                {
                    cursor = startCursor1;
                }
            }
            else
            {
                cursor = startCursor1;
            }
            return r0;
        }

        private ParseResult<string> nonBraceCharacters(ref Cursor cursor)
        {
            ParseResult<string> r0 = null;
            var startCursor1 = cursor;
            ParseResult<IList<string>> r2 = null;
            var startCursor3 = cursor;
            var l4 = new List<string>();
            while (true)
            {
                ParseResult<string> r5 = null;
                r5 = this.nonBraceCharacter(ref cursor);
                if (r5 != null)
                {
                    l4.Add(r5.Value);
                }
                else
                {
                    break;
                }
            }
            if (l4.Count >= 1)
            {
                var len = cursor.Location - startCursor3.Location;
                r2 = new ParseResult<IList<string>>(len, l4.AsReadOnly());
            }
            else
            {
                cursor = startCursor3;
            }
            var chars = ValueOrDefault(r2);
            if (r2 != null)
            {
                r0 = this.ReturnHelper(startCursor1, cursor, () =>
                {
                     return string.Join("", chars); 
                });
            }
            else
            {
                cursor = startCursor1;
            }
            return r0;
        }

        private ParseResult<string> nonBraceCharacter(ref Cursor cursor)
        {
            ParseResult<string> r0 = null;
            r0 = this.ParseClass(ref cursor, "{{}}", "[^{}]", negated: true);
            return r0;
        }

        private ParseResult<string> equals(ref Cursor cursor)
        {
            ParseResult<string> r0 = null;
            var startCursor1 = cursor;
            ParseResult<string> r2 = null;
            r2 = this.ParseLiteral(ref cursor, "=");
            if (r2 != null)
            {
                ParseResult<IList<string>> r3 = null;
                r3 = this.__(ref cursor);
                if (r3 != null)
                {
                    r0 = this.ReturnHelper(startCursor1, cursor, () =>
                    {
                         return "="; 
                    });
                }
                else
                {
                    cursor = startCursor1;
                }
            }
            else
            {
                cursor = startCursor1;
            }
            return r0;
        }

        private ParseResult<string> colon(ref Cursor cursor)
        {
            ParseResult<string> r0 = null;
            var startCursor1 = cursor;
            ParseResult<string> r2 = null;
            r2 = this.ParseLiteral(ref cursor, ":");
            if (r2 != null)
            {
                ParseResult<IList<string>> r3 = null;
                r3 = this.__(ref cursor);
                if (r3 != null)
                {
                    r0 = this.ReturnHelper(startCursor1, cursor, () =>
                    {
                         return ":"; 
                    });
                }
                else
                {
                    cursor = startCursor1;
                }
            }
            else
            {
                cursor = startCursor1;
            }
            return r0;
        }

        private ParseResult<string> semicolon(ref Cursor cursor)
        {
            ParseResult<string> r0 = null;
            var startCursor1 = cursor;
            ParseResult<string> r2 = null;
            r2 = this.ParseLiteral(ref cursor, ";");
            if (r2 != null)
            {
                ParseResult<IList<string>> r3 = null;
                r3 = this.__(ref cursor);
                if (r3 != null)
                {
                    r0 = this.ReturnHelper(startCursor1, cursor, () =>
                    {
                         return ";"; 
                    });
                }
                else
                {
                    cursor = startCursor1;
                }
            }
            else
            {
                cursor = startCursor1;
            }
            return r0;
        }

        private ParseResult<string> slash(ref Cursor cursor)
        {
            ParseResult<string> r0 = null;
            var startCursor1 = cursor;
            ParseResult<string> r2 = null;
            r2 = this.ParseLiteral(ref cursor, "/");
            if (r2 != null)
            {
                ParseResult<IList<string>> r3 = null;
                r3 = this.__(ref cursor);
                if (r3 != null)
                {
                    r0 = this.ReturnHelper(startCursor1, cursor, () =>
                    {
                         return "/"; 
                    });
                }
                else
                {
                    cursor = startCursor1;
                }
            }
            else
            {
                cursor = startCursor1;
            }
            return r0;
        }

        private ParseResult<string> and(ref Cursor cursor)
        {
            ParseResult<string> r0 = null;
            var startCursor1 = cursor;
            ParseResult<string> r2 = null;
            r2 = this.ParseLiteral(ref cursor, "&");
            if (r2 != null)
            {
                ParseResult<IList<string>> r3 = null;
                r3 = this.__(ref cursor);
                if (r3 != null)
                {
                    r0 = this.ReturnHelper(startCursor1, cursor, () =>
                    {
                         return "&"; 
                    });
                }
                else
                {
                    cursor = startCursor1;
                }
            }
            else
            {
                cursor = startCursor1;
            }
            return r0;
        }

        private ParseResult<string> not(ref Cursor cursor)
        {
            ParseResult<string> r0 = null;
            var startCursor1 = cursor;
            ParseResult<string> r2 = null;
            r2 = this.ParseLiteral(ref cursor, "!");
            if (r2 != null)
            {
                ParseResult<IList<string>> r3 = null;
                r3 = this.__(ref cursor);
                if (r3 != null)
                {
                    r0 = this.ReturnHelper(startCursor1, cursor, () =>
                    {
                         return "!"; 
                    });
                }
                else
                {
                    cursor = startCursor1;
                }
            }
            else
            {
                cursor = startCursor1;
            }
            return r0;
        }

        private ParseResult<string> question(ref Cursor cursor)
        {
            ParseResult<string> r0 = null;
            var startCursor1 = cursor;
            ParseResult<string> r2 = null;
            r2 = this.ParseLiteral(ref cursor, "?");
            if (r2 != null)
            {
                ParseResult<IList<string>> r3 = null;
                r3 = this.__(ref cursor);
                if (r3 != null)
                {
                    r0 = this.ReturnHelper(startCursor1, cursor, () =>
                    {
                         return "?"; 
                    });
                }
                else
                {
                    cursor = startCursor1;
                }
            }
            else
            {
                cursor = startCursor1;
            }
            return r0;
        }

        private ParseResult<string> star(ref Cursor cursor)
        {
            ParseResult<string> r0 = null;
            var startCursor1 = cursor;
            ParseResult<string> r2 = null;
            r2 = this.ParseLiteral(ref cursor, "*");
            if (r2 != null)
            {
                ParseResult<IList<string>> r3 = null;
                r3 = this.__(ref cursor);
                if (r3 != null)
                {
                    r0 = this.ReturnHelper(startCursor1, cursor, () =>
                    {
                         return "*"; 
                    });
                }
                else
                {
                    cursor = startCursor1;
                }
            }
            else
            {
                cursor = startCursor1;
            }
            return r0;
        }

        private ParseResult<string> plus(ref Cursor cursor)
        {
            ParseResult<string> r0 = null;
            var startCursor1 = cursor;
            ParseResult<string> r2 = null;
            r2 = this.ParseLiteral(ref cursor, "+");
            if (r2 != null)
            {
                ParseResult<IList<string>> r3 = null;
                r3 = this.__(ref cursor);
                if (r3 != null)
                {
                    r0 = this.ReturnHelper(startCursor1, cursor, () =>
                    {
                         return "+"; 
                    });
                }
                else
                {
                    cursor = startCursor1;
                }
            }
            else
            {
                cursor = startCursor1;
            }
            return r0;
        }

        private ParseResult<string> lparen(ref Cursor cursor)
        {
            ParseResult<string> r0 = null;
            var startCursor1 = cursor;
            ParseResult<string> r2 = null;
            r2 = this.ParseLiteral(ref cursor, "(");
            if (r2 != null)
            {
                ParseResult<IList<string>> r3 = null;
                r3 = this.__(ref cursor);
                if (r3 != null)
                {
                    r0 = this.ReturnHelper(startCursor1, cursor, () =>
                    {
                         return "("; 
                    });
                }
                else
                {
                    cursor = startCursor1;
                }
            }
            else
            {
                cursor = startCursor1;
            }
            return r0;
        }

        private ParseResult<string> rparen(ref Cursor cursor)
        {
            ParseResult<string> r0 = null;
            var startCursor1 = cursor;
            ParseResult<string> r2 = null;
            r2 = this.ParseLiteral(ref cursor, ")");
            if (r2 != null)
            {
                ParseResult<IList<string>> r3 = null;
                r3 = this.__(ref cursor);
                if (r3 != null)
                {
                    r0 = this.ReturnHelper(startCursor1, cursor, () =>
                    {
                         return ")"; 
                    });
                }
                else
                {
                    cursor = startCursor1;
                }
            }
            else
            {
                cursor = startCursor1;
            }
            return r0;
        }

        private ParseResult<string> dot(ref Cursor cursor)
        {
            ParseResult<string> r0 = null;
            var startCursor1 = cursor;
            ParseResult<string> r2 = null;
            r2 = this.ParseLiteral(ref cursor, ".");
            if (r2 != null)
            {
                ParseResult<IList<string>> r3 = null;
                r3 = this.__(ref cursor);
                if (r3 != null)
                {
                    r0 = this.ReturnHelper(startCursor1, cursor, () =>
                    {
                         return "."; 
                    });
                }
                else
                {
                    cursor = startCursor1;
                }
            }
            else
            {
                cursor = startCursor1;
            }
            return r0;
        }

        private ParseResult<string> lt(ref Cursor cursor)
        {
            ParseResult<string> r0 = null;
            var startCursor1 = cursor;
            ParseResult<string> r2 = null;
            r2 = this.ParseLiteral(ref cursor, "<");
            if (r2 != null)
            {
                ParseResult<IList<string>> r3 = null;
                r3 = this.__(ref cursor);
                if (r3 != null)
                {
                    r0 = this.ReturnHelper(startCursor1, cursor, () =>
                    {
                         return "."; 
                    });
                }
                else
                {
                    cursor = startCursor1;
                }
            }
            else
            {
                cursor = startCursor1;
            }
            return r0;
        }

        private ParseResult<string> gt(ref Cursor cursor)
        {
            ParseResult<string> r0 = null;
            var startCursor1 = cursor;
            ParseResult<string> r2 = null;
            r2 = this.ParseLiteral(ref cursor, ">");
            if (r2 != null)
            {
                ParseResult<IList<string>> r3 = null;
                r3 = this.__(ref cursor);
                if (r3 != null)
                {
                    r0 = this.ReturnHelper(startCursor1, cursor, () =>
                    {
                         return "."; 
                    });
                }
                else
                {
                    cursor = startCursor1;
                }
            }
            else
            {
                cursor = startCursor1;
            }
            return r0;
        }

        private ParseResult<string> identifier(ref Cursor cursor)
        {
            ParseResult<string> r0 = null;
            var startCursor1 = cursor;
            ParseResult<string> r2 = null;
            if (r2 == null)
            {
                r2 = this.letter(ref cursor);
            }
            if (r2 == null)
            {
                r2 = this.ParseLiteral(ref cursor, "_");
            }
            if (r2 == null)
            {
                r2 = this.ParseLiteral(ref cursor, "$");
            }
            var head = ValueOrDefault(r2);
            if (r2 != null)
            {
                ParseResult<IList<string>> r3 = null;
                var startCursor4 = cursor;
                var l5 = new List<string>();
                while (true)
                {
                    ParseResult<string> r6 = null;
                    if (r6 == null)
                    {
                        r6 = this.letter(ref cursor);
                    }
                    if (r6 == null)
                    {
                        r6 = this.digit(ref cursor);
                    }
                    if (r6 == null)
                    {
                        r6 = this.ParseLiteral(ref cursor, "_");
                    }
                    if (r6 == null)
                    {
                        r6 = this.ParseLiteral(ref cursor, "$");
                    }
                    if (r6 != null)
                    {
                        l5.Add(r6.Value);
                    }
                    else
                    {
                        break;
                    }
                }
                if (l5.Count >= 0)
                {
                    var len = cursor.Location - startCursor4.Location;
                    r3 = new ParseResult<IList<string>>(len, l5.AsReadOnly());
                }
                else
                {
                    cursor = startCursor4;
                }
                var tail = ValueOrDefault(r3);
                if (r3 != null)
                {
                    ParseResult<IList<string>> r7 = null;
                    r7 = this.__(ref cursor);
                    if (r7 != null)
                    {
                        r0 = this.ReturnHelper(startCursor1, cursor, () =>
                        {
                            
        return head + string.Join("", tail);
    
                        });
                    }
                    else
                    {
                        cursor = startCursor1;
                    }
                }
                else
                {
                    cursor = startCursor1;
                }
            }
            else
            {
                cursor = startCursor1;
            }
            return r0;
        }

        private ParseResult<string> dotted(ref Cursor cursor)
        {
            ParseResult<string> r0 = null;
            var startCursor1 = cursor;
            ParseResult<string> r2 = null;
            r2 = this.segment(ref cursor);
            if (r2 != null)
            {
                ParseResult<IList<string>> r3 = null;
                var startCursor4 = cursor;
                var l5 = new List<string>();
                while (true)
                {
                    ParseResult<string> r6 = null;
                    var startCursor7 = cursor;
                    ParseResult<string> r8 = null;
                    r8 = this.dot(ref cursor);
                    if (r8 != null)
                    {
                        ParseResult<string> r9 = null;
                        r9 = this.segment(ref cursor);
                        if (r9 != null)
                        {
                            var len = cursor.Location - startCursor7.Location;
                            r6 = new ParseResult<string>(len, cursor.Subject.Substring(startCursor7.Location, len));
                        }
                        else
                        {
                            cursor = startCursor7;
                        }
                    }
                    else
                    {
                        cursor = startCursor7;
                    }
                    if (r6 != null)
                    {
                        l5.Add(r6.Value);
                    }
                    else
                    {
                        break;
                    }
                }
                if (l5.Count >= 0)
                {
                    var len = cursor.Location - startCursor4.Location;
                    r3 = new ParseResult<IList<string>>(len, l5.AsReadOnly());
                }
                else
                {
                    cursor = startCursor4;
                }
                if (r3 != null)
                {
                    var len = cursor.Location - startCursor1.Location;
                    r0 = new ParseResult<string>(len, cursor.Subject.Substring(startCursor1.Location, len));
                }
                else
                {
                    cursor = startCursor1;
                }
            }
            else
            {
                cursor = startCursor1;
            }
            return r0;
        }

        private ParseResult<string> segment(ref Cursor cursor)
        {
            ParseResult<string> r0 = null;
            var startCursor1 = cursor;
            ParseResult<string> r2 = null;
            r2 = this.identifier(ref cursor);
            if (r2 != null)
            {
                ParseResult<IList<string>> r3 = null;
                var startCursor4 = cursor;
                var l5 = new List<string>();
                while (l5.Count < 1)
                {
                    ParseResult<string> r6 = null;
                    var startCursor7 = cursor;
                    ParseResult<string> r8 = null;
                    r8 = this.lt(ref cursor);
                    if (r8 != null)
                    {
                        ParseResult<string> r9 = null;
                        r9 = this.dotted(ref cursor);
                        if (r9 != null)
                        {
                            ParseResult<IList<string>> r10 = null;
                            var startCursor11 = cursor;
                            var l12 = new List<string>();
                            while (true)
                            {
                                ParseResult<string> r13 = null;
                                var startCursor14 = cursor;
                                ParseResult<string> r15 = null;
                                r15 = this.ParseLiteral(ref cursor, ",");
                                if (r15 != null)
                                {
                                    ParseResult<IList<string>> r16 = null;
                                    r16 = this.__(ref cursor);
                                    if (r16 != null)
                                    {
                                        ParseResult<string> r17 = null;
                                        r17 = this.dotted(ref cursor);
                                        if (r17 != null)
                                        {
                                            var len = cursor.Location - startCursor14.Location;
                                            r13 = new ParseResult<string>(len, cursor.Subject.Substring(startCursor14.Location, len));
                                        }
                                        else
                                        {
                                            cursor = startCursor14;
                                        }
                                    }
                                    else
                                    {
                                        cursor = startCursor14;
                                    }
                                }
                                else
                                {
                                    cursor = startCursor14;
                                }
                                if (r13 != null)
                                {
                                    l12.Add(r13.Value);
                                }
                                else
                                {
                                    break;
                                }
                            }
                            if (l12.Count >= 0)
                            {
                                var len = cursor.Location - startCursor11.Location;
                                r10 = new ParseResult<IList<string>>(len, l12.AsReadOnly());
                            }
                            else
                            {
                                cursor = startCursor11;
                            }
                            if (r10 != null)
                            {
                                ParseResult<string> r18 = null;
                                r18 = this.gt(ref cursor);
                                if (r18 != null)
                                {
                                    var len = cursor.Location - startCursor7.Location;
                                    r6 = new ParseResult<string>(len, cursor.Subject.Substring(startCursor7.Location, len));
                                }
                                else
                                {
                                    cursor = startCursor7;
                                }
                            }
                            else
                            {
                                cursor = startCursor7;
                            }
                        }
                        else
                        {
                            cursor = startCursor7;
                        }
                    }
                    else
                    {
                        cursor = startCursor7;
                    }
                    if (r6 != null)
                    {
                        l5.Add(r6.Value);
                    }
                    else
                    {
                        break;
                    }
                }
                if (l5.Count >= 0)
                {
                    var len = cursor.Location - startCursor4.Location;
                    r3 = new ParseResult<IList<string>>(len, l5.AsReadOnly());
                }
                else
                {
                    cursor = startCursor4;
                }
                if (r3 != null)
                {
                    var len = cursor.Location - startCursor1.Location;
                    r0 = new ParseResult<string>(len, cursor.Subject.Substring(startCursor1.Location, len));
                }
                else
                {
                    cursor = startCursor1;
                }
            }
            else
            {
                cursor = startCursor1;
            }
            return r0;
        }

        private ParseResult<Expression> literal(ref Cursor cursor)
        {
            ParseResult<Expression> r0 = null;
            var startCursor1 = cursor;
            ParseResult<string> r2 = null;
            if (r2 == null)
            {
                r2 = this.doubleQuotedString(ref cursor);
            }
            if (r2 == null)
            {
                r2 = this.singleQuotedString(ref cursor);
            }
            var value = ValueOrDefault(r2);
            if (r2 != null)
            {
                ParseResult<IList<string>> r3 = null;
                var startCursor4 = cursor;
                var l5 = new List<string>();
                while (l5.Count < 1)
                {
                    ParseResult<string> r6 = null;
                    r6 = this.ParseLiteral(ref cursor, "i");
                    if (r6 != null)
                    {
                        l5.Add(r6.Value);
                    }
                    else
                    {
                        break;
                    }
                }
                if (l5.Count >= 0)
                {
                    var len = cursor.Location - startCursor4.Location;
                    r3 = new ParseResult<IList<string>>(len, l5.AsReadOnly());
                }
                else
                {
                    cursor = startCursor4;
                }
                var flags = ValueOrDefault(r3);
                if (r3 != null)
                {
                    ParseResult<IList<string>> r7 = null;
                    r7 = this.__(ref cursor);
                    if (r7 != null)
                    {
                        r0 = this.ReturnHelper(startCursor1, cursor, () =>
                        {
                            
        return (Expression)new LiteralExpression(value, ignoreCase: flags.SingleOrDefault() == "i");
    
                        });
                    }
                    else
                    {
                        cursor = startCursor1;
                    }
                }
                else
                {
                    cursor = startCursor1;
                }
            }
            else
            {
                cursor = startCursor1;
            }
            return r0;
        }

        private ParseResult<string> @string(ref Cursor cursor)
        {
            ParseResult<string> r0 = null;
            var startCursor1 = cursor;
            ParseResult<string> r2 = null;
            if (r2 == null)
            {
                r2 = this.doubleQuotedString(ref cursor);
            }
            if (r2 == null)
            {
                r2 = this.singleQuotedString(ref cursor);
            }
            var @string = ValueOrDefault(r2);
            if (r2 != null)
            {
                ParseResult<IList<string>> r3 = null;
                r3 = this.__(ref cursor);
                if (r3 != null)
                {
                    r0 = this.ReturnHelper(startCursor1, cursor, () =>
                    {
                         return @string; 
                    });
                }
                else
                {
                    cursor = startCursor1;
                }
            }
            else
            {
                cursor = startCursor1;
            }
            return r0;
        }

        private ParseResult<string> doubleQuotedString(ref Cursor cursor)
        {
            ParseResult<string> r0 = null;
            var startCursor1 = cursor;
            ParseResult<string> r2 = null;
            r2 = this.ParseLiteral(ref cursor, "\"");
            if (r2 != null)
            {
                ParseResult<IList<string>> r3 = null;
                var startCursor4 = cursor;
                var l5 = new List<string>();
                while (true)
                {
                    ParseResult<string> r6 = null;
                    r6 = this.doubleQuotedCharacter(ref cursor);
                    if (r6 != null)
                    {
                        l5.Add(r6.Value);
                    }
                    else
                    {
                        break;
                    }
                }
                if (l5.Count >= 0)
                {
                    var len = cursor.Location - startCursor4.Location;
                    r3 = new ParseResult<IList<string>>(len, l5.AsReadOnly());
                }
                else
                {
                    cursor = startCursor4;
                }
                var chars = ValueOrDefault(r3);
                if (r3 != null)
                {
                    ParseResult<string> r7 = null;
                    r7 = this.ParseLiteral(ref cursor, "\"");
                    if (r7 != null)
                    {
                        r0 = this.ReturnHelper(startCursor1, cursor, () =>
                        {
                             return string.Join("", chars); 
                        });
                    }
                    else
                    {
                        cursor = startCursor1;
                    }
                }
                else
                {
                    cursor = startCursor1;
                }
            }
            else
            {
                cursor = startCursor1;
            }
            return r0;
        }

        private ParseResult<string> doubleQuotedCharacter(ref Cursor cursor)
        {
            ParseResult<string> r0 = null;
            if (r0 == null)
            {
                r0 = this.simpleDoubleQuotedCharacter(ref cursor);
            }
            if (r0 == null)
            {
                r0 = this.simpleEscapeSequence(ref cursor);
            }
            if (r0 == null)
            {
                r0 = this.zeroEscapeSequence(ref cursor);
            }
            if (r0 == null)
            {
                r0 = this.hexEscapeSequence(ref cursor);
            }
            if (r0 == null)
            {
                r0 = this.unicodeEscapeSequence(ref cursor);
            }
            if (r0 == null)
            {
                r0 = this.eolEscapeSequence(ref cursor);
            }
            return r0;
        }

        private ParseResult<string> simpleDoubleQuotedCharacter(ref Cursor cursor)
        {
            ParseResult<string> r0 = null;
            var startCursor1 = cursor;
            ParseResult<string> r2 = null;
            var startCursor3 = cursor;
            ParseResult<string> r4 = null;
            if (r4 == null)
            {
                r4 = this.ParseLiteral(ref cursor, "\"");
            }
            if (r4 == null)
            {
                r4 = this.ParseLiteral(ref cursor, "\\");
            }
            if (r4 == null)
            {
                r4 = this.eolChar(ref cursor);
            }
            cursor = startCursor3;
            if (r4 == null)
            {
                r2 = new ParseResult<string>(0, string.Empty);
            }
            if (r2 != null)
            {
                ParseResult<string> r5 = null;
                r5 = this.ParseAny(ref cursor);
                var char_ = ValueOrDefault(r5);
                if (r5 != null)
                {
                    r0 = this.ReturnHelper(startCursor1, cursor, () =>
                    {
                         return char_; 
                    });
                }
                else
                {
                    cursor = startCursor1;
                }
            }
            else
            {
                cursor = startCursor1;
            }
            return r0;
        }

        private ParseResult<string> singleQuotedString(ref Cursor cursor)
        {
            ParseResult<string> r0 = null;
            var startCursor1 = cursor;
            ParseResult<string> r2 = null;
            r2 = this.ParseLiteral(ref cursor, "\'");
            if (r2 != null)
            {
                ParseResult<IList<string>> r3 = null;
                var startCursor4 = cursor;
                var l5 = new List<string>();
                while (true)
                {
                    ParseResult<string> r6 = null;
                    r6 = this.singleQuotedCharacter(ref cursor);
                    if (r6 != null)
                    {
                        l5.Add(r6.Value);
                    }
                    else
                    {
                        break;
                    }
                }
                if (l5.Count >= 0)
                {
                    var len = cursor.Location - startCursor4.Location;
                    r3 = new ParseResult<IList<string>>(len, l5.AsReadOnly());
                }
                else
                {
                    cursor = startCursor4;
                }
                var chars = ValueOrDefault(r3);
                if (r3 != null)
                {
                    ParseResult<string> r7 = null;
                    r7 = this.ParseLiteral(ref cursor, "\'");
                    if (r7 != null)
                    {
                        r0 = this.ReturnHelper(startCursor1, cursor, () =>
                        {
                             return string.Join("", chars); 
                        });
                    }
                    else
                    {
                        cursor = startCursor1;
                    }
                }
                else
                {
                    cursor = startCursor1;
                }
            }
            else
            {
                cursor = startCursor1;
            }
            return r0;
        }

        private ParseResult<string> singleQuotedCharacter(ref Cursor cursor)
        {
            ParseResult<string> r0 = null;
            if (r0 == null)
            {
                r0 = this.simpleSingleQuotedCharacter(ref cursor);
            }
            if (r0 == null)
            {
                r0 = this.simpleEscapeSequence(ref cursor);
            }
            if (r0 == null)
            {
                r0 = this.zeroEscapeSequence(ref cursor);
            }
            if (r0 == null)
            {
                r0 = this.hexEscapeSequence(ref cursor);
            }
            if (r0 == null)
            {
                r0 = this.unicodeEscapeSequence(ref cursor);
            }
            if (r0 == null)
            {
                r0 = this.eolEscapeSequence(ref cursor);
            }
            return r0;
        }

        private ParseResult<string> simpleSingleQuotedCharacter(ref Cursor cursor)
        {
            ParseResult<string> r0 = null;
            var startCursor1 = cursor;
            ParseResult<string> r2 = null;
            var startCursor3 = cursor;
            ParseResult<string> r4 = null;
            if (r4 == null)
            {
                r4 = this.ParseLiteral(ref cursor, "\'");
            }
            if (r4 == null)
            {
                r4 = this.ParseLiteral(ref cursor, "\\");
            }
            if (r4 == null)
            {
                r4 = this.eolChar(ref cursor);
            }
            cursor = startCursor3;
            if (r4 == null)
            {
                r2 = new ParseResult<string>(0, string.Empty);
            }
            if (r2 != null)
            {
                ParseResult<string> r5 = null;
                r5 = this.ParseAny(ref cursor);
                var char_ = ValueOrDefault(r5);
                if (r5 != null)
                {
                    r0 = this.ReturnHelper(startCursor1, cursor, () =>
                    {
                         return char_; 
                    });
                }
                else
                {
                    cursor = startCursor1;
                }
            }
            else
            {
                cursor = startCursor1;
            }
            return r0;
        }

        private ParseResult<Expression> @class(ref Cursor cursor)
        {
            ParseResult<Expression> r0 = null;
            var startCursor1 = cursor;
            ParseResult<string> r2 = null;
            r2 = this.ParseLiteral(ref cursor, "[");
            if (r2 != null)
            {
                ParseResult<IList<string>> r3 = null;
                var startCursor4 = cursor;
                var l5 = new List<string>();
                while (l5.Count < 1)
                {
                    ParseResult<string> r6 = null;
                    r6 = this.ParseLiteral(ref cursor, "^");
                    if (r6 != null)
                    {
                        l5.Add(r6.Value);
                    }
                    else
                    {
                        break;
                    }
                }
                if (l5.Count >= 0)
                {
                    var len = cursor.Location - startCursor4.Location;
                    r3 = new ParseResult<IList<string>>(len, l5.AsReadOnly());
                }
                else
                {
                    cursor = startCursor4;
                }
                var inverted = ValueOrDefault(r3);
                if (r3 != null)
                {
                    ParseResult<IList<CharacterRange>> r7 = null;
                    var startCursor8 = cursor;
                    var l9 = new List<CharacterRange>();
                    while (true)
                    {
                        ParseResult<CharacterRange> r10 = null;
                        if (r10 == null)
                        {
                            r10 = this.classCharacterRange(ref cursor);
                        }
                        if (r10 == null)
                        {
                            r10 = this.classCharacter(ref cursor);
                        }
                        if (r10 != null)
                        {
                            l9.Add(r10.Value);
                        }
                        else
                        {
                            break;
                        }
                    }
                    if (l9.Count >= 0)
                    {
                        var len = cursor.Location - startCursor8.Location;
                        r7 = new ParseResult<IList<CharacterRange>>(len, l9.AsReadOnly());
                    }
                    else
                    {
                        cursor = startCursor8;
                    }
                    var parts = ValueOrDefault(r7);
                    if (r7 != null)
                    {
                        ParseResult<string> r11 = null;
                        r11 = this.ParseLiteral(ref cursor, "]");
                        if (r11 != null)
                        {
                            ParseResult<IList<string>> r12 = null;
                            var startCursor13 = cursor;
                            var l14 = new List<string>();
                            while (l14.Count < 1)
                            {
                                ParseResult<string> r15 = null;
                                r15 = this.ParseLiteral(ref cursor, "i");
                                if (r15 != null)
                                {
                                    l14.Add(r15.Value);
                                }
                                else
                                {
                                    break;
                                }
                            }
                            if (l14.Count >= 0)
                            {
                                var len = cursor.Location - startCursor13.Location;
                                r12 = new ParseResult<IList<string>>(len, l14.AsReadOnly());
                            }
                            else
                            {
                                cursor = startCursor13;
                            }
                            var flags = ValueOrDefault(r12);
                            if (r12 != null)
                            {
                                ParseResult<IList<string>> r16 = null;
                                r16 = this.__(ref cursor);
                                if (r16 != null)
                                {
                                    r0 = this.ReturnHelper(startCursor1, cursor, () =>
                                    {
                                        
        return (Expression)new ClassExpression(
            parts,
            negated: inverted.SingleOrDefault() == "^",
            ignoreCase: flags.SingleOrDefault() == "i");
    
                                    });
                                }
                                else
                                {
                                    cursor = startCursor1;
                                }
                            }
                            else
                            {
                                cursor = startCursor1;
                            }
                        }
                        else
                        {
                            cursor = startCursor1;
                        }
                    }
                    else
                    {
                        cursor = startCursor1;
                    }
                }
                else
                {
                    cursor = startCursor1;
                }
            }
            else
            {
                cursor = startCursor1;
            }
            return r0;
        }

        private ParseResult<CharacterRange> classCharacterRange(ref Cursor cursor)
        {
            ParseResult<CharacterRange> r0 = null;
            var startCursor1 = cursor;
            ParseResult<string> r2 = null;
            r2 = this.bracketDelimitedCharacter(ref cursor);
            var begin = ValueOrDefault(r2);
            if (r2 != null)
            {
                ParseResult<string> r3 = null;
                r3 = this.ParseLiteral(ref cursor, "-");
                if (r3 != null)
                {
                    ParseResult<string> r4 = null;
                    r4 = this.bracketDelimitedCharacter(ref cursor);
                    var end = ValueOrDefault(r4);
                    if (r4 != null)
                    {
                        r0 = this.ReturnHelper(startCursor1, cursor, () =>
                        {
                            
        return new CharacterRange(begin[0], end[0]);
    
                        });
                    }
                    else
                    {
                        cursor = startCursor1;
                    }
                }
                else
                {
                    cursor = startCursor1;
                }
            }
            else
            {
                cursor = startCursor1;
            }
            return r0;
        }

        private ParseResult<CharacterRange> classCharacter(ref Cursor cursor)
        {
            ParseResult<CharacterRange> r0 = null;
            var startCursor1 = cursor;
            ParseResult<string> r2 = null;
            r2 = this.bracketDelimitedCharacter(ref cursor);
            var char_ = ValueOrDefault(r2);
            if (r2 != null)
            {
                r0 = this.ReturnHelper(startCursor1, cursor, () =>
                {
                    
        return new CharacterRange(char_[0], char_[0]);
    
                });
            }
            else
            {
                cursor = startCursor1;
            }
            return r0;
        }

        private ParseResult<string> bracketDelimitedCharacter(ref Cursor cursor)
        {
            ParseResult<string> r0 = null;
            if (r0 == null)
            {
                r0 = this.simpleBracketDelimitedCharacter(ref cursor);
            }
            if (r0 == null)
            {
                r0 = this.simpleEscapeSequence(ref cursor);
            }
            if (r0 == null)
            {
                r0 = this.zeroEscapeSequence(ref cursor);
            }
            if (r0 == null)
            {
                r0 = this.hexEscapeSequence(ref cursor);
            }
            if (r0 == null)
            {
                r0 = this.unicodeEscapeSequence(ref cursor);
            }
            if (r0 == null)
            {
                r0 = this.eolEscapeSequence(ref cursor);
            }
            return r0;
        }

        private ParseResult<string> simpleBracketDelimitedCharacter(ref Cursor cursor)
        {
            ParseResult<string> r0 = null;
            var startCursor1 = cursor;
            ParseResult<string> r2 = null;
            var startCursor3 = cursor;
            ParseResult<string> r4 = null;
            if (r4 == null)
            {
                r4 = this.ParseLiteral(ref cursor, "]");
            }
            if (r4 == null)
            {
                r4 = this.ParseLiteral(ref cursor, "\\");
            }
            if (r4 == null)
            {
                r4 = this.eolChar(ref cursor);
            }
            cursor = startCursor3;
            if (r4 == null)
            {
                r2 = new ParseResult<string>(0, string.Empty);
            }
            if (r2 != null)
            {
                ParseResult<string> r5 = null;
                r5 = this.ParseAny(ref cursor);
                var char_ = ValueOrDefault(r5);
                if (r5 != null)
                {
                    r0 = this.ReturnHelper(startCursor1, cursor, () =>
                    {
                         return char_; 
                    });
                }
                else
                {
                    cursor = startCursor1;
                }
            }
            else
            {
                cursor = startCursor1;
            }
            return r0;
        }

        private ParseResult<string> simpleEscapeSequence(ref Cursor cursor)
        {
            ParseResult<string> r0 = null;
            var startCursor1 = cursor;
            ParseResult<string> r2 = null;
            r2 = this.ParseLiteral(ref cursor, "\\");
            if (r2 != null)
            {
                ParseResult<string> r3 = null;
                var startCursor4 = cursor;
                ParseResult<string> r5 = null;
                if (r5 == null)
                {
                    r5 = this.digit(ref cursor);
                }
                if (r5 == null)
                {
                    r5 = this.ParseLiteral(ref cursor, "x");
                }
                if (r5 == null)
                {
                    r5 = this.ParseLiteral(ref cursor, "u");
                }
                if (r5 == null)
                {
                    r5 = this.eolChar(ref cursor);
                }
                cursor = startCursor4;
                if (r5 == null)
                {
                    r3 = new ParseResult<string>(0, string.Empty);
                }
                if (r3 != null)
                {
                    ParseResult<string> r6 = null;
                    r6 = this.ParseAny(ref cursor);
                    var char_ = ValueOrDefault(r6);
                    if (r6 != null)
                    {
                        r0 = this.ReturnHelper(startCursor1, cursor, () =>
                        {
                            
        return char_
            .Replace("b", "\b")
            .Replace("f", "\f")
            .Replace("n", "\n")
            .Replace("r", "\r")
            .Replace("t", "\t")
            .Replace("v", "\v");
    
                        });
                    }
                    else
                    {
                        cursor = startCursor1;
                    }
                }
                else
                {
                    cursor = startCursor1;
                }
            }
            else
            {
                cursor = startCursor1;
            }
            return r0;
        }

        private ParseResult<string> zeroEscapeSequence(ref Cursor cursor)
        {
            ParseResult<string> r0 = null;
            var startCursor1 = cursor;
            ParseResult<string> r2 = null;
            r2 = this.ParseLiteral(ref cursor, "\\0");
            if (r2 != null)
            {
                ParseResult<string> r3 = null;
                var startCursor4 = cursor;
                ParseResult<string> r5 = null;
                r5 = this.digit(ref cursor);
                cursor = startCursor4;
                if (r5 == null)
                {
                    r3 = new ParseResult<string>(0, string.Empty);
                }
                if (r3 != null)
                {
                    r0 = this.ReturnHelper(startCursor1, cursor, () =>
                    {
                         return "\x00"; 
                    });
                }
                else
                {
                    cursor = startCursor1;
                }
            }
            else
            {
                cursor = startCursor1;
            }
            return r0;
        }

        private ParseResult<string> hexEscapeSequence(ref Cursor cursor)
        {
            ParseResult<string> r0 = null;
            var startCursor1 = cursor;
            ParseResult<string> r2 = null;
            r2 = this.ParseLiteral(ref cursor, "\\x");
            if (r2 != null)
            {
                ParseResult<string> r3 = null;
                r3 = this.hexDigit(ref cursor);
                var h1 = ValueOrDefault(r3);
                if (r3 != null)
                {
                    ParseResult<string> r4 = null;
                    r4 = this.hexDigit(ref cursor);
                    var h2 = ValueOrDefault(r4);
                    if (r4 != null)
                    {
                        r0 = this.ReturnHelper(startCursor1, cursor, () =>
                        {
                            
        return ((char)Convert.ToInt32(h1 + h2, 16)).ToString();
    
                        });
                    }
                    else
                    {
                        cursor = startCursor1;
                    }
                }
                else
                {
                    cursor = startCursor1;
                }
            }
            else
            {
                cursor = startCursor1;
            }
            return r0;
        }

        private ParseResult<string> unicodeEscapeSequence(ref Cursor cursor)
        {
            ParseResult<string> r0 = null;
            var startCursor1 = cursor;
            ParseResult<string> r2 = null;
            r2 = this.ParseLiteral(ref cursor, "\\u");
            if (r2 != null)
            {
                ParseResult<string> r3 = null;
                r3 = this.hexDigit(ref cursor);
                var h1 = ValueOrDefault(r3);
                if (r3 != null)
                {
                    ParseResult<string> r4 = null;
                    r4 = this.hexDigit(ref cursor);
                    var h2 = ValueOrDefault(r4);
                    if (r4 != null)
                    {
                        ParseResult<string> r5 = null;
                        r5 = this.hexDigit(ref cursor);
                        var h3 = ValueOrDefault(r5);
                        if (r5 != null)
                        {
                            ParseResult<string> r6 = null;
                            r6 = this.hexDigit(ref cursor);
                            var h4 = ValueOrDefault(r6);
                            if (r6 != null)
                            {
                                r0 = this.ReturnHelper(startCursor1, cursor, () =>
                                {
                                    
        return ((char)Convert.ToInt32(h1 + h2 + h3 + h4, 16)).ToString();
    
                                });
                            }
                            else
                            {
                                cursor = startCursor1;
                            }
                        }
                        else
                        {
                            cursor = startCursor1;
                        }
                    }
                    else
                    {
                        cursor = startCursor1;
                    }
                }
                else
                {
                    cursor = startCursor1;
                }
            }
            else
            {
                cursor = startCursor1;
            }
            return r0;
        }

        private ParseResult<string> eolEscapeSequence(ref Cursor cursor)
        {
            ParseResult<string> r0 = null;
            var startCursor1 = cursor;
            ParseResult<string> r2 = null;
            r2 = this.ParseLiteral(ref cursor, "\\");
            if (r2 != null)
            {
                ParseResult<string> r3 = null;
                r3 = this.eol(ref cursor);
                var eol = ValueOrDefault(r3);
                if (r3 != null)
                {
                    r0 = this.ReturnHelper(startCursor1, cursor, () =>
                    {
                         return eol; 
                    });
                }
                else
                {
                    cursor = startCursor1;
                }
            }
            else
            {
                cursor = startCursor1;
            }
            return r0;
        }

        private ParseResult<string> digit(ref Cursor cursor)
        {
            ParseResult<string> r0 = null;
            r0 = this.ParseClass(ref cursor, "09", "[0-9]");
            return r0;
        }

        private ParseResult<string> hexDigit(ref Cursor cursor)
        {
            ParseResult<string> r0 = null;
            r0 = this.ParseClass(ref cursor, "09afAF", "[0-9a-fA-F]");
            return r0;
        }

        private ParseResult<string> letter(ref Cursor cursor)
        {
            ParseResult<string> r0 = null;
            if (r0 == null)
            {
                r0 = this.lowerCaseLetter(ref cursor);
            }
            if (r0 == null)
            {
                r0 = this.upperCaseLetter(ref cursor);
            }
            return r0;
        }

        private ParseResult<string> lowerCaseLetter(ref Cursor cursor)
        {
            ParseResult<string> r0 = null;
            r0 = this.ParseClass(ref cursor, "az", "[a-z]");
            return r0;
        }

        private ParseResult<string> upperCaseLetter(ref Cursor cursor)
        {
            ParseResult<string> r0 = null;
            r0 = this.ParseClass(ref cursor, "AZ", "[A-Z]");
            return r0;
        }

        private ParseResult<IList<string>> __(ref Cursor cursor)
        {
            ParseResult<IList<string>> r0 = null;
            var startCursor1 = cursor;
            var l2 = new List<string>();
            while (true)
            {
                ParseResult<string> r3 = null;
                if (r3 == null)
                {
                    r3 = this.whitespace(ref cursor);
                }
                if (r3 == null)
                {
                    r3 = this.eol(ref cursor);
                }
                if (r3 == null)
                {
                    r3 = this.comment(ref cursor);
                }
                if (r3 != null)
                {
                    l2.Add(r3.Value);
                }
                else
                {
                    break;
                }
            }
            if (l2.Count >= 0)
            {
                var len = cursor.Location - startCursor1.Location;
                r0 = new ParseResult<IList<string>>(len, l2.AsReadOnly());
            }
            else
            {
                cursor = startCursor1;
            }
            return r0;
        }

        private ParseResult<string> comment(ref Cursor cursor)
        {
            ParseResult<string> r0 = null;
            if (r0 == null)
            {
                r0 = this.singleLineComment(ref cursor);
            }
            if (r0 == null)
            {
                r0 = this.multiLineComment(ref cursor);
            }
            return r0;
        }

        private ParseResult<string> singleLineComment(ref Cursor cursor)
        {
            ParseResult<string> r0 = null;
            var startCursor1 = cursor;
            ParseResult<string> r2 = null;
            r2 = this.ParseLiteral(ref cursor, "//");
            if (r2 != null)
            {
                ParseResult<IList<string>> r3 = null;
                var startCursor4 = cursor;
                var l5 = new List<string>();
                while (true)
                {
                    ParseResult<string> r6 = null;
                    var startCursor7 = cursor;
                    ParseResult<string> r8 = null;
                    var startCursor9 = cursor;
                    ParseResult<string> r10 = null;
                    r10 = this.eolChar(ref cursor);
                    cursor = startCursor9;
                    if (r10 == null)
                    {
                        r8 = new ParseResult<string>(0, string.Empty);
                    }
                    if (r8 != null)
                    {
                        ParseResult<string> r11 = null;
                        r11 = this.ParseAny(ref cursor);
                        if (r11 != null)
                        {
                            var len = cursor.Location - startCursor7.Location;
                            r6 = new ParseResult<string>(len, cursor.Subject.Substring(startCursor7.Location, len));
                        }
                        else
                        {
                            cursor = startCursor7;
                        }
                    }
                    else
                    {
                        cursor = startCursor7;
                    }
                    if (r6 != null)
                    {
                        l5.Add(r6.Value);
                    }
                    else
                    {
                        break;
                    }
                }
                if (l5.Count >= 0)
                {
                    var len = cursor.Location - startCursor4.Location;
                    r3 = new ParseResult<IList<string>>(len, l5.AsReadOnly());
                }
                else
                {
                    cursor = startCursor4;
                }
                if (r3 != null)
                {
                    var len = cursor.Location - startCursor1.Location;
                    r0 = new ParseResult<string>(len, cursor.Subject.Substring(startCursor1.Location, len));
                }
                else
                {
                    cursor = startCursor1;
                }
            }
            else
            {
                cursor = startCursor1;
            }
            return r0;
        }

        private ParseResult<string> multiLineComment(ref Cursor cursor)
        {
            ParseResult<string> r0 = null;
            var startCursor1 = cursor;
            ParseResult<string> r2 = null;
            r2 = this.ParseLiteral(ref cursor, "/*");
            if (r2 != null)
            {
                ParseResult<IList<string>> r3 = null;
                var startCursor4 = cursor;
                var l5 = new List<string>();
                while (true)
                {
                    ParseResult<string> r6 = null;
                    var startCursor7 = cursor;
                    ParseResult<string> r8 = null;
                    var startCursor9 = cursor;
                    ParseResult<string> r10 = null;
                    r10 = this.ParseLiteral(ref cursor, "*/");
                    cursor = startCursor9;
                    if (r10 == null)
                    {
                        r8 = new ParseResult<string>(0, string.Empty);
                    }
                    if (r8 != null)
                    {
                        ParseResult<string> r11 = null;
                        r11 = this.ParseAny(ref cursor);
                        if (r11 != null)
                        {
                            var len = cursor.Location - startCursor7.Location;
                            r6 = new ParseResult<string>(len, cursor.Subject.Substring(startCursor7.Location, len));
                        }
                        else
                        {
                            cursor = startCursor7;
                        }
                    }
                    else
                    {
                        cursor = startCursor7;
                    }
                    if (r6 != null)
                    {
                        l5.Add(r6.Value);
                    }
                    else
                    {
                        break;
                    }
                }
                if (l5.Count >= 0)
                {
                    var len = cursor.Location - startCursor4.Location;
                    r3 = new ParseResult<IList<string>>(len, l5.AsReadOnly());
                }
                else
                {
                    cursor = startCursor4;
                }
                if (r3 != null)
                {
                    ParseResult<string> r12 = null;
                    r12 = this.ParseLiteral(ref cursor, "*/");
                    if (r12 != null)
                    {
                        var len = cursor.Location - startCursor1.Location;
                        r0 = new ParseResult<string>(len, cursor.Subject.Substring(startCursor1.Location, len));
                    }
                    else
                    {
                        cursor = startCursor1;
                    }
                }
                else
                {
                    cursor = startCursor1;
                }
            }
            else
            {
                cursor = startCursor1;
            }
            return r0;
        }

        private ParseResult<string> eol(ref Cursor cursor)
        {
            ParseResult<string> r0 = null;
            if (r0 == null)
            {
                r0 = this.ParseLiteral(ref cursor, "\n");
            }
            if (r0 == null)
            {
                r0 = this.ParseLiteral(ref cursor, "\r\n");
            }
            if (r0 == null)
            {
                r0 = this.ParseLiteral(ref cursor, "\r");
            }
            if (r0 == null)
            {
                r0 = this.ParseLiteral(ref cursor, "\u2028");
            }
            if (r0 == null)
            {
                r0 = this.ParseLiteral(ref cursor, "\u2029");
            }
            return r0;
        }

        private ParseResult<string> eolChar(ref Cursor cursor)
        {
            ParseResult<string> r0 = null;
            r0 = this.ParseClass(ref cursor, "\n\n\r\r\u2028\u2028\u2029\u2029", "[\\n\\r\\u2028\\u2029]");
            return r0;
        }

        private ParseResult<string> whitespace(ref Cursor cursor)
        {
            ParseResult<string> r0 = null;
            r0 = this.ParseClass(ref cursor, "  \t\t\v\v\f\f\u00a0\u00a0\ufeff\ufeff\u1680\u1680\u180e\u180e\u2000\u200a\u202f\u202f\u205f\u205f\u3000\u3000", "[ \\t\\v\\f\\u00a0\\ufeff\\u1680\\u180e\\u2000-\\u200a\\u202f\\u205f\\u3000]");
            return r0;
        }

        private ParseResult<string> ParseLiteral(ref Cursor cursor, string literal, bool ignoreCase = false)
        {
            if (cursor.Location + literal.Length <= cursor.Subject.Length)
            {
                var substr = cursor.Subject.Substring(cursor.Location, literal.Length);
                if (ignoreCase ? substr.Equals(literal, StringComparison.OrdinalIgnoreCase) : substr == literal)
                {
                    var result = new ParseResult<string>(substr.Length, substr);
                    cursor = cursor.Advance(result);
                    return result;
                }
            }
            this.ReportError(cursor, "'" + literal + "'");
            return null;
        }

        private ParseResult<string> ParseClass(ref Cursor cursor, string characterRanges, string readableRanges, bool negated = false, bool ignoreCase = false)
        {
            if (cursor.Location + 1 <= cursor.Subject.Length)
            {
                var c = cursor.Subject[cursor.Location];
                bool match = false;
                for (int i = 0; !match && i < characterRanges.Length; i += 2)
                {
                    match = c >= characterRanges[i] && c <= characterRanges[i + 1];
                }
                if (!match && ignoreCase && (char.IsUpper(c) || char.IsLower(c)))
                {
                    var cs = c.ToString();
                    for (int i = 0; !match && i < characterRanges.Length; i += 2)
                    {
                        var min = characterRanges[i];
                        var max = characterRanges[i + 1];
                        for (char o = min; !match && o <= max; o++)
                        {
                            match = (char.IsUpper(o) || char.IsLower(o)) && cs.Equals(o.ToString(), StringComparison.CurrentCultureIgnoreCase);
                        }
                    }
                }
                if (match ^ negated)
                {
                    var result = new ParseResult<string>(1, cursor.Subject.Substring(cursor.Location, 1));
                    cursor = cursor.Advance(result);
                    return result;
                }
            }
            this.ReportError(cursor, readableRanges);
            return null;
        }

        private ParseResult<string> ParseAny(ref Cursor cursor)
        {
            if (cursor.Location + 1 <= cursor.Subject.Length)
            {
                var substr = cursor.Subject.Substring(cursor.Location, 1);
                var result = new ParseResult<string>(1, substr);
                cursor = cursor.Advance(result);
                return result;
            }
            this.ReportError(cursor, "any character");
            return null;
        }

        private ParseResult<T> ReturnHelper<T>(Cursor startCursor, Cursor endCursor, Func<T> wrappedCode)
        {
            var len = endCursor.Location - startCursor.Location;
            return new ParseResult<T>(len, wrappedCode());
        }

        private T ValueOrDefault<T>(ParseResult<T> result)
        {
            return result == null
                ? default(T)
                : result.Value;
        }

        private void ReportError(Cursor cursor, string expected)
        {
            if (this.rightmostErrorCursor != null && this.rightmostErrorCursor.Location > cursor.Location)
            {
                return;
            }
            if (this.rightmostErrorCursor == null || this.rightmostErrorCursor.Location < cursor.Location)
            {
                this.rightmostErrorCursor = cursor;
                this.rightmostErrors.Clear();
            }
            this.rightmostErrors.Add(expected);
        }
    }
}
