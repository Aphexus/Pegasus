// -----------------------------------------------------------------------
// <auto-generated>
//   This code was generated by Pegasus 2.2.0.0
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated.
// </auto-generated>
// -----------------------------------------------------------------------

namespace
#line 1 "PegParser.peg"
           Pegasus.Parser

#line default
{
    using System;
    using System.Collections.Generic;
    using Pegasus.Common;
    using
#line 3 "PegParser.peg"
       System.Globalization

#line default
    ;
    using
#line 4 "PegParser.peg"
       System.Linq

#line default
    ;
    using
#line 5 "PegParser.peg"
       System.Text.RegularExpressions

#line default
    ;
    using
#line 6 "PegParser.peg"
       Pegasus.Expressions

#line default
    ;
    using
#line 7 "PegParser.peg"
       Pegasus.Properties


#line default
    ;

    [System.CodeDom.Compiler.GeneratedCode("Pegasus", "2.2.0.0")]
    public partial class
#line 2 "PegParser.peg"
           PegParser

#line default
    {
        private Dictionary<string, object> storage;
        public Grammar Parse(string subject, string fileName = null)
        {
            try
            {
                this.storage = new Dictionary<string, object>();
                var cursor = new Cursor(subject, 0, fileName);
                var result = this.grammar(ref cursor);
                if (result == null)
                {
                    throw ExceptionHelper(cursor, state => "Failed to parse 'grammar'.");
                }
                return result.Value;
            }
            finally
            {
                this.storage = null;
            }
        }

        private IParseResult<
#line 9 "PegParser.peg"
         Grammar
#line default
        > grammar(ref Cursor cursor)
        {
            IParseResult<Grammar> r0 = null;
            var startCursor0 = cursor;
            IParseResult<IList<string>> r1 = null;
            r1 = this.__(ref cursor);
            if (r1 != null)
            {
                IParseResult<IList<KeyValuePair<Identifier, object>>> r2 = null;
                var settingsStart = cursor;
                var startCursor1 = cursor;
                var l0 = new List<KeyValuePair<Identifier, object>>();
                while (true)
                {
                    IParseResult<KeyValuePair<Identifier, object>> r3 = null;
                    r3 = this.setting(ref cursor);
                    if (r3 != null)
                    {
                        l0.Add(r3.Value);
                    }
                    else
                    {
                        break;
                    }
                }
                if (l0.Count >= 0)
                {
                    r2 = new ParseResult<IList<KeyValuePair<Identifier, object>>>(startCursor1, cursor, l0.AsReadOnly());
                }
                else
                {
                    cursor = startCursor1;
                }
                var settingsEnd = cursor;
                var settings = ValueOrDefault(r2);
                if (r2 != null)
                {
                    IParseResult<IList<Rule>> r4 = null;
                    var rulesStart = cursor;
                    var startCursor2 = cursor;
                    var l1 = new List<Rule>();
                    while (true)
                    {
                        IParseResult<Rule> r5 = null;
                        r5 = this.rule(ref cursor);
                        if (r5 != null)
                        {
                            l1.Add(r5.Value);
                        }
                        else
                        {
                            break;
                        }
                    }
                    if (l1.Count >= 0)
                    {
                        r4 = new ParseResult<IList<Rule>>(startCursor2, cursor, l1.AsReadOnly());
                    }
                    else
                    {
                        cursor = startCursor2;
                    }
                    var rulesEnd = cursor;
                    var rules = ValueOrDefault(r4);
                    if (r4 != null)
                    {
                        IParseResult<string> r6 = null;
                        r6 = this.EOF(ref cursor);
                        if (r6 != null)
                        {
                            r0 = this.ReturnHelper<Grammar>(startCursor0, cursor, state =>
#line 10 "PegParser.peg"
                                          
        new Grammar(rules, settings, rulesEnd)
    
#line default
                            );
                        }
                        else
                        {
                            cursor = startCursor0;
                        }
                    }
                    else
                    {
                        cursor = startCursor0;
                    }
                }
                else
                {
                    cursor = startCursor0;
                }
            }
            else
            {
                cursor = startCursor0;
            }
            return r0;
        }

        private IParseResult<
#line 14 "PegParser.peg"
         KeyValuePair<Identifier, object>
#line default
        > setting(ref Cursor cursor)
        {
            IParseResult<KeyValuePair<Identifier, object>> r0 = null;
            var startCursor0 = cursor;
            IParseResult<string> r1 = null;
            r1 = this.ParseLiteral(ref cursor, "@");
            if (r1 != null)
            {
                IParseResult<Identifier> r2 = null;
                var keyStart = cursor;
                r2 = this.identifier(ref cursor);
                var keyEnd = cursor;
                var key = ValueOrDefault(r2);
                if (r2 != null)
                {
                    IParseResult<
#line 15 "PegParser.peg"
                               object
#line default
                    > r3 = null;
                    var valueStart = cursor;
                    if (r3 == null)
                    {
                        r3 = this.@string(ref cursor);
                    }
                    if (r3 == null)
                    {
                        r3 = this.code(ref cursor);
                    }
                    if (r3 == null)
                    {
                        r3 = this.type(ref cursor);
                    }
                    var valueEnd = cursor;
                    var value = ValueOrDefault(r3);
                    if (r3 != null)
                    {
                        IParseResult<IList<string>> r4 = null;
                        var startCursor1 = cursor;
                        var l0 = new List<string>();
                        while (l0.Count < 1)
                        {
                            IParseResult<string> r5 = null;
                            r5 = this.semicolon(ref cursor);
                            if (r5 != null)
                            {
                                l0.Add(r5.Value);
                            }
                            else
                            {
                                break;
                            }
                        }
                        if (l0.Count >= 0)
                        {
                            r4 = new ParseResult<IList<string>>(startCursor1, cursor, l0.AsReadOnly());
                        }
                        else
                        {
                            cursor = startCursor1;
                        }
                        if (r4 != null)
                        {
                            r0 = this.ReturnHelper<KeyValuePair<Identifier, object>>(startCursor0, cursor, state =>
#line 15 "PegParser.peg"
                                                                         
        new KeyValuePair<Identifier, object>(key, value)
    
#line default
                            );
                        }
                        else
                        {
                            cursor = startCursor0;
                        }
                    }
                    else
                    {
                        cursor = startCursor0;
                    }
                }
                else
                {
                    cursor = startCursor0;
                }
            }
            else
            {
                cursor = startCursor0;
            }
            return r0;
        }

        private IParseResult<string> rulePreamble(ref Cursor cursor)
        {
            IParseResult<string> r0 = null;
            var startCursor0 = cursor;
            IParseResult<IList<string>> r1 = null;
            var startCursor1 = cursor;
            var l0 = new List<string>();
            while (l0.Count < 1)
            {
                IParseResult<string> r2 = null;
                var startCursor2 = cursor;
                IParseResult<string> r3 = null;
                var startCursor3 = cursor;
                IParseResult<Quantifier> r4 = null;
                r4 = this.quantifier(ref cursor);
                cursor = startCursor3;
                if (r4 == null)
                {
                    r3 = new ParseResult<string>(cursor, cursor, string.Empty);
                }
                if (r3 != null)
                {
                    IParseResult<CodeSpan> r5 = null;
                    r5 = this.expressionType(ref cursor);
                    if (r5 != null)
                    {
                        var len = cursor.Location - startCursor2.Location;
                        r2 = new ParseResult<string>(startCursor2, cursor, cursor.Subject.Substring(startCursor2.Location, len));
                    }
                    else
                    {
                        cursor = startCursor2;
                    }
                }
                else
                {
                    cursor = startCursor2;
                }
                if (r2 != null)
                {
                    l0.Add(r2.Value);
                }
                else
                {
                    break;
                }
            }
            if (l0.Count >= 0)
            {
                r1 = new ParseResult<IList<string>>(startCursor1, cursor, l0.AsReadOnly());
            }
            else
            {
                cursor = startCursor1;
            }
            if (r1 != null)
            {
                IParseResult<IList<Identifier>> r6 = null;
                var startCursor4 = cursor;
                var l1 = new List<Identifier>();
                while (true)
                {
                    IParseResult<Identifier> r7 = null;
                    r7 = this.ruleFlag(ref cursor);
                    if (r7 != null)
                    {
                        l1.Add(r7.Value);
                    }
                    else
                    {
                        break;
                    }
                }
                if (l1.Count >= 0)
                {
                    r6 = new ParseResult<IList<Identifier>>(startCursor4, cursor, l1.AsReadOnly());
                }
                else
                {
                    cursor = startCursor4;
                }
                if (r6 != null)
                {
                    IParseResult<string> r8 = null;
                    r8 = this.equals(ref cursor);
                    if (r8 != null)
                    {
                        var len = cursor.Location - startCursor0.Location;
                        r0 = new ParseResult<string>(startCursor0, cursor, cursor.Subject.Substring(startCursor0.Location, len));
                    }
                    else
                    {
                        cursor = startCursor0;
                    }
                }
                else
                {
                    cursor = startCursor0;
                }
            }
            else
            {
                cursor = startCursor0;
            }
            return r0;
        }

        private IParseResult<
#line 22 "PegParser.peg"
      Rule
#line default
        > rule(ref Cursor cursor)
        {
            IParseResult<Rule> r0 = null;
            var startCursor0 = cursor;
            IParseResult<Identifier> r1 = null;
            var nameStart = cursor;
            r1 = this.identifier(ref cursor);
            var nameEnd = cursor;
            var name = ValueOrDefault(r1);
            if (r1 != null)
            {
                IParseResult<IList<CodeSpan>> r2 = null;
                var typeStart = cursor;
                var startCursor1 = cursor;
                var l0 = new List<CodeSpan>();
                while (l0.Count < 1)
                {
                    IParseResult<CodeSpan> r3 = null;
                    r3 = this.expressionType(ref cursor);
                    if (r3 != null)
                    {
                        l0.Add(r3.Value);
                    }
                    else
                    {
                        break;
                    }
                }
                if (l0.Count >= 0)
                {
                    r2 = new ParseResult<IList<CodeSpan>>(startCursor1, cursor, l0.AsReadOnly());
                }
                else
                {
                    cursor = startCursor1;
                }
                var typeEnd = cursor;
                var type = ValueOrDefault(r2);
                if (r2 != null)
                {
                    IParseResult<IList<Identifier>> r4 = null;
                    var flagsStart = cursor;
                    var startCursor2 = cursor;
                    var l1 = new List<Identifier>();
                    while (true)
                    {
                        IParseResult<Identifier> r5 = null;
                        r5 = this.ruleFlag(ref cursor);
                        if (r5 != null)
                        {
                            l1.Add(r5.Value);
                        }
                        else
                        {
                            break;
                        }
                    }
                    if (l1.Count >= 0)
                    {
                        r4 = new ParseResult<IList<Identifier>>(startCursor2, cursor, l1.AsReadOnly());
                    }
                    else
                    {
                        cursor = startCursor2;
                    }
                    var flagsEnd = cursor;
                    var flags = ValueOrDefault(r4);
                    if (r4 != null)
                    {
                        IParseResult<string> r6 = null;
                        r6 = this.equals(ref cursor);
                        if (r6 != null)
                        {
                            IParseResult<Expression> r7 = null;
                            var expressionStart = cursor;
                            r7 = this.expression(ref cursor);
                            var expressionEnd = cursor;
                            var expression = ValueOrDefault(r7);
                            if (r7 != null)
                            {
                                IParseResult<IList<string>> r8 = null;
                                var startCursor3 = cursor;
                                var l2 = new List<string>();
                                while (l2.Count < 1)
                                {
                                    IParseResult<string> r9 = null;
                                    r9 = this.semicolon(ref cursor);
                                    if (r9 != null)
                                    {
                                        l2.Add(r9.Value);
                                    }
                                    else
                                    {
                                        break;
                                    }
                                }
                                if (l2.Count >= 0)
                                {
                                    r8 = new ParseResult<IList<string>>(startCursor3, cursor, l2.AsReadOnly());
                                }
                                else
                                {
                                    cursor = startCursor3;
                                }
                                if (r8 != null)
                                {
                                    r0 = this.ReturnHelper<Rule>(startCursor0, cursor, state =>
#line 23 "PegParser.peg"
                                                                                                  {
        var typeValue = type.SingleOrDefault();
        return new Rule(
            identifier: name,
            expression: typeValue != null ? new TypedExpression(typeValue, expression) : expression,
            flags: flags);
    }
#line default
                                    );
                                }
                                else
                                {
                                    cursor = startCursor0;
                                }
                            }
                            else
                            {
                                cursor = startCursor0;
                            }
                        }
                        else
                        {
                            cursor = startCursor0;
                        }
                    }
                    else
                    {
                        cursor = startCursor0;
                    }
                }
                else
                {
                    cursor = startCursor0;
                }
            }
            else
            {
                cursor = startCursor0;
            }
            return r0;
        }

        private IParseResult<
#line 31 "PegParser.peg"
          Identifier
#line default
        > ruleFlag(ref Cursor cursor)
        {
            IParseResult<Identifier> r0 = null;
            var storageKey = "ruleFlag:" + cursor.StateKey + ":" + cursor.Location;
            if (this.storage.ContainsKey(storageKey))
            {
                r0 = (IParseResult<Identifier>)this.storage[storageKey];
                if (r0 != null)
                {
                    cursor = r0.EndCursor;
                }
                return r0;
            }
            var startCursor0 = cursor;
            IParseResult<string> r1 = null;
            r1 = this.ParseLiteral(ref cursor, "-");
            if (r1 != null)
            {
                IParseResult<Identifier> r2 = null;
                var flagStart = cursor;
                r2 = this.identifier(ref cursor);
                var flagEnd = cursor;
                var flag = ValueOrDefault(r2);
                if (r2 != null)
                {
                    r0 = this.ReturnHelper<Identifier>(startCursor0, cursor, state =>
#line 32 "PegParser.peg"
                          flag 
#line default
                    );
                }
                else
                {
                    cursor = startCursor0;
                }
            }
            else
            {
                cursor = startCursor0;
            }
            this.storage[storageKey] = r0;
            return r0;
        }

        private IParseResult<
#line 34 "PegParser.peg"
            Expression
#line default
        > expression(ref Cursor cursor)
        {
            IParseResult<Expression> r0 = null;
            var choiceStart = cursor;
            r0 = this.choice(ref cursor);
            var choiceEnd = cursor;
            var choice = ValueOrDefault(r0);
            return r0;
        }

        private IParseResult<
#line 37 "PegParser.peg"
                CodeSpan
#line default
        > expressionType(ref Cursor cursor)
        {
            IParseResult<CodeSpan> r0 = null;
            var storageKey = "expressionType:" + cursor.StateKey + ":" + cursor.Location;
            if (this.storage.ContainsKey(storageKey))
            {
                r0 = (IParseResult<CodeSpan>)this.storage[storageKey];
                if (r0 != null)
                {
                    cursor = r0.EndCursor;
                }
                return r0;
            }
            if (r0 == null)
            {
                var startCursor0 = cursor;
                IParseResult<string> r1 = null;
                r1 = this.lt(ref cursor);
                if (r1 != null)
                {
                    IParseResult<CodeSpan> r2 = null;
                    var nameStart = cursor;
                    r2 = this.type(ref cursor);
                    var nameEnd = cursor;
                    var name = ValueOrDefault(r2);
                    if (r2 != null)
                    {
                        IParseResult<string> r3 = null;
                        r3 = this.gt(ref cursor);
                        if (r3 != null)
                        {
                            r0 = this.ReturnHelper<CodeSpan>(startCursor0, cursor, state =>
#line 38 "PegParser.peg"
                      name 
#line default
                            );
                        }
                        else
                        {
                            cursor = startCursor0;
                        }
                    }
                    else
                    {
                        cursor = startCursor0;
                    }
                }
                else
                {
                    cursor = startCursor0;
                }
            }
            if (r0 == null)
            {
                var startCursor1 = cursor;
                IParseResult<string> r4 = null;
                r4 = this.lt(ref cursor);
                if (r4 != null)
                {
                    throw this.ExceptionHelper(startCursor1, state =>
#line 39 "PegParser.peg"
               "PEG0014:" + Resources.PEG0014_INVALID_TYPE 
#line default
                    );
                }
                else
                {
                    cursor = startCursor1;
                }
            }
            this.storage[storageKey] = r0;
            return r0;
        }

        private IParseResult<
#line 41 "PegParser.peg"
        Expression
#line default
        > choice(ref Cursor cursor)
        {
            IParseResult<Expression> r0 = null;
            var startCursor0 = cursor;
            IParseResult<IList<Expression>> r1 = null;
            var choicesStart = cursor;
            var startCursor1 = cursor;
            var l0 = new List<Expression>();
            while (true)
            {
                if (l0.Count > 0)
                {
                    IParseResult<string> r2 = null;
                    r2 = this.slash(ref cursor);
                    if (r2 == null)
                    {
                        break;
                    }
                }
                IParseResult<Expression> r3 = null;
                r3 = this.sequence(ref cursor);
                if (r3 != null)
                {
                    l0.Add(r3.Value);
                }
                else
                {
                    break;
                }
            }
            if (l0.Count >= 1)
            {
                r1 = new ParseResult<IList<Expression>>(startCursor1, cursor, l0.AsReadOnly());
            }
            else
            {
                cursor = startCursor1;
            }
            var choicesEnd = cursor;
            var choices = ValueOrDefault(r1);
            if (r1 != null)
            {
                r0 = this.ReturnHelper<Expression>(startCursor0, cursor, state =>
#line 42 "PegParser.peg"
                                 choices.Count == 1 ? choices[0] : new ChoiceExpression(choices) 
#line default
                );
            }
            else
            {
                cursor = startCursor0;
            }
            return r0;
        }

        private IParseResult<
#line 44 "PegParser.peg"
          Expression
#line default
        > sequence(ref Cursor cursor)
        {
            IParseResult<Expression> r0 = null;
            if (r0 == null)
            {
                var startCursor0 = cursor;
                IParseResult<IList<Expression>> r1 = null;
                var elementsStart = cursor;
                var startCursor1 = cursor;
                var l0 = new List<Expression>();
                while (true)
                {
                    IParseResult<Expression> r2 = null;
                    r2 = this.labeled(ref cursor);
                    if (r2 != null)
                    {
                        l0.Add(r2.Value);
                    }
                    else
                    {
                        break;
                    }
                }
                if (l0.Count >= 0)
                {
                    r1 = new ParseResult<IList<Expression>>(startCursor1, cursor, l0.AsReadOnly());
                }
                else
                {
                    cursor = startCursor1;
                }
                var elementsEnd = cursor;
                var elements = ValueOrDefault(r1);
                if (r1 != null)
                {
                    IParseResult<Expression> r3 = null;
                    var codeStart = cursor;
                    r3 = this.action(ref cursor);
                    var codeEnd = cursor;
                    var code = ValueOrDefault(r3);
                    if (r3 != null)
                    {
                        r0 = this.ReturnHelper<Expression>(startCursor0, cursor, state =>
#line 45 "PegParser.peg"
                                   
        new SequenceExpression(elements.Concat(new Expression[] { code }))
    
#line default
                        );
                    }
                    else
                    {
                        cursor = startCursor0;
                    }
                }
                else
                {
                    cursor = startCursor0;
                }
            }
            if (r0 == null)
            {
                var startCursor2 = cursor;
                IParseResult<IList<Expression>> r4 = null;
                var elementsStart = cursor;
                var startCursor3 = cursor;
                var l1 = new List<Expression>();
                while (true)
                {
                    IParseResult<Expression> r5 = null;
                    r5 = this.labeled(ref cursor);
                    if (r5 != null)
                    {
                        l1.Add(r5.Value);
                    }
                    else
                    {
                        break;
                    }
                }
                if (l1.Count >= 0)
                {
                    r4 = new ParseResult<IList<Expression>>(startCursor3, cursor, l1.AsReadOnly());
                }
                else
                {
                    cursor = startCursor3;
                }
                var elementsEnd = cursor;
                var elements = ValueOrDefault(r4);
                if (r4 != null)
                {
                    r0 = this.ReturnHelper<Expression>(startCursor2, cursor, state =>
#line 48 "PegParser.peg"
                       
        elements.Count == 1
            ? elements[0]
            : new SequenceExpression(elements)
    
#line default
                    );
                }
                else
                {
                    cursor = startCursor2;
                }
            }
            return r0;
        }

        private IParseResult<
#line 54 "PegParser.peg"
         Expression
#line default
        > labeled(ref Cursor cursor)
        {
            IParseResult<Expression> r0 = null;
            var storageKey = "labeled:" + cursor.StateKey + ":" + cursor.Location;
            if (this.storage.ContainsKey(storageKey))
            {
                r0 = (IParseResult<Expression>)this.storage[storageKey];
                if (r0 != null)
                {
                    cursor = r0.EndCursor;
                }
                return r0;
            }
            if (r0 == null)
            {
                var startCursor0 = cursor;
                IParseResult<Identifier> r1 = null;
                var labelStart = cursor;
                r1 = this.identifier(ref cursor);
                var labelEnd = cursor;
                var label = ValueOrDefault(r1);
                if (r1 != null)
                {
                    IParseResult<string> r2 = null;
                    r2 = this.colon(ref cursor);
                    if (r2 != null)
                    {
                        IParseResult<Expression> r3 = null;
                        var expressionStart = cursor;
                        r3 = this.prefixed(ref cursor);
                        var expressionEnd = cursor;
                        var expression = ValueOrDefault(r3);
                        if (r3 != null)
                        {
                            r0 = this.ReturnHelper<Expression>(startCursor0, cursor, state =>
#line 55 "PegParser.peg"
                                                
        new PrefixedExpression(label, expression)
    
#line default
                            );
                        }
                        else
                        {
                            cursor = startCursor0;
                        }
                    }
                    else
                    {
                        cursor = startCursor0;
                    }
                }
                else
                {
                    cursor = startCursor0;
                }
            }
            if (r0 == null)
            {
                r0 = this.prefixed(ref cursor);
            }
            if (r0 == null)
            {
                var startCursor1 = cursor;
                IParseResult<string> r4 = null;
                var startCursor2 = cursor;
                IParseResult<string> r5 = null;
                r5 = this.ParseLiteral(ref cursor, "#STATE", ignoreCase: true);
                cursor = startCursor2;
                if (r5 != null)
                {
                    r4 = new ParseResult<string>(cursor, cursor, string.Empty);
                }
                if (r4 != null)
                {
                    IParseResult<Expression> r6 = null;
                    var codeStart = cursor;
                    r6 = this.action(ref cursor);
                    var codeEnd = cursor;
                    var code = ValueOrDefault(r6);
                    if (r6 != null)
                    {
                        r0 = this.ReturnHelper<Expression>(startCursor1, cursor, state =>
#line 59 "PegParser.peg"
                             code 
#line default
                        );
                    }
                    else
                    {
                        cursor = startCursor1;
                    }
                }
                else
                {
                    cursor = startCursor1;
                }
            }
            this.storage[storageKey] = r0;
            return r0;
        }

        private IParseResult<
#line 61 "PegParser.peg"
          Expression
#line default
        > prefixed(ref Cursor cursor)
        {
            IParseResult<Expression> r0 = null;
            if (r0 == null)
            {
                var startCursor0 = cursor;
                IParseResult<string> r1 = null;
                r1 = this.and(ref cursor);
                if (r1 != null)
                {
                    IParseResult<CodeSpan> r2 = null;
                    var codeStart = cursor;
                    r2 = this.code(ref cursor);
                    var codeEnd = cursor;
                    var code = ValueOrDefault(r2);
                    if (r2 != null)
                    {
                        r0 = this.ReturnHelper<Expression>(startCursor0, cursor, state =>
#line 62 "PegParser.peg"
                   
        new AndCodeExpression(code)
    
#line default
                        );
                    }
                    else
                    {
                        cursor = startCursor0;
                    }
                }
                else
                {
                    cursor = startCursor0;
                }
            }
            if (r0 == null)
            {
                var startCursor1 = cursor;
                IParseResult<string> r3 = null;
                r3 = this.and(ref cursor);
                if (r3 != null)
                {
                    IParseResult<Expression> r4 = null;
                    var expressionStart = cursor;
                    r4 = this.suffixed(ref cursor);
                    var expressionEnd = cursor;
                    var expression = ValueOrDefault(r4);
                    if (r4 != null)
                    {
                        r0 = this.ReturnHelper<Expression>(startCursor1, cursor, state =>
#line 65 "PegParser.peg"
                             
        new AndExpression(expression)
    
#line default
                        );
                    }
                    else
                    {
                        cursor = startCursor1;
                    }
                }
                else
                {
                    cursor = startCursor1;
                }
            }
            if (r0 == null)
            {
                var startCursor2 = cursor;
                IParseResult<string> r5 = null;
                r5 = this.not(ref cursor);
                if (r5 != null)
                {
                    IParseResult<CodeSpan> r6 = null;
                    var codeStart = cursor;
                    r6 = this.code(ref cursor);
                    var codeEnd = cursor;
                    var code = ValueOrDefault(r6);
                    if (r6 != null)
                    {
                        r0 = this.ReturnHelper<Expression>(startCursor2, cursor, state =>
#line 68 "PegParser.peg"
                   
        new NotCodeExpression(code)
    
#line default
                        );
                    }
                    else
                    {
                        cursor = startCursor2;
                    }
                }
                else
                {
                    cursor = startCursor2;
                }
            }
            if (r0 == null)
            {
                var startCursor3 = cursor;
                IParseResult<string> r7 = null;
                r7 = this.not(ref cursor);
                if (r7 != null)
                {
                    IParseResult<Expression> r8 = null;
                    var expressionStart = cursor;
                    r8 = this.suffixed(ref cursor);
                    var expressionEnd = cursor;
                    var expression = ValueOrDefault(r8);
                    if (r8 != null)
                    {
                        r0 = this.ReturnHelper<Expression>(startCursor3, cursor, state =>
#line 71 "PegParser.peg"
                             
        new NotExpression(expression)
    
#line default
                        );
                    }
                    else
                    {
                        cursor = startCursor3;
                    }
                }
                else
                {
                    cursor = startCursor3;
                }
            }
            if (r0 == null)
            {
                r0 = this.suffixed(ref cursor);
            }
            return r0;
        }

        private IParseResult<
#line 76 "PegParser.peg"
          Expression
#line default
        > suffixed(ref Cursor cursor)
        {
            IParseResult<Expression> r0 = null;
            if (r0 == null)
            {
                var startCursor0 = cursor;
                IParseResult<Expression> r1 = null;
                var expressionStart = cursor;
                r1 = this.primary(ref cursor);
                var expressionEnd = cursor;
                var expression = ValueOrDefault(r1);
                if (r1 != null)
                {
                    IParseResult<Quantifier> r2 = null;
                    var qStart = cursor;
                    r2 = this.quantifier(ref cursor);
                    var qEnd = cursor;
                    var q = ValueOrDefault(r2);
                    if (r2 != null)
                    {
                        r0 = this.ReturnHelper<Expression>(startCursor0, cursor, state =>
#line 77 "PegParser.peg"
                                     
        new RepetitionExpression(expression, q)
    
#line default
                        );
                    }
                    else
                    {
                        cursor = startCursor0;
                    }
                }
                else
                {
                    cursor = startCursor0;
                }
            }
            if (r0 == null)
            {
                r0 = this.primary(ref cursor);
            }
            return r0;
        }

        private IParseResult<
#line 82 "PegParser.peg"
         Expression
#line default
        > primary(ref Cursor cursor)
        {
            IParseResult<Expression> r0 = null;
            var storageKey = "primary:" + cursor.StateKey + ":" + cursor.Location;
            if (this.storage.ContainsKey(storageKey))
            {
                r0 = (IParseResult<Expression>)this.storage[storageKey];
                if (r0 != null)
                {
                    cursor = r0.EndCursor;
                }
                return r0;
            }
            if (r0 == null)
            {
                var startCursor0 = cursor;
                IParseResult<Identifier> r1 = null;
                var nameStart = cursor;
                r1 = this.identifier(ref cursor);
                var nameEnd = cursor;
                var name = ValueOrDefault(r1);
                if (r1 != null)
                {
                    IParseResult<string> r2 = null;
                    var startCursor1 = cursor;
                    IParseResult<string> r3 = null;
                    r3 = this.rulePreamble(ref cursor);
                    cursor = startCursor1;
                    if (r3 == null)
                    {
                        r2 = new ParseResult<string>(cursor, cursor, string.Empty);
                    }
                    if (r2 != null)
                    {
                        r0 = this.ReturnHelper<Expression>(startCursor0, cursor, state =>
#line 83 "PegParser.peg"
                                      new NameExpression(name) 
#line default
                        );
                    }
                    else
                    {
                        cursor = startCursor0;
                    }
                }
                else
                {
                    cursor = startCursor0;
                }
            }
            if (r0 == null)
            {
                r0 = this.literal(ref cursor);
            }
            if (r0 == null)
            {
                r0 = this.@class(ref cursor);
            }
            if (r0 == null)
            {
                var startCursor2 = cursor;
                IParseResult<string> r4 = null;
                r4 = this.dot(ref cursor);
                if (r4 != null)
                {
                    r0 = this.ReturnHelper<Expression>(startCursor2, cursor, state =>
#line 86 "PegParser.peg"
          new WildcardExpression() 
#line default
                    );
                }
                else
                {
                    cursor = startCursor2;
                }
            }
            if (r0 == null)
            {
                var startCursor3 = cursor;
                IParseResult<string> r5 = null;
                r5 = this.lparen(ref cursor);
                if (r5 != null)
                {
                    IParseResult<IList<CodeSpan>> r6 = null;
                    var typeStart = cursor;
                    var startCursor4 = cursor;
                    var l0 = new List<CodeSpan>();
                    while (l0.Count < 1)
                    {
                        IParseResult<CodeSpan> r7 = null;
                        r7 = this.expressionType(ref cursor);
                        if (r7 != null)
                        {
                            l0.Add(r7.Value);
                        }
                        else
                        {
                            break;
                        }
                    }
                    if (l0.Count >= 0)
                    {
                        r6 = new ParseResult<IList<CodeSpan>>(startCursor4, cursor, l0.AsReadOnly());
                    }
                    else
                    {
                        cursor = startCursor4;
                    }
                    var typeEnd = cursor;
                    var type = ValueOrDefault(r6);
                    if (r6 != null)
                    {
                        IParseResult<Expression> r8 = null;
                        var expressionStart = cursor;
                        r8 = this.expression(ref cursor);
                        var expressionEnd = cursor;
                        var expression = ValueOrDefault(r8);
                        if (r8 != null)
                        {
                            IParseResult<string> r9 = null;
                            r9 = this.rparen(ref cursor);
                            if (r9 != null)
                            {
                                r0 = this.ReturnHelper<Expression>(startCursor3, cursor, state =>
#line 87 "PegParser.peg"
                                                              {
        var typeValue = type.SingleOrDefault();
        return typeValue != null ? new TypedExpression(typeValue, expression) : expression;
    }
#line default
                                );
                            }
                            else
                            {
                                cursor = startCursor3;
                            }
                        }
                        else
                        {
                            cursor = startCursor3;
                        }
                    }
                    else
                    {
                        cursor = startCursor3;
                    }
                }
                else
                {
                    cursor = startCursor3;
                }
            }
            this.storage[storageKey] = r0;
            return r0;
        }

        private IParseResult<
#line 92 "PegParser.peg"
            Quantifier
#line default
        > quantifier(ref Cursor cursor)
        {
            IParseResult<Quantifier> r0 = null;
            var storageKey = "quantifier:" + cursor.StateKey + ":" + cursor.Location;
            if (this.storage.ContainsKey(storageKey))
            {
                r0 = (IParseResult<Quantifier>)this.storage[storageKey];
                if (r0 != null)
                {
                    cursor = r0.EndCursor;
                }
                return r0;
            }
            if (r0 == null)
            {
                var startCursor0 = cursor;
                IParseResult<string> r1 = null;
                var qStart = cursor;
                r1 = this.question(ref cursor);
                var qEnd = cursor;
                var q = ValueOrDefault(r1);
                if (r1 != null)
                {
                    r0 = this.ReturnHelper<Quantifier>(startCursor0, cursor, state =>
#line 93 "PegParser.peg"
                 new Quantifier(qStart, qEnd, min: 0, max: 1) 
#line default
                    );
                }
                else
                {
                    cursor = startCursor0;
                }
            }
            if (r0 == null)
            {
                var startCursor1 = cursor;
                IParseResult<string> r2 = null;
                var qStart = cursor;
                r2 = this.star(ref cursor);
                var qEnd = cursor;
                var q = ValueOrDefault(r2);
                if (r2 != null)
                {
                    r0 = this.ReturnHelper<Quantifier>(startCursor1, cursor, state =>
#line 94 "PegParser.peg"
             new Quantifier(qStart, qEnd, min: 0, max: null) 
#line default
                    );
                }
                else
                {
                    cursor = startCursor1;
                }
            }
            if (r0 == null)
            {
                var startCursor2 = cursor;
                IParseResult<string> r3 = null;
                var qStart = cursor;
                r3 = this.plus(ref cursor);
                var qEnd = cursor;
                var q = ValueOrDefault(r3);
                if (r3 != null)
                {
                    r0 = this.ReturnHelper<Quantifier>(startCursor2, cursor, state =>
#line 95 "PegParser.peg"
             new Quantifier(qStart, qEnd, min: 1, max: null) 
#line default
                    );
                }
                else
                {
                    cursor = startCursor2;
                }
            }
            if (r0 == null)
            {
                var startCursor3 = cursor;
                IParseResult<string> r4 = null;
                var startStart = cursor;
                r4 = this.lt(ref cursor);
                var startEnd = cursor;
                var start = ValueOrDefault(r4);
                if (r4 != null)
                {
                    IParseResult<int> r5 = null;
                    var minStart = cursor;
                    r5 = this.integer(ref cursor);
                    var minEnd = cursor;
                    var min = ValueOrDefault(r5);
                    if (r5 != null)
                    {
                        IParseResult<string> r6 = null;
                        r6 = this.ParseLiteral(ref cursor, ",");
                        if (r6 != null)
                        {
                            IParseResult<IList<int>> r7 = null;
                            var maxStart = cursor;
                            var startCursor4 = cursor;
                            var l0 = new List<int>();
                            while (l0.Count < 1)
                            {
                                IParseResult<int> r8 = null;
                                r8 = this.integer(ref cursor);
                                if (r8 != null)
                                {
                                    l0.Add(r8.Value);
                                }
                                else
                                {
                                    break;
                                }
                            }
                            if (l0.Count >= 0)
                            {
                                r7 = new ParseResult<IList<int>>(startCursor4, cursor, l0.AsReadOnly());
                            }
                            else
                            {
                                cursor = startCursor4;
                            }
                            var maxEnd = cursor;
                            var max = ValueOrDefault(r7);
                            if (r7 != null)
                            {
                                IParseResult<string> r9 = null;
                                r9 = this.ParseLiteral(ref cursor, ",");
                                if (r9 != null)
                                {
                                    IParseResult<IList<Expression>> r10 = null;
                                    var delimiterStart = cursor;
                                    var startCursor5 = cursor;
                                    var l1 = new List<Expression>();
                                    while (l1.Count < 1)
                                    {
                                        IParseResult<Expression> r11 = null;
                                        r11 = this.expression(ref cursor);
                                        if (r11 != null)
                                        {
                                            l1.Add(r11.Value);
                                        }
                                        else
                                        {
                                            break;
                                        }
                                    }
                                    if (l1.Count >= 0)
                                    {
                                        r10 = new ParseResult<IList<Expression>>(startCursor5, cursor, l1.AsReadOnly());
                                    }
                                    else
                                    {
                                        cursor = startCursor5;
                                    }
                                    var delimiterEnd = cursor;
                                    var delimiter = ValueOrDefault(r10);
                                    if (r10 != null)
                                    {
                                        IParseResult<string> r12 = null;
                                        var endStart = cursor;
                                        r12 = this.gt(ref cursor);
                                        var endEnd = cursor;
                                        var end = ValueOrDefault(r12);
                                        if (r12 != null)
                                        {
                                            r0 = this.ReturnHelper<Quantifier>(startCursor3, cursor, state =>
#line 96 "PegParser.peg"
                                                                             new Quantifier(startStart, endEnd, min: min, max: max.Cast<int?>().SingleOrDefault(), delimiter: delimiter.SingleOrDefault()) 
#line default
                                            );
                                        }
                                        else
                                        {
                                            cursor = startCursor3;
                                        }
                                    }
                                    else
                                    {
                                        cursor = startCursor3;
                                    }
                                }
                                else
                                {
                                    cursor = startCursor3;
                                }
                            }
                            else
                            {
                                cursor = startCursor3;
                            }
                        }
                        else
                        {
                            cursor = startCursor3;
                        }
                    }
                    else
                    {
                        cursor = startCursor3;
                    }
                }
                else
                {
                    cursor = startCursor3;
                }
            }
            if (r0 == null)
            {
                var startCursor6 = cursor;
                IParseResult<string> r13 = null;
                var startStart = cursor;
                r13 = this.lt(ref cursor);
                var startEnd = cursor;
                var start = ValueOrDefault(r13);
                if (r13 != null)
                {
                    IParseResult<int> r14 = null;
                    var minStart = cursor;
                    r14 = this.integer(ref cursor);
                    var minEnd = cursor;
                    var min = ValueOrDefault(r14);
                    if (r14 != null)
                    {
                        IParseResult<string> r15 = null;
                        r15 = this.ParseLiteral(ref cursor, ",");
                        if (r15 != null)
                        {
                            IParseResult<IList<int>> r16 = null;
                            var maxStart = cursor;
                            var startCursor7 = cursor;
                            var l2 = new List<int>();
                            while (l2.Count < 1)
                            {
                                IParseResult<int> r17 = null;
                                r17 = this.integer(ref cursor);
                                if (r17 != null)
                                {
                                    l2.Add(r17.Value);
                                }
                                else
                                {
                                    break;
                                }
                            }
                            if (l2.Count >= 0)
                            {
                                r16 = new ParseResult<IList<int>>(startCursor7, cursor, l2.AsReadOnly());
                            }
                            else
                            {
                                cursor = startCursor7;
                            }
                            var maxEnd = cursor;
                            var max = ValueOrDefault(r16);
                            if (r16 != null)
                            {
                                IParseResult<string> r18 = null;
                                var endStart = cursor;
                                r18 = this.gt(ref cursor);
                                var endEnd = cursor;
                                var end = ValueOrDefault(r18);
                                if (r18 != null)
                                {
                                    r0 = this.ReturnHelper<Quantifier>(startCursor6, cursor, state =>
#line 97 "PegParser.peg"
                                                   new Quantifier(startStart, endEnd, min: min, max: max.Cast<int?>().SingleOrDefault()) 
#line default
                                    );
                                }
                                else
                                {
                                    cursor = startCursor6;
                                }
                            }
                            else
                            {
                                cursor = startCursor6;
                            }
                        }
                        else
                        {
                            cursor = startCursor6;
                        }
                    }
                    else
                    {
                        cursor = startCursor6;
                    }
                }
                else
                {
                    cursor = startCursor6;
                }
            }
            if (r0 == null)
            {
                var startCursor8 = cursor;
                IParseResult<string> r19 = null;
                var startStart = cursor;
                r19 = this.lt(ref cursor);
                var startEnd = cursor;
                var start = ValueOrDefault(r19);
                if (r19 != null)
                {
                    IParseResult<int> r20 = null;
                    var countStart = cursor;
                    r20 = this.integer(ref cursor);
                    var countEnd = cursor;
                    var count = ValueOrDefault(r20);
                    if (r20 != null)
                    {
                        IParseResult<string> r21 = null;
                        var endStart = cursor;
                        r21 = this.gt(ref cursor);
                        var endEnd = cursor;
                        var end = ValueOrDefault(r21);
                        if (r21 != null)
                        {
                            r0 = this.ReturnHelper<Quantifier>(startCursor8, cursor, state =>
#line 98 "PegParser.peg"
                                    new Quantifier(startStart, endEnd, min: count, max: count) 
#line default
                            );
                        }
                        else
                        {
                            cursor = startCursor8;
                        }
                    }
                    else
                    {
                        cursor = startCursor8;
                    }
                }
                else
                {
                    cursor = startCursor8;
                }
            }
            this.storage[storageKey] = r0;
            return r0;
        }

        private IParseResult<
#line 100 "PegParser.peg"
         int
#line default
        > integer(ref Cursor cursor)
        {
            IParseResult<int> r0 = null;
            var startCursor0 = cursor;
            IParseResult<IList<string>> r1 = null;
            var digitsStart = cursor;
            var startCursor1 = cursor;
            var l0 = new List<string>();
            while (true)
            {
                IParseResult<string> r2 = null;
                r2 = this.digit(ref cursor);
                if (r2 != null)
                {
                    l0.Add(r2.Value);
                }
                else
                {
                    break;
                }
            }
            if (l0.Count >= 1)
            {
                r1 = new ParseResult<IList<string>>(startCursor1, cursor, l0.AsReadOnly());
            }
            else
            {
                cursor = startCursor1;
            }
            var digitsEnd = cursor;
            var digits = ValueOrDefault(r1);
            if (r1 != null)
            {
                r0 = this.ReturnHelper<int>(startCursor0, cursor, state =>
#line 101 "PegParser.peg"
                    int.Parse(string.Concat(digits)) 
#line default
                );
            }
            else
            {
                cursor = startCursor0;
            }
            return r0;
        }

        private IParseResult<
#line 103 "PegParser.peg"
        Expression
#line default
        > action(ref Cursor cursor)
        {
            IParseResult<Expression> r0 = null;
            var startCursor0 = cursor;
            IParseResult<CodeType> r1 = null;
            var typeStart = cursor;
            r1 = this.actionType(ref cursor);
            var typeEnd = cursor;
            var type = ValueOrDefault(r1);
            if (r1 != null)
            {
                IParseResult<CodeSpan> r2 = null;
                var codeStart = cursor;
                r2 = this.code(ref cursor);
                var codeEnd = cursor;
                var code = ValueOrDefault(r2);
                if (r2 != null)
                {
                    r0 = this.ReturnHelper<Expression>(startCursor0, cursor, state =>
#line 104 "PegParser.peg"
                                new CodeExpression(code, type) 
#line default
                    );
                }
                else
                {
                    cursor = startCursor0;
                }
            }
            else
            {
                cursor = startCursor0;
            }
            return r0;
        }

        private IParseResult<
#line 106 "PegParser.peg"
            CodeType
#line default
        > actionType(ref Cursor cursor)
        {
            IParseResult<CodeType> r0 = null;
            if (r0 == null)
            {
                var startCursor0 = cursor;
                IParseResult<string> r1 = null;
                r1 = this.ParseLiteral(ref cursor, "#ERROR", ignoreCase: true);
                if (r1 != null)
                {
                    r0 = this.ReturnHelper<CodeType>(startCursor0, cursor, state =>
#line 107 "PegParser.peg"
                CodeType.Error 
#line default
                    );
                }
                else
                {
                    cursor = startCursor0;
                }
            }
            if (r0 == null)
            {
                var startCursor1 = cursor;
                IParseResult<string> r2 = null;
                r2 = this.ParseLiteral(ref cursor, "#STATE", ignoreCase: true);
                if (r2 != null)
                {
                    r0 = this.ReturnHelper<CodeType>(startCursor1, cursor, state =>
#line 108 "PegParser.peg"
                CodeType.State 
#line default
                    );
                }
                else
                {
                    cursor = startCursor1;
                }
            }
            if (r0 == null)
            {
                var startCursor2 = cursor;
                r0 = this.ReturnHelper<CodeType>(startCursor2, cursor, state =>
#line 109 "PegParser.peg"
                CodeType.Result 
#line default
                );
            }
            return r0;
        }

        private IParseResult<
#line 111 "PegParser.peg"
      CodeSpan
#line default
        > code(ref Cursor cursor)
        {
            IParseResult<CodeSpan> r0 = null;
            if (r0 == null)
            {
                var startCursor0 = cursor;
                IParseResult<string> r1 = null;
                r1 = this.ParseLiteral(ref cursor, "{");
                if (r1 != null)
                {
                    IParseResult<string> r2 = null;
                    var contentsStart = cursor;
                    r2 = this.braceContents(ref cursor);
                    var contentsEnd = cursor;
                    var contents = ValueOrDefault(r2);
                    if (r2 != null)
                    {
                        IParseResult<string> r3 = null;
                        r3 = this.ParseLiteral(ref cursor, "}");
                        if (r3 != null)
                        {
                            IParseResult<IList<string>> r4 = null;
                            r4 = this.__(ref cursor);
                            if (r4 != null)
                            {
                                r0 = this.ReturnHelper<CodeSpan>(startCursor0, cursor, state =>
#line 112 "PegParser.peg"
                                        new CodeSpan(contents, contentsStart, contentsEnd) 
#line default
                                );
                            }
                            else
                            {
                                cursor = startCursor0;
                            }
                        }
                        else
                        {
                            cursor = startCursor0;
                        }
                    }
                    else
                    {
                        cursor = startCursor0;
                    }
                }
                else
                {
                    cursor = startCursor0;
                }
            }
            if (r0 == null)
            {
                var startCursor1 = cursor;
                IParseResult<string> r5 = null;
                r5 = this.ParseLiteral(ref cursor, "{");
                if (r5 != null)
                {
                    throw this.ExceptionHelper(startCursor1, state =>
#line 113 "PegParser.peg"
                "PEG0011:" + Resources.PEG0011_UNTERMINATED_CODE 
#line default
                    );
                }
                else
                {
                    cursor = startCursor1;
                }
            }
            return r0;
        }

        private IParseResult<string> braceContents(ref Cursor cursor)
        {
            IParseResult<string> r0 = null;
            var startCursor0 = cursor;
            IParseResult<IList<string>> r1 = null;
            var partsStart = cursor;
            var startCursor1 = cursor;
            var l0 = new List<string>();
            while (true)
            {
                IParseResult<string> r2 = null;
                if (r2 == null)
                {
                    r2 = this.nonBraceCharacters(ref cursor);
                }
                if (r2 == null)
                {
                    var startCursor2 = cursor;
                    IParseResult<string> r3 = null;
                    r3 = this.ParseLiteral(ref cursor, "{");
                    if (r3 != null)
                    {
                        IParseResult<string> r4 = null;
                        r4 = this.braceContents(ref cursor);
                        if (r4 != null)
                        {
                            IParseResult<string> r5 = null;
                            r5 = this.ParseLiteral(ref cursor, "}");
                            if (r5 != null)
                            {
                                var len = cursor.Location - startCursor2.Location;
                                r2 = new ParseResult<string>(startCursor2, cursor, cursor.Subject.Substring(startCursor2.Location, len));
                            }
                            else
                            {
                                cursor = startCursor2;
                            }
                        }
                        else
                        {
                            cursor = startCursor2;
                        }
                    }
                    else
                    {
                        cursor = startCursor2;
                    }
                }
                if (r2 != null)
                {
                    l0.Add(r2.Value);
                }
                else
                {
                    break;
                }
            }
            if (l0.Count >= 0)
            {
                r1 = new ParseResult<IList<string>>(startCursor1, cursor, l0.AsReadOnly());
            }
            else
            {
                cursor = startCursor1;
            }
            var partsEnd = cursor;
            var parts = ValueOrDefault(r1);
            if (r1 != null)
            {
                r0 = this.ReturnHelper<string>(startCursor0, cursor, state =>
#line 116 "PegParser.peg"
                                                          string.Concat(parts) 
#line default
                );
            }
            else
            {
                cursor = startCursor0;
            }
            return r0;
        }

        private IParseResult<string> nonBraceCharacters(ref Cursor cursor)
        {
            IParseResult<string> r0 = null;
            var startCursor0 = cursor;
            IParseResult<IList<string>> r1 = null;
            var charsStart = cursor;
            var startCursor1 = cursor;
            var l0 = new List<string>();
            while (true)
            {
                IParseResult<string> r2 = null;
                r2 = this.nonBraceCharacter(ref cursor);
                if (r2 != null)
                {
                    l0.Add(r2.Value);
                }
                else
                {
                    break;
                }
            }
            if (l0.Count >= 1)
            {
                r1 = new ParseResult<IList<string>>(startCursor1, cursor, l0.AsReadOnly());
            }
            else
            {
                cursor = startCursor1;
            }
            var charsEnd = cursor;
            var chars = ValueOrDefault(r1);
            if (r1 != null)
            {
                r0 = this.ReturnHelper<string>(startCursor0, cursor, state =>
#line 119 "PegParser.peg"
                               string.Concat(chars) 
#line default
                );
            }
            else
            {
                cursor = startCursor0;
            }
            return r0;
        }

        private IParseResult<string> nonBraceCharacter(ref Cursor cursor)
        {
            IParseResult<string> r0 = null;
            r0 = this.ParseClass(ref cursor, "{{}}", negated: true);
            return r0;
        }

        private IParseResult<string> equals(ref Cursor cursor)
        {
            IParseResult<string> r0 = null;
            var startCursor0 = cursor;
            IParseResult<string> r1 = null;
            r1 = this.ParseLiteral(ref cursor, "=");
            if (r1 != null)
            {
                IParseResult<IList<string>> r2 = null;
                r2 = this.__(ref cursor);
                if (r2 != null)
                {
                    r0 = this.ReturnHelper<string>(startCursor0, cursor, state =>
#line 124 "PegParser.peg"
                     "=" 
#line default
                    );
                }
                else
                {
                    cursor = startCursor0;
                }
            }
            else
            {
                cursor = startCursor0;
            }
            return r0;
        }

        private IParseResult<string> colon(ref Cursor cursor)
        {
            IParseResult<string> r0 = null;
            var startCursor0 = cursor;
            IParseResult<string> r1 = null;
            r1 = this.ParseLiteral(ref cursor, ":");
            if (r1 != null)
            {
                IParseResult<IList<string>> r2 = null;
                r2 = this.__(ref cursor);
                if (r2 != null)
                {
                    r0 = this.ReturnHelper<string>(startCursor0, cursor, state =>
#line 125 "PegParser.peg"
                     ":" 
#line default
                    );
                }
                else
                {
                    cursor = startCursor0;
                }
            }
            else
            {
                cursor = startCursor0;
            }
            return r0;
        }

        private IParseResult<string> semicolon(ref Cursor cursor)
        {
            IParseResult<string> r0 = null;
            var startCursor0 = cursor;
            IParseResult<string> r1 = null;
            r1 = this.ParseLiteral(ref cursor, ";");
            if (r1 != null)
            {
                IParseResult<IList<string>> r2 = null;
                r2 = this.__(ref cursor);
                if (r2 != null)
                {
                    r0 = this.ReturnHelper<string>(startCursor0, cursor, state =>
#line 126 "PegParser.peg"
                     ";" 
#line default
                    );
                }
                else
                {
                    cursor = startCursor0;
                }
            }
            else
            {
                cursor = startCursor0;
            }
            return r0;
        }

        private IParseResult<string> slash(ref Cursor cursor)
        {
            IParseResult<string> r0 = null;
            var startCursor0 = cursor;
            IParseResult<string> r1 = null;
            r1 = this.ParseLiteral(ref cursor, "/");
            if (r1 != null)
            {
                IParseResult<IList<string>> r2 = null;
                r2 = this.__(ref cursor);
                if (r2 != null)
                {
                    r0 = this.ReturnHelper<string>(startCursor0, cursor, state =>
#line 127 "PegParser.peg"
                     "/" 
#line default
                    );
                }
                else
                {
                    cursor = startCursor0;
                }
            }
            else
            {
                cursor = startCursor0;
            }
            return r0;
        }

        private IParseResult<string> and(ref Cursor cursor)
        {
            IParseResult<string> r0 = null;
            var startCursor0 = cursor;
            IParseResult<string> r1 = null;
            r1 = this.ParseLiteral(ref cursor, "&");
            if (r1 != null)
            {
                IParseResult<IList<string>> r2 = null;
                r2 = this.__(ref cursor);
                if (r2 != null)
                {
                    r0 = this.ReturnHelper<string>(startCursor0, cursor, state =>
#line 128 "PegParser.peg"
                     "&" 
#line default
                    );
                }
                else
                {
                    cursor = startCursor0;
                }
            }
            else
            {
                cursor = startCursor0;
            }
            return r0;
        }

        private IParseResult<string> not(ref Cursor cursor)
        {
            IParseResult<string> r0 = null;
            var startCursor0 = cursor;
            IParseResult<string> r1 = null;
            r1 = this.ParseLiteral(ref cursor, "!");
            if (r1 != null)
            {
                IParseResult<IList<string>> r2 = null;
                r2 = this.__(ref cursor);
                if (r2 != null)
                {
                    r0 = this.ReturnHelper<string>(startCursor0, cursor, state =>
#line 129 "PegParser.peg"
                     "!" 
#line default
                    );
                }
                else
                {
                    cursor = startCursor0;
                }
            }
            else
            {
                cursor = startCursor0;
            }
            return r0;
        }

        private IParseResult<string> question(ref Cursor cursor)
        {
            IParseResult<string> r0 = null;
            var startCursor0 = cursor;
            IParseResult<string> r1 = null;
            r1 = this.ParseLiteral(ref cursor, "?");
            if (r1 != null)
            {
                IParseResult<IList<string>> r2 = null;
                r2 = this.__(ref cursor);
                if (r2 != null)
                {
                    r0 = this.ReturnHelper<string>(startCursor0, cursor, state =>
#line 130 "PegParser.peg"
                     "?" 
#line default
                    );
                }
                else
                {
                    cursor = startCursor0;
                }
            }
            else
            {
                cursor = startCursor0;
            }
            return r0;
        }

        private IParseResult<string> star(ref Cursor cursor)
        {
            IParseResult<string> r0 = null;
            var startCursor0 = cursor;
            IParseResult<string> r1 = null;
            r1 = this.ParseLiteral(ref cursor, "*");
            if (r1 != null)
            {
                IParseResult<IList<string>> r2 = null;
                r2 = this.__(ref cursor);
                if (r2 != null)
                {
                    r0 = this.ReturnHelper<string>(startCursor0, cursor, state =>
#line 131 "PegParser.peg"
                     "*" 
#line default
                    );
                }
                else
                {
                    cursor = startCursor0;
                }
            }
            else
            {
                cursor = startCursor0;
            }
            return r0;
        }

        private IParseResult<string> plus(ref Cursor cursor)
        {
            IParseResult<string> r0 = null;
            var startCursor0 = cursor;
            IParseResult<string> r1 = null;
            r1 = this.ParseLiteral(ref cursor, "+");
            if (r1 != null)
            {
                IParseResult<IList<string>> r2 = null;
                r2 = this.__(ref cursor);
                if (r2 != null)
                {
                    r0 = this.ReturnHelper<string>(startCursor0, cursor, state =>
#line 132 "PegParser.peg"
                     "+" 
#line default
                    );
                }
                else
                {
                    cursor = startCursor0;
                }
            }
            else
            {
                cursor = startCursor0;
            }
            return r0;
        }

        private IParseResult<string> lparen(ref Cursor cursor)
        {
            IParseResult<string> r0 = null;
            var startCursor0 = cursor;
            IParseResult<string> r1 = null;
            r1 = this.ParseLiteral(ref cursor, "(");
            if (r1 != null)
            {
                IParseResult<IList<string>> r2 = null;
                r2 = this.__(ref cursor);
                if (r2 != null)
                {
                    r0 = this.ReturnHelper<string>(startCursor0, cursor, state =>
#line 133 "PegParser.peg"
                     "(" 
#line default
                    );
                }
                else
                {
                    cursor = startCursor0;
                }
            }
            else
            {
                cursor = startCursor0;
            }
            return r0;
        }

        private IParseResult<string> rparen(ref Cursor cursor)
        {
            IParseResult<string> r0 = null;
            var startCursor0 = cursor;
            IParseResult<string> r1 = null;
            r1 = this.ParseLiteral(ref cursor, ")");
            if (r1 != null)
            {
                IParseResult<IList<string>> r2 = null;
                r2 = this.__(ref cursor);
                if (r2 != null)
                {
                    r0 = this.ReturnHelper<string>(startCursor0, cursor, state =>
#line 134 "PegParser.peg"
                     ")" 
#line default
                    );
                }
                else
                {
                    cursor = startCursor0;
                }
            }
            else
            {
                cursor = startCursor0;
            }
            return r0;
        }

        private IParseResult<string> dot(ref Cursor cursor)
        {
            IParseResult<string> r0 = null;
            var startCursor0 = cursor;
            IParseResult<string> r1 = null;
            r1 = this.ParseLiteral(ref cursor, ".");
            if (r1 != null)
            {
                IParseResult<IList<string>> r2 = null;
                r2 = this.__(ref cursor);
                if (r2 != null)
                {
                    r0 = this.ReturnHelper<string>(startCursor0, cursor, state =>
#line 135 "PegParser.peg"
                     "." 
#line default
                    );
                }
                else
                {
                    cursor = startCursor0;
                }
            }
            else
            {
                cursor = startCursor0;
            }
            return r0;
        }

        private IParseResult<string> lt(ref Cursor cursor)
        {
            IParseResult<string> r0 = null;
            var startCursor0 = cursor;
            IParseResult<string> r1 = null;
            r1 = this.ParseLiteral(ref cursor, "<");
            if (r1 != null)
            {
                IParseResult<IList<string>> r2 = null;
                r2 = this.__(ref cursor);
                if (r2 != null)
                {
                    r0 = this.ReturnHelper<string>(startCursor0, cursor, state =>
#line 136 "PegParser.peg"
                     "." 
#line default
                    );
                }
                else
                {
                    cursor = startCursor0;
                }
            }
            else
            {
                cursor = startCursor0;
            }
            return r0;
        }

        private IParseResult<string> gt(ref Cursor cursor)
        {
            IParseResult<string> r0 = null;
            var startCursor0 = cursor;
            IParseResult<string> r1 = null;
            r1 = this.ParseLiteral(ref cursor, ">");
            if (r1 != null)
            {
                IParseResult<IList<string>> r2 = null;
                r2 = this.__(ref cursor);
                if (r2 != null)
                {
                    r0 = this.ReturnHelper<string>(startCursor0, cursor, state =>
#line 137 "PegParser.peg"
                     "." 
#line default
                    );
                }
                else
                {
                    cursor = startCursor0;
                }
            }
            else
            {
                cursor = startCursor0;
            }
            return r0;
        }

        private IParseResult<string> comma(ref Cursor cursor)
        {
            IParseResult<string> r0 = null;
            var startCursor0 = cursor;
            IParseResult<string> r1 = null;
            r1 = this.ParseLiteral(ref cursor, ",");
            if (r1 != null)
            {
                IParseResult<IList<string>> r2 = null;
                r2 = this.__(ref cursor);
                if (r2 != null)
                {
                    r0 = this.ReturnHelper<string>(startCursor0, cursor, state =>
#line 138 "PegParser.peg"
                     "," 
#line default
                    );
                }
                else
                {
                    cursor = startCursor0;
                }
            }
            else
            {
                cursor = startCursor0;
            }
            return r0;
        }

        private IParseResult<string> lbracket(ref Cursor cursor)
        {
            IParseResult<string> r0 = null;
            var startCursor0 = cursor;
            IParseResult<string> r1 = null;
            r1 = this.ParseLiteral(ref cursor, "[");
            if (r1 != null)
            {
                IParseResult<IList<string>> r2 = null;
                r2 = this.__(ref cursor);
                if (r2 != null)
                {
                    r0 = this.ReturnHelper<string>(startCursor0, cursor, state =>
#line 139 "PegParser.peg"
                     "[" 
#line default
                    );
                }
                else
                {
                    cursor = startCursor0;
                }
            }
            else
            {
                cursor = startCursor0;
            }
            return r0;
        }

        private IParseResult<string> rbracket(ref Cursor cursor)
        {
            IParseResult<string> r0 = null;
            var startCursor0 = cursor;
            IParseResult<string> r1 = null;
            r1 = this.ParseLiteral(ref cursor, "]");
            if (r1 != null)
            {
                IParseResult<IList<string>> r2 = null;
                r2 = this.__(ref cursor);
                if (r2 != null)
                {
                    r0 = this.ReturnHelper<string>(startCursor0, cursor, state =>
#line 140 "PegParser.peg"
                     "]" 
#line default
                    );
                }
                else
                {
                    cursor = startCursor0;
                }
            }
            else
            {
                cursor = startCursor0;
            }
            return r0;
        }

        private IParseResult<
#line 142 "PegParser.peg"
            Identifier
#line default
        > identifier(ref Cursor cursor)
        {
            IParseResult<Identifier> r0 = null;
            var storageKey = "identifier:" + cursor.StateKey + ":" + cursor.Location;
            if (this.storage.ContainsKey(storageKey))
            {
                r0 = (IParseResult<Identifier>)this.storage[storageKey];
                if (r0 != null)
                {
                    cursor = r0.EndCursor;
                }
                return r0;
            }
            var startCursor0 = cursor;
            IParseResult<string> r1 = null;
            var nameStart = cursor;
            var startCursor1 = cursor;
            IParseResult<string> r2 = null;
            var startCursor2 = cursor;
            IParseResult<string> r3 = null;
            r3 = this.digit(ref cursor);
            cursor = startCursor2;
            if (r3 == null)
            {
                r2 = new ParseResult<string>(cursor, cursor, string.Empty);
            }
            if (r2 != null)
            {
                IParseResult<IList<string>> r4 = null;
                var startCursor3 = cursor;
                var l0 = new List<string>();
                while (true)
                {
                    IParseResult<string> r5 = null;
                    if (r5 == null)
                    {
                        r5 = this.letter(ref cursor);
                    }
                    if (r5 == null)
                    {
                        r5 = this.digit(ref cursor);
                    }
                    if (r5 == null)
                    {
                        r5 = this.ParseLiteral(ref cursor, "_");
                    }
                    if (r5 == null)
                    {
                        r5 = this.ParseLiteral(ref cursor, "$");
                    }
                    if (r5 != null)
                    {
                        l0.Add(r5.Value);
                    }
                    else
                    {
                        break;
                    }
                }
                if (l0.Count >= 1)
                {
                    r4 = new ParseResult<IList<string>>(startCursor3, cursor, l0.AsReadOnly());
                }
                else
                {
                    cursor = startCursor3;
                }
                if (r4 != null)
                {
                    var len = cursor.Location - startCursor1.Location;
                    r1 = new ParseResult<string>(startCursor1, cursor, cursor.Subject.Substring(startCursor1.Location, len));
                }
                else
                {
                    cursor = startCursor1;
                }
            }
            else
            {
                cursor = startCursor1;
            }
            var nameEnd = cursor;
            var name = ValueOrDefault(r1);
            if (r1 != null)
            {
                IParseResult<IList<string>> r6 = null;
                r6 = this.__(ref cursor);
                if (r6 != null)
                {
                    r0 = this.ReturnHelper<Identifier>(startCursor0, cursor, state =>
#line 143 "PegParser.peg"
                                                     new Identifier(name, nameStart, nameEnd) 
#line default
                    );
                }
                else
                {
                    cursor = startCursor0;
                }
            }
            else
            {
                cursor = startCursor0;
            }
            this.storage[storageKey] = r0;
            return r0;
        }

        private IParseResult<
#line 145 "PegParser.peg"
      CodeSpan
#line default
        > type(ref Cursor cursor)
        {
            IParseResult<CodeSpan> r0 = null;
            var startCursor0 = cursor;
            IParseResult<string> r1 = null;
            var typeStart = cursor;
            var startCursor1 = cursor;
            IParseResult<string> r2 = null;
            r2 = this.nonArrayType(ref cursor);
            if (r2 != null)
            {
                IParseResult<IList<string>> r3 = null;
                var startCursor2 = cursor;
                var l0 = new List<string>();
                while (true)
                {
                    IParseResult<string> r4 = null;
                    r4 = this.rankSpecifiers(ref cursor);
                    if (r4 != null)
                    {
                        l0.Add(r4.Value);
                    }
                    else
                    {
                        break;
                    }
                }
                if (l0.Count >= 0)
                {
                    r3 = new ParseResult<IList<string>>(startCursor2, cursor, l0.AsReadOnly());
                }
                else
                {
                    cursor = startCursor2;
                }
                if (r3 != null)
                {
                    var len = cursor.Location - startCursor1.Location;
                    r1 = new ParseResult<string>(startCursor1, cursor, cursor.Subject.Substring(startCursor1.Location, len));
                }
                else
                {
                    cursor = startCursor1;
                }
            }
            else
            {
                cursor = startCursor1;
            }
            var typeEnd = cursor;
            var type = ValueOrDefault(r1);
            if (r1 != null)
            {
                r0 = this.ReturnHelper<CodeSpan>(startCursor0, cursor, state =>
#line 146 "PegParser.peg"
                                          new CodeSpan(type, typeStart, typeEnd, value: Regex.Replace(Regex.Replace(type, @"(?<!,)\s+|\s+(?=[,\]])", ""), @",(?=\w)", ", ")) 
#line default
                );
            }
            else
            {
                cursor = startCursor0;
            }
            return r0;
        }

        private IParseResult<string> nonArrayType(ref Cursor cursor)
        {
            IParseResult<string> r0 = null;
            if (r0 == null)
            {
                r0 = this.nullableType(ref cursor);
            }
            if (r0 == null)
            {
                r0 = this.typeName(ref cursor);
            }
            return r0;
        }

        private IParseResult<string> nullableType(ref Cursor cursor)
        {
            IParseResult<string> r0 = null;
            var startCursor0 = cursor;
            IParseResult<string> r1 = null;
            r1 = this.typeName(ref cursor);
            if (r1 != null)
            {
                IParseResult<string> r2 = null;
                r2 = this.question(ref cursor);
                if (r2 != null)
                {
                    var len = cursor.Location - startCursor0.Location;
                    r0 = new ParseResult<string>(startCursor0, cursor, cursor.Subject.Substring(startCursor0.Location, len));
                }
                else
                {
                    cursor = startCursor0;
                }
            }
            else
            {
                cursor = startCursor0;
            }
            return r0;
        }

        private IParseResult<string> rankSpecifiers(ref Cursor cursor)
        {
            IParseResult<string> r0 = null;
            var startCursor0 = cursor;
            IParseResult<string> r1 = null;
            r1 = this.lbracket(ref cursor);
            if (r1 != null)
            {
                IParseResult<IList<IList<string>>> r2 = null;
                var startCursor1 = cursor;
                var l0 = new List<IList<string>>();
                while (l0.Count < 1)
                {
                    IParseResult<IList<string>> r3 = null;
                    r3 = this.dimSeparator(ref cursor);
                    if (r3 != null)
                    {
                        l0.Add(r3.Value);
                    }
                    else
                    {
                        break;
                    }
                }
                if (l0.Count >= 0)
                {
                    r2 = new ParseResult<IList<IList<string>>>(startCursor1, cursor, l0.AsReadOnly());
                }
                else
                {
                    cursor = startCursor1;
                }
                if (r2 != null)
                {
                    IParseResult<string> r4 = null;
                    r4 = this.rbracket(ref cursor);
                    if (r4 != null)
                    {
                        var len = cursor.Location - startCursor0.Location;
                        r0 = new ParseResult<string>(startCursor0, cursor, cursor.Subject.Substring(startCursor0.Location, len));
                    }
                    else
                    {
                        cursor = startCursor0;
                    }
                }
                else
                {
                    cursor = startCursor0;
                }
            }
            else
            {
                cursor = startCursor0;
            }
            return r0;
        }

        private IParseResult<IList<string>> dimSeparator(ref Cursor cursor)
        {
            IParseResult<IList<string>> r0 = null;
            var startCursor0 = cursor;
            var l0 = new List<string>();
            while (true)
            {
                IParseResult<string> r1 = null;
                r1 = this.comma(ref cursor);
                if (r1 != null)
                {
                    l0.Add(r1.Value);
                }
                else
                {
                    break;
                }
            }
            if (l0.Count >= 1)
            {
                r0 = new ParseResult<IList<string>>(startCursor0, cursor, l0.AsReadOnly());
            }
            else
            {
                cursor = startCursor0;
            }
            return r0;
        }

        private IParseResult<string> typeName(ref Cursor cursor)
        {
            IParseResult<string> r0 = null;
            if (r0 == null)
            {
                var startCursor0 = cursor;
                IParseResult<Identifier> r1 = null;
                r1 = this.identifier(ref cursor);
                if (r1 != null)
                {
                    IParseResult<IList<string>> r2 = null;
                    var startCursor1 = cursor;
                    var l0 = new List<string>();
                    while (l0.Count < 1)
                    {
                        IParseResult<string> r3 = null;
                        r3 = this.typeArgumentList(ref cursor);
                        if (r3 != null)
                        {
                            l0.Add(r3.Value);
                        }
                        else
                        {
                            break;
                        }
                    }
                    if (l0.Count >= 0)
                    {
                        r2 = new ParseResult<IList<string>>(startCursor1, cursor, l0.AsReadOnly());
                    }
                    else
                    {
                        cursor = startCursor1;
                    }
                    if (r2 != null)
                    {
                        IParseResult<string> r4 = null;
                        r4 = this.dot(ref cursor);
                        if (r4 != null)
                        {
                            IParseResult<string> r5 = null;
                            r5 = this.typeName(ref cursor);
                            if (r5 != null)
                            {
                                var len = cursor.Location - startCursor0.Location;
                                r0 = new ParseResult<string>(startCursor0, cursor, cursor.Subject.Substring(startCursor0.Location, len));
                            }
                            else
                            {
                                cursor = startCursor0;
                            }
                        }
                        else
                        {
                            cursor = startCursor0;
                        }
                    }
                    else
                    {
                        cursor = startCursor0;
                    }
                }
                else
                {
                    cursor = startCursor0;
                }
            }
            if (r0 == null)
            {
                var startCursor2 = cursor;
                IParseResult<Identifier> r6 = null;
                r6 = this.identifier(ref cursor);
                if (r6 != null)
                {
                    IParseResult<IList<string>> r7 = null;
                    var startCursor3 = cursor;
                    var l1 = new List<string>();
                    while (l1.Count < 1)
                    {
                        IParseResult<string> r8 = null;
                        r8 = this.typeArgumentList(ref cursor);
                        if (r8 != null)
                        {
                            l1.Add(r8.Value);
                        }
                        else
                        {
                            break;
                        }
                    }
                    if (l1.Count >= 0)
                    {
                        r7 = new ParseResult<IList<string>>(startCursor3, cursor, l1.AsReadOnly());
                    }
                    else
                    {
                        cursor = startCursor3;
                    }
                    if (r7 != null)
                    {
                        var len = cursor.Location - startCursor2.Location;
                        r0 = new ParseResult<string>(startCursor2, cursor, cursor.Subject.Substring(startCursor2.Location, len));
                    }
                    else
                    {
                        cursor = startCursor2;
                    }
                }
                else
                {
                    cursor = startCursor2;
                }
            }
            return r0;
        }

        private IParseResult<string> typeArgumentList(ref Cursor cursor)
        {
            IParseResult<string> r0 = null;
            var startCursor0 = cursor;
            IParseResult<string> r1 = null;
            r1 = this.lt(ref cursor);
            if (r1 != null)
            {
                IParseResult<string> r2 = null;
                r2 = this.typeArguments(ref cursor);
                if (r2 != null)
                {
                    IParseResult<string> r3 = null;
                    r3 = this.gt(ref cursor);
                    if (r3 != null)
                    {
                        var len = cursor.Location - startCursor0.Location;
                        r0 = new ParseResult<string>(startCursor0, cursor, cursor.Subject.Substring(startCursor0.Location, len));
                    }
                    else
                    {
                        cursor = startCursor0;
                    }
                }
                else
                {
                    cursor = startCursor0;
                }
            }
            else
            {
                cursor = startCursor0;
            }
            return r0;
        }

        private IParseResult<string> typeArguments(ref Cursor cursor)
        {
            IParseResult<string> r0 = null;
            if (r0 == null)
            {
                var startCursor0 = cursor;
                IParseResult<CodeSpan> r1 = null;
                r1 = this.type(ref cursor);
                if (r1 != null)
                {
                    IParseResult<string> r2 = null;
                    r2 = this.comma(ref cursor);
                    if (r2 != null)
                    {
                        IParseResult<string> r3 = null;
                        r3 = this.typeArguments(ref cursor);
                        if (r3 != null)
                        {
                            var len = cursor.Location - startCursor0.Location;
                            r0 = new ParseResult<string>(startCursor0, cursor, cursor.Subject.Substring(startCursor0.Location, len));
                        }
                        else
                        {
                            cursor = startCursor0;
                        }
                    }
                    else
                    {
                        cursor = startCursor0;
                    }
                }
                else
                {
                    cursor = startCursor0;
                }
            }
            if (r0 == null)
            {
                var startCursor1 = cursor;
                IParseResult<CodeSpan> r4 = null;
                r4 = this.type(ref cursor);
                if (r4 != null)
                {
                    IParseResult<string> r5 = null;
                    r5 = this.ParseLiteral(ref cursor, "");
                    if (r5 != null)
                    {
                        var len = cursor.Location - startCursor1.Location;
                        r0 = new ParseResult<string>(startCursor1, cursor, cursor.Subject.Substring(startCursor1.Location, len));
                    }
                    else
                    {
                        cursor = startCursor1;
                    }
                }
                else
                {
                    cursor = startCursor1;
                }
            }
            return r0;
        }

        private IParseResult<
#line 172 "PegParser.peg"
         Expression
#line default
        > literal(ref Cursor cursor)
        {
            IParseResult<Expression> r0 = null;
            var startCursor0 = cursor;
            IParseResult<string> r1 = null;
            var valueStart = cursor;
            if (r1 == null)
            {
                r1 = this.doubleQuotedString(ref cursor);
            }
            if (r1 == null)
            {
                r1 = this.singleQuotedString(ref cursor);
            }
            var valueEnd = cursor;
            var value = ValueOrDefault(r1);
            if (r1 != null)
            {
                IParseResult<string> r2 = null;
                var flagsStart = cursor;
                if (r2 == null)
                {
                    r2 = this.ParseLiteral(ref cursor, "i");
                }
                if (r2 == null)
                {
                    r2 = this.ParseLiteral(ref cursor, "r");
                }
                if (r2 == null)
                {
                    r2 = this.ParseLiteral(ref cursor, "ir");
                }
                if (r2 == null)
                {
                    r2 = this.ParseLiteral(ref cursor, "ri");
                }
                if (r2 == null)
                {
                    var startCursor1 = cursor;
                    var len = cursor.Location - startCursor1.Location;
                    r2 = new ParseResult<string>(startCursor1, cursor, cursor.Subject.Substring(startCursor1.Location, len));
                }
                var flagsEnd = cursor;
                var flags = ValueOrDefault(r2);
                if (r2 != null)
                {
                    IParseResult<IList<string>> r3 = null;
                    r3 = this.__(ref cursor);
                    if (r3 != null)
                    {
                        r0 = this.ReturnHelper<Expression>(startCursor0, cursor, state =>
#line 173 "PegParser.peg"
                                                                                           
        new LiteralExpression(valueStart, flagsEnd, value, ignoreCase: flags.Contains('i'), fromResource: flags.Contains('r'))
    
#line default
                        );
                    }
                    else
                    {
                        cursor = startCursor0;
                    }
                }
                else
                {
                    cursor = startCursor0;
                }
            }
            else
            {
                cursor = startCursor0;
            }
            return r0;
        }

        private IParseResult<string> @string(ref Cursor cursor)
        {
            IParseResult<string> r0 = null;
            var startCursor0 = cursor;
            IParseResult<string> r1 = null;
            var stringStart = cursor;
            if (r1 == null)
            {
                r1 = this.doubleQuotedString(ref cursor);
            }
            if (r1 == null)
            {
                r1 = this.singleQuotedString(ref cursor);
            }
            var stringEnd = cursor;
            var @string = ValueOrDefault(r1);
            if (r1 != null)
            {
                IParseResult<IList<string>> r2 = null;
                r2 = this.__(ref cursor);
                if (r2 != null)
                {
                    r0 = this.ReturnHelper<string>(startCursor0, cursor, state =>
#line 178 "PegParser.peg"
                                                          @string 
#line default
                    );
                }
                else
                {
                    cursor = startCursor0;
                }
            }
            else
            {
                cursor = startCursor0;
            }
            return r0;
        }

        private IParseResult<string> doubleQuotedString(ref Cursor cursor)
        {
            IParseResult<string> r0 = null;
            if (r0 == null)
            {
                var startCursor0 = cursor;
                IParseResult<string> r1 = null;
                r1 = this.ParseLiteral(ref cursor, "\"");
                if (r1 != null)
                {
                    IParseResult<IList<string>> r2 = null;
                    var charsStart = cursor;
                    var startCursor1 = cursor;
                    var l0 = new List<string>();
                    while (true)
                    {
                        IParseResult<string> r3 = null;
                        r3 = this.doubleQuotedCharacter(ref cursor);
                        if (r3 != null)
                        {
                            l0.Add(r3.Value);
                        }
                        else
                        {
                            break;
                        }
                    }
                    if (l0.Count >= 0)
                    {
                        r2 = new ParseResult<IList<string>>(startCursor1, cursor, l0.AsReadOnly());
                    }
                    else
                    {
                        cursor = startCursor1;
                    }
                    var charsEnd = cursor;
                    var chars = ValueOrDefault(r2);
                    if (r2 != null)
                    {
                        IParseResult<string> r4 = null;
                        r4 = this.ParseLiteral(ref cursor, "\"");
                        if (r4 != null)
                        {
                            r0 = this.ReturnHelper<string>(startCursor0, cursor, state =>
#line 181 "PegParser.peg"
                                           string.Concat(chars) 
#line default
                            );
                        }
                        else
                        {
                            cursor = startCursor0;
                        }
                    }
                    else
                    {
                        cursor = startCursor0;
                    }
                }
                else
                {
                    cursor = startCursor0;
                }
            }
            if (r0 == null)
            {
                var startCursor2 = cursor;
                IParseResult<string> r5 = null;
                r5 = this.ParseLiteral(ref cursor, "\"");
                if (r5 != null)
                {
                    throw this.ExceptionHelper(startCursor2, state =>
#line 182 "PegParser.peg"
                "PEG0009:" + Resources.PEG0009_UNTERMINATED_STRING 
#line default
                    );
                }
                else
                {
                    cursor = startCursor2;
                }
            }
            return r0;
        }

        private IParseResult<string> doubleQuotedCharacter(ref Cursor cursor)
        {
            IParseResult<string> r0 = null;
            if (r0 == null)
            {
                r0 = this.simpleDoubleQuotedCharacter(ref cursor);
            }
            if (r0 == null)
            {
                r0 = this.simpleEscapeSequence(ref cursor);
            }
            if (r0 == null)
            {
                r0 = this.zeroEscapeSequence(ref cursor);
            }
            if (r0 == null)
            {
                r0 = this.hexEscapeSequence(ref cursor);
            }
            if (r0 == null)
            {
                r0 = this.unicodeEscapeSequence(ref cursor);
            }
            if (r0 == null)
            {
                r0 = this.eolEscapeSequence(ref cursor);
            }
            return r0;
        }

        private IParseResult<string> simpleDoubleQuotedCharacter(ref Cursor cursor)
        {
            IParseResult<string> r0 = null;
            var startCursor0 = cursor;
            IParseResult<string> r1 = null;
            var startCursor1 = cursor;
            IParseResult<string> r2 = null;
            if (r2 == null)
            {
                r2 = this.ParseLiteral(ref cursor, "\"");
            }
            if (r2 == null)
            {
                r2 = this.ParseLiteral(ref cursor, "\\");
            }
            if (r2 == null)
            {
                r2 = this.eolChar(ref cursor);
            }
            cursor = startCursor1;
            if (r2 == null)
            {
                r1 = new ParseResult<string>(cursor, cursor, string.Empty);
            }
            if (r1 != null)
            {
                IParseResult<string> r3 = null;
                var charStart = cursor;
                r3 = this.ParseAny(ref cursor);
                var charEnd = cursor;
                var @char = ValueOrDefault(r3);
                if (r3 != null)
                {
                    r0 = this.ReturnHelper<string>(startCursor0, cursor, state =>
#line 193 "PegParser.peg"
                                     @char 
#line default
                    );
                }
                else
                {
                    cursor = startCursor0;
                }
            }
            else
            {
                cursor = startCursor0;
            }
            return r0;
        }

        private IParseResult<string> singleQuotedString(ref Cursor cursor)
        {
            IParseResult<string> r0 = null;
            if (r0 == null)
            {
                var startCursor0 = cursor;
                IParseResult<string> r1 = null;
                r1 = this.ParseLiteral(ref cursor, "\'");
                if (r1 != null)
                {
                    IParseResult<IList<string>> r2 = null;
                    var charsStart = cursor;
                    var startCursor1 = cursor;
                    var l0 = new List<string>();
                    while (true)
                    {
                        IParseResult<string> r3 = null;
                        r3 = this.singleQuotedCharacter(ref cursor);
                        if (r3 != null)
                        {
                            l0.Add(r3.Value);
                        }
                        else
                        {
                            break;
                        }
                    }
                    if (l0.Count >= 0)
                    {
                        r2 = new ParseResult<IList<string>>(startCursor1, cursor, l0.AsReadOnly());
                    }
                    else
                    {
                        cursor = startCursor1;
                    }
                    var charsEnd = cursor;
                    var chars = ValueOrDefault(r2);
                    if (r2 != null)
                    {
                        IParseResult<string> r4 = null;
                        r4 = this.ParseLiteral(ref cursor, "\'");
                        if (r4 != null)
                        {
                            r0 = this.ReturnHelper<string>(startCursor0, cursor, state =>
#line 196 "PegParser.peg"
                                           string.Concat(chars) 
#line default
                            );
                        }
                        else
                        {
                            cursor = startCursor0;
                        }
                    }
                    else
                    {
                        cursor = startCursor0;
                    }
                }
                else
                {
                    cursor = startCursor0;
                }
            }
            if (r0 == null)
            {
                var startCursor2 = cursor;
                IParseResult<string> r5 = null;
                r5 = this.ParseLiteral(ref cursor, "\'");
                if (r5 != null)
                {
                    throw this.ExceptionHelper(startCursor2, state =>
#line 197 "PegParser.peg"
                "PEG0009:" + Resources.PEG0009_UNTERMINATED_STRING 
#line default
                    );
                }
                else
                {
                    cursor = startCursor2;
                }
            }
            return r0;
        }

        private IParseResult<string> singleQuotedCharacter(ref Cursor cursor)
        {
            IParseResult<string> r0 = null;
            if (r0 == null)
            {
                r0 = this.simpleSingleQuotedCharacter(ref cursor);
            }
            if (r0 == null)
            {
                r0 = this.simpleEscapeSequence(ref cursor);
            }
            if (r0 == null)
            {
                r0 = this.zeroEscapeSequence(ref cursor);
            }
            if (r0 == null)
            {
                r0 = this.hexEscapeSequence(ref cursor);
            }
            if (r0 == null)
            {
                r0 = this.unicodeEscapeSequence(ref cursor);
            }
            if (r0 == null)
            {
                r0 = this.eolEscapeSequence(ref cursor);
            }
            return r0;
        }

        private IParseResult<string> simpleSingleQuotedCharacter(ref Cursor cursor)
        {
            IParseResult<string> r0 = null;
            var startCursor0 = cursor;
            IParseResult<string> r1 = null;
            var startCursor1 = cursor;
            IParseResult<string> r2 = null;
            if (r2 == null)
            {
                r2 = this.ParseLiteral(ref cursor, "\'");
            }
            if (r2 == null)
            {
                r2 = this.ParseLiteral(ref cursor, "\\");
            }
            if (r2 == null)
            {
                r2 = this.eolChar(ref cursor);
            }
            cursor = startCursor1;
            if (r2 == null)
            {
                r1 = new ParseResult<string>(cursor, cursor, string.Empty);
            }
            if (r1 != null)
            {
                IParseResult<string> r3 = null;
                var charStart = cursor;
                r3 = this.ParseAny(ref cursor);
                var charEnd = cursor;
                var @char = ValueOrDefault(r3);
                if (r3 != null)
                {
                    r0 = this.ReturnHelper<string>(startCursor0, cursor, state =>
#line 208 "PegParser.peg"
                                     @char 
#line default
                    );
                }
                else
                {
                    cursor = startCursor0;
                }
            }
            else
            {
                cursor = startCursor0;
            }
            return r0;
        }

        private IParseResult<
#line 210 "PegParser.peg"
       Expression
#line default
        > @class(ref Cursor cursor)
        {
            IParseResult<Expression> r0 = null;
            var startCursor0 = cursor;
            IParseResult<string> r1 = null;
            r1 = this.ParseLiteral(ref cursor, "[");
            if (r1 != null)
            {
                IParseResult<IList<string>> r2 = null;
                var invertedStart = cursor;
                var startCursor1 = cursor;
                var l0 = new List<string>();
                while (l0.Count < 1)
                {
                    IParseResult<string> r3 = null;
                    r3 = this.ParseLiteral(ref cursor, "^");
                    if (r3 != null)
                    {
                        l0.Add(r3.Value);
                    }
                    else
                    {
                        break;
                    }
                }
                if (l0.Count >= 0)
                {
                    r2 = new ParseResult<IList<string>>(startCursor1, cursor, l0.AsReadOnly());
                }
                else
                {
                    cursor = startCursor1;
                }
                var invertedEnd = cursor;
                var inverted = ValueOrDefault(r2);
                if (r2 != null)
                {
                    IParseResult<IList<CharacterRange>> r4 = null;
                    var partsStart = cursor;
                    var startCursor2 = cursor;
                    var l1 = new List<CharacterRange>();
                    while (true)
                    {
                        IParseResult<CharacterRange> r5 = null;
                        if (r5 == null)
                        {
                            r5 = this.classCharacterRange(ref cursor);
                        }
                        if (r5 == null)
                        {
                            r5 = this.classCharacter(ref cursor);
                        }
                        if (r5 != null)
                        {
                            l1.Add(r5.Value);
                        }
                        else
                        {
                            break;
                        }
                    }
                    if (l1.Count >= 0)
                    {
                        r4 = new ParseResult<IList<CharacterRange>>(startCursor2, cursor, l1.AsReadOnly());
                    }
                    else
                    {
                        cursor = startCursor2;
                    }
                    var partsEnd = cursor;
                    var parts = ValueOrDefault(r4);
                    if (r4 != null)
                    {
                        IParseResult<string> r6 = null;
                        if (r6 == null)
                        {
                            r6 = this.ParseLiteral(ref cursor, "]");
                        }
                        if (r6 == null)
                        {
                            var startCursor3 = cursor;
                            throw this.ExceptionHelper(startCursor3, state =>
#line 211 "PegParser.peg"
                                                                                   "PEG0010:" + Resources.PEG0010_UNTERMINATED_CLASS 
#line default
                            );
                        }
                        if (r6 != null)
                        {
                            IParseResult<IList<string>> r7 = null;
                            var flagsStart = cursor;
                            var startCursor4 = cursor;
                            var l2 = new List<string>();
                            while (l2.Count < 1)
                            {
                                IParseResult<string> r8 = null;
                                r8 = this.ParseLiteral(ref cursor, "i");
                                if (r8 != null)
                                {
                                    l2.Add(r8.Value);
                                }
                                else
                                {
                                    break;
                                }
                            }
                            if (l2.Count >= 0)
                            {
                                r7 = new ParseResult<IList<string>>(startCursor4, cursor, l2.AsReadOnly());
                            }
                            else
                            {
                                cursor = startCursor4;
                            }
                            var flagsEnd = cursor;
                            var flags = ValueOrDefault(r7);
                            if (r7 != null)
                            {
                                IParseResult<IList<string>> r9 = null;
                                r9 = this.__(ref cursor);
                                if (r9 != null)
                                {
                                    r0 = this.ReturnHelper<Expression>(startCursor0, cursor, state =>
#line 211 "PegParser.peg"
                                                                                                                                                       
        new ClassExpression(
            parts,
            negated: inverted.SingleOrDefault() == "^",
            ignoreCase: flags.SingleOrDefault() == "i")
    
#line default
                                    );
                                }
                                else
                                {
                                    cursor = startCursor0;
                                }
                            }
                            else
                            {
                                cursor = startCursor0;
                            }
                        }
                        else
                        {
                            cursor = startCursor0;
                        }
                    }
                    else
                    {
                        cursor = startCursor0;
                    }
                }
                else
                {
                    cursor = startCursor0;
                }
            }
            else
            {
                cursor = startCursor0;
            }
            return r0;
        }

        private IParseResult<
#line 218 "PegParser.peg"
                     CharacterRange
#line default
        > classCharacterRange(ref Cursor cursor)
        {
            IParseResult<CharacterRange> r0 = null;
            var startCursor0 = cursor;
            IParseResult<string> r1 = null;
            var beginStart = cursor;
            r1 = this.bracketDelimitedCharacter(ref cursor);
            var beginEnd = cursor;
            var begin = ValueOrDefault(r1);
            if (r1 != null)
            {
                IParseResult<string> r2 = null;
                r2 = this.ParseLiteral(ref cursor, "-");
                if (r2 != null)
                {
                    IParseResult<string> r3 = null;
                    var endStart = cursor;
                    r3 = this.bracketDelimitedCharacter(ref cursor);
                    var endEnd = cursor;
                    var end = ValueOrDefault(r3);
                    if (r3 != null)
                    {
                        r0 = this.ReturnHelper<CharacterRange>(startCursor0, cursor, state =>
#line 219 "PegParser.peg"
                                                                       
        new CharacterRange(begin[0], end[0])
    
#line default
                        );
                    }
                    else
                    {
                        cursor = startCursor0;
                    }
                }
                else
                {
                    cursor = startCursor0;
                }
            }
            else
            {
                cursor = startCursor0;
            }
            return r0;
        }

        private IParseResult<
#line 223 "PegParser.peg"
                CharacterRange
#line default
        > classCharacter(ref Cursor cursor)
        {
            IParseResult<CharacterRange> r0 = null;
            var startCursor0 = cursor;
            IParseResult<string> r1 = null;
            var char_Start = cursor;
            r1 = this.bracketDelimitedCharacter(ref cursor);
            var char_End = cursor;
            var char_ = ValueOrDefault(r1);
            if (r1 != null)
            {
                r0 = this.ReturnHelper<CharacterRange>(startCursor0, cursor, state =>
#line 224 "PegParser.peg"
                                     
        new CharacterRange(char_[0], char_[0])
    
#line default
                );
            }
            else
            {
                cursor = startCursor0;
            }
            return r0;
        }

        private IParseResult<string> bracketDelimitedCharacter(ref Cursor cursor)
        {
            IParseResult<string> r0 = null;
            if (r0 == null)
            {
                r0 = this.simpleBracketDelimitedCharacter(ref cursor);
            }
            if (r0 == null)
            {
                r0 = this.simpleEscapeSequence(ref cursor);
            }
            if (r0 == null)
            {
                r0 = this.zeroEscapeSequence(ref cursor);
            }
            if (r0 == null)
            {
                r0 = this.hexEscapeSequence(ref cursor);
            }
            if (r0 == null)
            {
                r0 = this.unicodeEscapeSequence(ref cursor);
            }
            if (r0 == null)
            {
                r0 = this.eolEscapeSequence(ref cursor);
            }
            return r0;
        }

        private IParseResult<string> simpleBracketDelimitedCharacter(ref Cursor cursor)
        {
            IParseResult<string> r0 = null;
            var startCursor0 = cursor;
            IParseResult<string> r1 = null;
            var startCursor1 = cursor;
            IParseResult<string> r2 = null;
            if (r2 == null)
            {
                r2 = this.ParseLiteral(ref cursor, "]");
            }
            if (r2 == null)
            {
                r2 = this.ParseLiteral(ref cursor, "\\");
            }
            if (r2 == null)
            {
                r2 = this.eolChar(ref cursor);
            }
            cursor = startCursor1;
            if (r2 == null)
            {
                r1 = new ParseResult<string>(cursor, cursor, string.Empty);
            }
            if (r1 != null)
            {
                IParseResult<string> r3 = null;
                var charStart = cursor;
                r3 = this.ParseAny(ref cursor);
                var charEnd = cursor;
                var @char = ValueOrDefault(r3);
                if (r3 != null)
                {
                    r0 = this.ReturnHelper<string>(startCursor0, cursor, state =>
#line 237 "PegParser.peg"
                                     @char 
#line default
                    );
                }
                else
                {
                    cursor = startCursor0;
                }
            }
            else
            {
                cursor = startCursor0;
            }
            return r0;
        }

        private IParseResult<string> simpleEscapeSequence(ref Cursor cursor)
        {
            IParseResult<string> r0 = null;
            var startCursor0 = cursor;
            IParseResult<string> r1 = null;
            r1 = this.ParseLiteral(ref cursor, "\\");
            if (r1 != null)
            {
                IParseResult<string> r2 = null;
                var startCursor1 = cursor;
                IParseResult<string> r3 = null;
                if (r3 == null)
                {
                    r3 = this.digit(ref cursor);
                }
                if (r3 == null)
                {
                    r3 = this.ParseLiteral(ref cursor, "x");
                }
                if (r3 == null)
                {
                    r3 = this.ParseLiteral(ref cursor, "u");
                }
                if (r3 == null)
                {
                    r3 = this.eolChar(ref cursor);
                }
                cursor = startCursor1;
                if (r3 == null)
                {
                    r2 = new ParseResult<string>(cursor, cursor, string.Empty);
                }
                if (r2 != null)
                {
                    IParseResult<string> r4 = null;
                    var charStart = cursor;
                    r4 = this.ParseAny(ref cursor);
                    var charEnd = cursor;
                    var @char = ValueOrDefault(r4);
                    if (r4 != null)
                    {
                        r0 = this.ReturnHelper<string>(startCursor0, cursor, state =>
#line 240 "PegParser.peg"
                                                
        @char
            .Replace("b", "\b")
            .Replace("f", "\f")
            .Replace("n", "\n")
            .Replace("r", "\r")
            .Replace("t", "\t")
            .Replace("v", "\v")
    
#line default
                        );
                    }
                    else
                    {
                        cursor = startCursor0;
                    }
                }
                else
                {
                    cursor = startCursor0;
                }
            }
            else
            {
                cursor = startCursor0;
            }
            return r0;
        }

        private IParseResult<string> zeroEscapeSequence(ref Cursor cursor)
        {
            IParseResult<string> r0 = null;
            var startCursor0 = cursor;
            IParseResult<string> r1 = null;
            r1 = this.ParseLiteral(ref cursor, "\\0");
            if (r1 != null)
            {
                IParseResult<string> r2 = null;
                var startCursor1 = cursor;
                IParseResult<string> r3 = null;
                r3 = this.digit(ref cursor);
                cursor = startCursor1;
                if (r3 == null)
                {
                    r2 = new ParseResult<string>(cursor, cursor, string.Empty);
                }
                if (r2 != null)
                {
                    r0 = this.ReturnHelper<string>(startCursor0, cursor, state =>
#line 251 "PegParser.peg"
                   "\x00" 
#line default
                    );
                }
                else
                {
                    cursor = startCursor0;
                }
            }
            else
            {
                cursor = startCursor0;
            }
            return r0;
        }

        private IParseResult<string> hexEscapeSequence(ref Cursor cursor)
        {
            IParseResult<string> r0 = null;
            var startCursor0 = cursor;
            IParseResult<string> r1 = null;
            r1 = this.ParseLiteral(ref cursor, "\\x");
            if (r1 != null)
            {
                IParseResult<string> r2 = null;
                var h1Start = cursor;
                r2 = this.hexDigit(ref cursor);
                var h1End = cursor;
                var h1 = ValueOrDefault(r2);
                if (r2 != null)
                {
                    IParseResult<string> r3 = null;
                    var h2Start = cursor;
                    r3 = this.hexDigit(ref cursor);
                    var h2End = cursor;
                    var h2 = ValueOrDefault(r3);
                    if (r3 != null)
                    {
                        r0 = this.ReturnHelper<string>(startCursor0, cursor, state =>
#line 254 "PegParser.peg"
                                   
        ((char)Convert.ToInt32(h1 + h2, 16)).ToString()
    
#line default
                        );
                    }
                    else
                    {
                        cursor = startCursor0;
                    }
                }
                else
                {
                    cursor = startCursor0;
                }
            }
            else
            {
                cursor = startCursor0;
            }
            return r0;
        }

        private IParseResult<string> unicodeEscapeSequence(ref Cursor cursor)
        {
            IParseResult<string> r0 = null;
            var startCursor0 = cursor;
            IParseResult<string> r1 = null;
            r1 = this.ParseLiteral(ref cursor, "\\u");
            if (r1 != null)
            {
                IParseResult<string> r2 = null;
                var h1Start = cursor;
                r2 = this.hexDigit(ref cursor);
                var h1End = cursor;
                var h1 = ValueOrDefault(r2);
                if (r2 != null)
                {
                    IParseResult<string> r3 = null;
                    var h2Start = cursor;
                    r3 = this.hexDigit(ref cursor);
                    var h2End = cursor;
                    var h2 = ValueOrDefault(r3);
                    if (r3 != null)
                    {
                        IParseResult<string> r4 = null;
                        var h3Start = cursor;
                        r4 = this.hexDigit(ref cursor);
                        var h3End = cursor;
                        var h3 = ValueOrDefault(r4);
                        if (r4 != null)
                        {
                            IParseResult<string> r5 = null;
                            var h4Start = cursor;
                            r5 = this.hexDigit(ref cursor);
                            var h4End = cursor;
                            var h4 = ValueOrDefault(r5);
                            if (r5 != null)
                            {
                                r0 = this.ReturnHelper<string>(startCursor0, cursor, state =>
#line 259 "PegParser.peg"
                                                           
        ((char)Convert.ToInt32(h1 + h2 + h3 + h4, 16)).ToString()
    
#line default
                                );
                            }
                            else
                            {
                                cursor = startCursor0;
                            }
                        }
                        else
                        {
                            cursor = startCursor0;
                        }
                    }
                    else
                    {
                        cursor = startCursor0;
                    }
                }
                else
                {
                    cursor = startCursor0;
                }
            }
            else
            {
                cursor = startCursor0;
            }
            return r0;
        }

        private IParseResult<string> eolEscapeSequence(ref Cursor cursor)
        {
            IParseResult<string> r0 = null;
            var startCursor0 = cursor;
            IParseResult<string> r1 = null;
            r1 = this.ParseLiteral(ref cursor, "\\");
            if (r1 != null)
            {
                IParseResult<string> r2 = null;
                var eolStart = cursor;
                r2 = this.eol(ref cursor);
                var eolEnd = cursor;
                var eol = ValueOrDefault(r2);
                if (r2 != null)
                {
                    r0 = this.ReturnHelper<string>(startCursor0, cursor, state =>
#line 264 "PegParser.peg"
                   eol 
#line default
                    );
                }
                else
                {
                    cursor = startCursor0;
                }
            }
            else
            {
                cursor = startCursor0;
            }
            return r0;
        }

        private IParseResult<string> digit(ref Cursor cursor)
        {
            IParseResult<string> r0 = null;
            r0 = this.ParseClass(ref cursor, "09");
            return r0;
        }

        private IParseResult<string> hexDigit(ref Cursor cursor)
        {
            IParseResult<string> r0 = null;
            r0 = this.ParseClass(ref cursor, "09afAF");
            return r0;
        }

        private IParseResult<string> letter(ref Cursor cursor)
        {
            IParseResult<string> r0 = null;
            if (r0 == null)
            {
                r0 = this.lowerCaseLetter(ref cursor);
            }
            if (r0 == null)
            {
                r0 = this.upperCaseLetter(ref cursor);
            }
            return r0;
        }

        private IParseResult<string> lowerCaseLetter(ref Cursor cursor)
        {
            IParseResult<string> r0 = null;
            r0 = this.ParseClass(ref cursor, "az");
            return r0;
        }

        private IParseResult<string> upperCaseLetter(ref Cursor cursor)
        {
            IParseResult<string> r0 = null;
            r0 = this.ParseClass(ref cursor, "AZ");
            return r0;
        }

        private IParseResult<IList<string>> __(ref Cursor cursor)
        {
            IParseResult<IList<string>> r0 = null;
            var startCursor0 = cursor;
            var l0 = new List<string>();
            while (true)
            {
                IParseResult<string> r1 = null;
                if (r1 == null)
                {
                    r1 = this.whitespace(ref cursor);
                }
                if (r1 == null)
                {
                    r1 = this.eol(ref cursor);
                }
                if (r1 == null)
                {
                    r1 = this.comment(ref cursor);
                }
                if (r1 != null)
                {
                    l0.Add(r1.Value);
                }
                else
                {
                    break;
                }
            }
            if (l0.Count >= 0)
            {
                r0 = new ParseResult<IList<string>>(startCursor0, cursor, l0.AsReadOnly());
            }
            else
            {
                cursor = startCursor0;
            }
            return r0;
        }

        private IParseResult<string> comment(ref Cursor cursor)
        {
            IParseResult<string> r0 = null;
            if (r0 == null)
            {
                r0 = this.singleLineComment(ref cursor);
            }
            if (r0 == null)
            {
                r0 = this.multiLineComment(ref cursor);
            }
            return r0;
        }

        private IParseResult<string> singleLineComment(ref Cursor cursor)
        {
            IParseResult<string> r0 = null;
            var startCursor0 = cursor;
            IParseResult<string> r1 = null;
            r1 = this.ParseLiteral(ref cursor, "//");
            if (r1 != null)
            {
                IParseResult<IList<string>> r2 = null;
                var startCursor1 = cursor;
                var l0 = new List<string>();
                while (true)
                {
                    IParseResult<string> r3 = null;
                    var startCursor2 = cursor;
                    IParseResult<string> r4 = null;
                    var startCursor3 = cursor;
                    IParseResult<string> r5 = null;
                    r5 = this.eolChar(ref cursor);
                    cursor = startCursor3;
                    if (r5 == null)
                    {
                        r4 = new ParseResult<string>(cursor, cursor, string.Empty);
                    }
                    if (r4 != null)
                    {
                        IParseResult<string> r6 = null;
                        r6 = this.ParseAny(ref cursor);
                        if (r6 != null)
                        {
                            var len = cursor.Location - startCursor2.Location;
                            r3 = new ParseResult<string>(startCursor2, cursor, cursor.Subject.Substring(startCursor2.Location, len));
                        }
                        else
                        {
                            cursor = startCursor2;
                        }
                    }
                    else
                    {
                        cursor = startCursor2;
                    }
                    if (r3 != null)
                    {
                        l0.Add(r3.Value);
                    }
                    else
                    {
                        break;
                    }
                }
                if (l0.Count >= 0)
                {
                    r2 = new ParseResult<IList<string>>(startCursor1, cursor, l0.AsReadOnly());
                }
                else
                {
                    cursor = startCursor1;
                }
                if (r2 != null)
                {
                    var len = cursor.Location - startCursor0.Location;
                    r0 = new ParseResult<string>(startCursor0, cursor, cursor.Subject.Substring(startCursor0.Location, len));
                }
                else
                {
                    cursor = startCursor0;
                }
            }
            else
            {
                cursor = startCursor0;
            }
            return r0;
        }

        private IParseResult<string> multiLineComment(ref Cursor cursor)
        {
            IParseResult<string> r0 = null;
            var startCursor0 = cursor;
            IParseResult<string> r1 = null;
            r1 = this.ParseLiteral(ref cursor, "/*");
            if (r1 != null)
            {
                IParseResult<IList<string>> r2 = null;
                var startCursor1 = cursor;
                var l0 = new List<string>();
                while (true)
                {
                    IParseResult<string> r3 = null;
                    var startCursor2 = cursor;
                    IParseResult<string> r4 = null;
                    var startCursor3 = cursor;
                    IParseResult<string> r5 = null;
                    r5 = this.ParseLiteral(ref cursor, "*/");
                    cursor = startCursor3;
                    if (r5 == null)
                    {
                        r4 = new ParseResult<string>(cursor, cursor, string.Empty);
                    }
                    if (r4 != null)
                    {
                        IParseResult<string> r6 = null;
                        r6 = this.ParseAny(ref cursor);
                        if (r6 != null)
                        {
                            var len = cursor.Location - startCursor2.Location;
                            r3 = new ParseResult<string>(startCursor2, cursor, cursor.Subject.Substring(startCursor2.Location, len));
                        }
                        else
                        {
                            cursor = startCursor2;
                        }
                    }
                    else
                    {
                        cursor = startCursor2;
                    }
                    if (r3 != null)
                    {
                        l0.Add(r3.Value);
                    }
                    else
                    {
                        break;
                    }
                }
                if (l0.Count >= 0)
                {
                    r2 = new ParseResult<IList<string>>(startCursor1, cursor, l0.AsReadOnly());
                }
                else
                {
                    cursor = startCursor1;
                }
                if (r2 != null)
                {
                    IParseResult<string> r7 = null;
                    r7 = this.ParseLiteral(ref cursor, "*/");
                    if (r7 != null)
                    {
                        var len = cursor.Location - startCursor0.Location;
                        r0 = new ParseResult<string>(startCursor0, cursor, cursor.Subject.Substring(startCursor0.Location, len));
                    }
                    else
                    {
                        cursor = startCursor0;
                    }
                }
                else
                {
                    cursor = startCursor0;
                }
            }
            else
            {
                cursor = startCursor0;
            }
            return r0;
        }

        private IParseResult<string> eol(ref Cursor cursor)
        {
            IParseResult<string> r0 = null;
            if (r0 == null)
            {
                r0 = this.ParseLiteral(ref cursor, "\n");
            }
            if (r0 == null)
            {
                r0 = this.ParseLiteral(ref cursor, "\r\n");
            }
            if (r0 == null)
            {
                r0 = this.ParseLiteral(ref cursor, "\r");
            }
            if (r0 == null)
            {
                r0 = this.ParseLiteral(ref cursor, "\u2028");
            }
            if (r0 == null)
            {
                r0 = this.ParseLiteral(ref cursor, "\u2029");
            }
            return r0;
        }

        private IParseResult<string> eolChar(ref Cursor cursor)
        {
            IParseResult<string> r0 = null;
            r0 = this.ParseClass(ref cursor, "\n\n\r\r\u2028\u2028\u2029\u2029");
            return r0;
        }

        private IParseResult<string> whitespace(ref Cursor cursor)
        {
            IParseResult<string> r0 = null;
            r0 = this.ParseClass(ref cursor, "  \t\t\v\v\f\f\u00a0\u00a0\ufeff\ufeff\u1680\u1680\u180e\u180e\u2000\u200a\u202f\u202f\u205f\u205f\u3000\u3000");
            return r0;
        }

        private IParseResult<string> EOF(ref Cursor cursor)
        {
            IParseResult<string> r0 = null;
            if (r0 == null)
            {
                var startCursor0 = cursor;
                IParseResult<string> r1 = null;
                r1 = this.ParseAny(ref cursor);
                cursor = startCursor0;
                if (r1 == null)
                {
                    r0 = new ParseResult<string>(cursor, cursor, string.Empty);
                }
            }
            if (r0 == null)
            {
                var startCursor1 = cursor;
                IParseResult<string> r2 = null;
                var unexpectedStart = cursor;
                r2 = this.ParseAny(ref cursor);
                var unexpectedEnd = cursor;
                var unexpected = ValueOrDefault(r2);
                if (r2 != null)
                {
                    throw this.ExceptionHelper(startCursor1, state =>
#line 309 "PegParser.peg"
                         "PEG0008:" + string.Format(CultureInfo.CurrentCulture, Resources.PEG0008_UNEXPECTED_END_OF_INPUT, unexpected) 
#line default
                    );
                }
                else
                {
                    cursor = startCursor1;
                }
            }
            return r0;
        }

        private IParseResult<string> ParseLiteral(ref Cursor cursor, string literal, bool ignoreCase = false)
        {
            if (cursor.Location + literal.Length <= cursor.Subject.Length)
            {
                var substr = cursor.Subject.Substring(cursor.Location, literal.Length);
                if (ignoreCase ? substr.Equals(literal, StringComparison.OrdinalIgnoreCase) : substr == literal)
                {
                    var endCursor = cursor.Advance(substr.Length);
                    var result = new ParseResult<string>(cursor, endCursor, substr);
                    cursor = endCursor;
                    return result;
                }
            }
            return null;
        }

        private IParseResult<string> ParseClass(ref Cursor cursor, string characterRanges, bool negated = false, bool ignoreCase = false)
        {
            if (cursor.Location + 1 <= cursor.Subject.Length)
            {
                var c = cursor.Subject[cursor.Location];
                bool match = false;
                for (int i = 0; !match && i < characterRanges.Length; i += 2)
                {
                    match = c >= characterRanges[i] && c <= characterRanges[i + 1];
                }
                if (!match && ignoreCase && (char.IsUpper(c) || char.IsLower(c)))
                {
                    var cs = c.ToString();
                    for (int i = 0; !match && i < characterRanges.Length; i += 2)
                    {
                        var min = characterRanges[i];
                        var max = characterRanges[i + 1];
                        for (char o = min; !match && o <= max; o++)
                        {
                            match = (char.IsUpper(o) || char.IsLower(o)) && cs.Equals(o.ToString(), StringComparison.CurrentCultureIgnoreCase);
                        }
                    }
                }
                if (match ^ negated)
                {
                    var endCursor = cursor.Advance(1);
                    var result = new ParseResult<string>(cursor, endCursor, cursor.Subject.Substring(cursor.Location, 1));
                    cursor = endCursor;
                    return result;
                }
            }
            return null;
        }

        private IParseResult<string> ParseAny(ref Cursor cursor)
        {
            if (cursor.Location + 1 <= cursor.Subject.Length)
            {
                var substr = cursor.Subject.Substring(cursor.Location, 1);
                var endCursor = cursor.Advance(1);
                var result = new ParseResult<string>(cursor, endCursor, substr);
                cursor = endCursor;
                return result;
            }
            return null;
        }

        private IParseResult<T> ReturnHelper<T>(Cursor startCursor, Cursor endCursor, Func<Cursor, T> wrappedCode)
        {
            return new ParseResult<T>(startCursor, endCursor, wrappedCode(endCursor));
        }

        private Exception ExceptionHelper(Cursor cursor, Func<Cursor, string> wrappedCode)
        {
            var ex = new FormatException(wrappedCode(cursor));
            ex.Data["cursor"] = cursor;
            return ex;
        }

        private T ValueOrDefault<T>(IParseResult<T> result)
        {
            return result == null
                ? default(T)
                : result.Value;
        }
    }
}
