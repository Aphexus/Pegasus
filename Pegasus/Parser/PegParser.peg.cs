// -----------------------------------------------------------------------
// <auto-generated>
// This code was generated by Pegasus 1.0.0.0
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
// </auto-generated>
// -----------------------------------------------------------------------

namespace Pegasus.Parser
{
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using Pegasus.Expressions;

    [System.CodeDom.Compiler.GeneratedCode("Pegasus", "1.0.0.0")]
    public partial class PegParser
    {
        private Cursor rightmostErrorCursor = null;
        private List<string> rightmostErrors = new List<string>();

        public Grammar Parse(string subject, string fileName = null)
        {
            var cursor = new Cursor(subject, 0, fileName);
            var result = this.grammar(ref cursor);
            if (result == null)
            {
                throw new InvalidOperationException("Expected " + string.Join(", ", this.rightmostErrors) + ".");
            }
            return result.Value;
        }

        private IParseResult<Grammar> grammar(ref Cursor cursor)
        {
            IParseResult<Grammar> r0 = null;
            var startCursor0 = cursor;
            IParseResult<IList<string>> r1 = null;
            r1 = this.__(ref cursor);
            if (r1 != null)
            {
                IParseResult<IList<KeyValuePair<Identifier, string>>> r2 = null;
                var settingsStart = cursor;
                var startCursor1 = cursor;
                var l0 = new List<KeyValuePair<Identifier, string>>();
                while (true)
                {
                    IParseResult<KeyValuePair<Identifier, string>> r3 = null;
                    r3 = this.setting(ref cursor);
                    if (r3 != null)
                    {
                        l0.Add(r3.Value);
                    }
                    else
                    {
                        break;
                    }
                }
                if (l0.Count >= 0)
                {
                    r2 = new ParseResult<IList<KeyValuePair<Identifier, string>>>(startCursor1, cursor, l0.AsReadOnly());
                }
                else
                {
                    cursor = startCursor1;
                }
                var settingsEnd = cursor;
                var settings = ValueOrDefault(r2);
                if (r2 != null)
                {
                    IParseResult<IList<string>> r4 = null;
                    var initializerStart = cursor;
                    var startCursor2 = cursor;
                    var l1 = new List<string>();
                    while (l1.Count < 1)
                    {
                        IParseResult<string> r5 = null;
                        r5 = this.initializer(ref cursor);
                        if (r5 != null)
                        {
                            l1.Add(r5.Value);
                        }
                        else
                        {
                            break;
                        }
                    }
                    if (l1.Count >= 0)
                    {
                        r4 = new ParseResult<IList<string>>(startCursor2, cursor, l1.AsReadOnly());
                    }
                    else
                    {
                        cursor = startCursor2;
                    }
                    var initializerEnd = cursor;
                    var initializer = ValueOrDefault(r4);
                    if (r4 != null)
                    {
                        IParseResult<IList<Rule>> r6 = null;
                        var rulesStart = cursor;
                        var startCursor3 = cursor;
                        var l2 = new List<Rule>();
                        while (true)
                        {
                            IParseResult<Rule> r7 = null;
                            r7 = this.rule(ref cursor);
                            if (r7 != null)
                            {
                                l2.Add(r7.Value);
                            }
                            else
                            {
                                break;
                            }
                        }
                        if (l2.Count >= 0)
                        {
                            r6 = new ParseResult<IList<Rule>>(startCursor3, cursor, l2.AsReadOnly());
                        }
                        else
                        {
                            cursor = startCursor3;
                        }
                        var rulesEnd = cursor;
                        var rules = ValueOrDefault(r6);
                        if (r6 != null)
                        {
                            r0 = this.ReturnHelper(startCursor0, cursor, () => 
        new Grammar(rules, settings, initializer.SingleOrDefault())
    );
                        }
                        else
                        {
                            cursor = startCursor0;
                        }
                    }
                    else
                    {
                        cursor = startCursor0;
                    }
                }
                else
                {
                    cursor = startCursor0;
                }
            }
            else
            {
                cursor = startCursor0;
            }
            return r0;
        }

        private IParseResult<KeyValuePair<Identifier, string>> setting(ref Cursor cursor)
        {
            IParseResult<KeyValuePair<Identifier, string>> r0 = null;
            var startCursor0 = cursor;
            IParseResult<string> r1 = null;
            r1 = this.ParseLiteral(ref cursor, "@");
            if (r1 != null)
            {
                IParseResult<Identifier> r2 = null;
                var keyStart = cursor;
                r2 = this.identifier(ref cursor);
                var keyEnd = cursor;
                var key = ValueOrDefault(r2);
                if (r2 != null)
                {
                    IParseResult<string> r3 = null;
                    var valueStart = cursor;
                    if (r3 == null)
                    {
                        r3 = this.@string(ref cursor);
                    }
                    if (r3 == null)
                    {
                        r3 = this.type(ref cursor);
                    }
                    var valueEnd = cursor;
                    var value = ValueOrDefault(r3);
                    if (r3 != null)
                    {
                        IParseResult<IList<string>> r4 = null;
                        var startCursor1 = cursor;
                        var l0 = new List<string>();
                        while (l0.Count < 1)
                        {
                            IParseResult<string> r5 = null;
                            r5 = this.semicolon(ref cursor);
                            if (r5 != null)
                            {
                                l0.Add(r5.Value);
                            }
                            else
                            {
                                break;
                            }
                        }
                        if (l0.Count >= 0)
                        {
                            r4 = new ParseResult<IList<string>>(startCursor1, cursor, l0.AsReadOnly());
                        }
                        else
                        {
                            cursor = startCursor1;
                        }
                        if (r4 != null)
                        {
                            r0 = this.ReturnHelper(startCursor0, cursor, () => 
        new KeyValuePair<Identifier, string>(key, value)
    );
                        }
                        else
                        {
                            cursor = startCursor0;
                        }
                    }
                    else
                    {
                        cursor = startCursor0;
                    }
                }
                else
                {
                    cursor = startCursor0;
                }
            }
            else
            {
                cursor = startCursor0;
            }
            return r0;
        }

        private IParseResult<string> initializer(ref Cursor cursor)
        {
            IParseResult<string> r0 = null;
            var startCursor0 = cursor;
            IParseResult<string> r1 = null;
            var codeStart = cursor;
            r1 = this.action(ref cursor);
            var codeEnd = cursor;
            var code = ValueOrDefault(r1);
            if (r1 != null)
            {
                IParseResult<IList<string>> r2 = null;
                var startCursor1 = cursor;
                var l0 = new List<string>();
                while (l0.Count < 1)
                {
                    IParseResult<string> r3 = null;
                    r3 = this.semicolon(ref cursor);
                    if (r3 != null)
                    {
                        l0.Add(r3.Value);
                    }
                    else
                    {
                        break;
                    }
                }
                if (l0.Count >= 0)
                {
                    r2 = new ParseResult<IList<string>>(startCursor1, cursor, l0.AsReadOnly());
                }
                else
                {
                    cursor = startCursor1;
                }
                if (r2 != null)
                {
                    r0 = this.ReturnHelper(startCursor0, cursor, () =>  code );
                }
                else
                {
                    cursor = startCursor0;
                }
            }
            else
            {
                cursor = startCursor0;
            }
            return r0;
        }

        private IParseResult<Rule> rule(ref Cursor cursor)
        {
            IParseResult<Rule> r0 = null;
            var startCursor0 = cursor;
            IParseResult<Identifier> r1 = null;
            var nameStart = cursor;
            r1 = this.identifier(ref cursor);
            var nameEnd = cursor;
            var name = ValueOrDefault(r1);
            if (r1 != null)
            {
                IParseResult<IList<string>> r2 = null;
                var displayNameStart = cursor;
                var startCursor1 = cursor;
                var l0 = new List<string>();
                while (l0.Count < 1)
                {
                    IParseResult<string> r3 = null;
                    r3 = this.@string(ref cursor);
                    if (r3 != null)
                    {
                        l0.Add(r3.Value);
                    }
                    else
                    {
                        break;
                    }
                }
                if (l0.Count >= 0)
                {
                    r2 = new ParseResult<IList<string>>(startCursor1, cursor, l0.AsReadOnly());
                }
                else
                {
                    cursor = startCursor1;
                }
                var displayNameEnd = cursor;
                var displayName = ValueOrDefault(r2);
                if (r2 != null)
                {
                    IParseResult<string> r4 = null;
                    r4 = this.equals(ref cursor);
                    if (r4 != null)
                    {
                        IParseResult<Expression> r5 = null;
                        var expressionStart = cursor;
                        r5 = this.expression(ref cursor);
                        var expressionEnd = cursor;
                        var expression = ValueOrDefault(r5);
                        if (r5 != null)
                        {
                            IParseResult<IList<string>> r6 = null;
                            var startCursor2 = cursor;
                            var l1 = new List<string>();
                            while (l1.Count < 1)
                            {
                                IParseResult<string> r7 = null;
                                r7 = this.semicolon(ref cursor);
                                if (r7 != null)
                                {
                                    l1.Add(r7.Value);
                                }
                                else
                                {
                                    break;
                                }
                            }
                            if (l1.Count >= 0)
                            {
                                r6 = new ParseResult<IList<string>>(startCursor2, cursor, l1.AsReadOnly());
                            }
                            else
                            {
                                cursor = startCursor2;
                            }
                            if (r6 != null)
                            {
                                r0 = this.ReturnHelper(startCursor0, cursor, () => 
        new Rule(
            identifier: name,
            displayName: displayName.SingleOrDefault(),
            expression: expression)
    );
                            }
                            else
                            {
                                cursor = startCursor0;
                            }
                        }
                        else
                        {
                            cursor = startCursor0;
                        }
                    }
                    else
                    {
                        cursor = startCursor0;
                    }
                }
                else
                {
                    cursor = startCursor0;
                }
            }
            else
            {
                cursor = startCursor0;
            }
            return r0;
        }

        private IParseResult<Expression> expression(ref Cursor cursor)
        {
            IParseResult<Expression> r0 = null;
            var startCursor0 = cursor;
            IParseResult<IList<string>> r1 = null;
            var typeStart = cursor;
            var startCursor1 = cursor;
            var l0 = new List<string>();
            while (l0.Count < 1)
            {
                IParseResult<string> r2 = null;
                r2 = this.expressionType(ref cursor);
                if (r2 != null)
                {
                    l0.Add(r2.Value);
                }
                else
                {
                    break;
                }
            }
            if (l0.Count >= 0)
            {
                r1 = new ParseResult<IList<string>>(startCursor1, cursor, l0.AsReadOnly());
            }
            else
            {
                cursor = startCursor1;
            }
            var typeEnd = cursor;
            var type = ValueOrDefault(r1);
            if (r1 != null)
            {
                IParseResult<Expression> r3 = null;
                var choiceStart = cursor;
                r3 = this.choice(ref cursor);
                var choiceEnd = cursor;
                var choice = ValueOrDefault(r3);
                if (r3 != null)
                {
                    r0 = this.ReturnHelper(startCursor0, cursor, () => {
        var typeValue = type.SingleOrDefault();
        return typeValue != null
            ? new TypedExpression(typeValue, choice)
            : choice;
    });
                }
                else
                {
                    cursor = startCursor0;
                }
            }
            else
            {
                cursor = startCursor0;
            }
            return r0;
        }

        private IParseResult<string> expressionType(ref Cursor cursor)
        {
            IParseResult<string> r0 = null;
            var startCursor0 = cursor;
            IParseResult<string> r1 = null;
            r1 = this.lt(ref cursor);
            if (r1 != null)
            {
                IParseResult<string> r2 = null;
                var nameStart = cursor;
                r2 = this.type(ref cursor);
                var nameEnd = cursor;
                var name = ValueOrDefault(r2);
                if (r2 != null)
                {
                    IParseResult<string> r3 = null;
                    r3 = this.gt(ref cursor);
                    if (r3 != null)
                    {
                        r0 = this.ReturnHelper(startCursor0, cursor, () =>  name );
                    }
                    else
                    {
                        cursor = startCursor0;
                    }
                }
                else
                {
                    cursor = startCursor0;
                }
            }
            else
            {
                cursor = startCursor0;
            }
            return r0;
        }

        private IParseResult<Expression> choice(ref Cursor cursor)
        {
            IParseResult<Expression> r0 = null;
            var startCursor0 = cursor;
            IParseResult<Expression> r1 = null;
            var headStart = cursor;
            r1 = this.sequence(ref cursor);
            var headEnd = cursor;
            var head = ValueOrDefault(r1);
            if (r1 != null)
            {
                IParseResult<IList<Expression>> r2 = null;
                var tailStart = cursor;
                var startCursor1 = cursor;
                var l0 = new List<Expression>();
                while (true)
                {
                    IParseResult<Expression> r3 = null;
                    var startCursor2 = cursor;
                    IParseResult<string> r4 = null;
                    r4 = this.slash(ref cursor);
                    if (r4 != null)
                    {
                        IParseResult<Expression> r5 = null;
                        var sequenceStart = cursor;
                        r5 = this.sequence(ref cursor);
                        var sequenceEnd = cursor;
                        var sequence = ValueOrDefault(r5);
                        if (r5 != null)
                        {
                            r3 = this.ReturnHelper(startCursor2, cursor, () =>  sequence );
                        }
                        else
                        {
                            cursor = startCursor2;
                        }
                    }
                    else
                    {
                        cursor = startCursor2;
                    }
                    if (r3 != null)
                    {
                        l0.Add(r3.Value);
                    }
                    else
                    {
                        break;
                    }
                }
                if (l0.Count >= 0)
                {
                    r2 = new ParseResult<IList<Expression>>(startCursor1, cursor, l0.AsReadOnly());
                }
                else
                {
                    cursor = startCursor1;
                }
                var tailEnd = cursor;
                var tail = ValueOrDefault(r2);
                if (r2 != null)
                {
                    r0 = this.ReturnHelper(startCursor0, cursor, () => 
        tail.Count == 0
            ? head
            : new ChoiceExpression(new [] { head }.Concat(tail))
    );
                }
                else
                {
                    cursor = startCursor0;
                }
            }
            else
            {
                cursor = startCursor0;
            }
            return r0;
        }

        private IParseResult<Expression> sequence(ref Cursor cursor)
        {
            IParseResult<Expression> r0 = null;
            if (r0 == null)
            {
                var startCursor0 = cursor;
                IParseResult<IList<Expression>> r1 = null;
                var elementsStart = cursor;
                var startCursor1 = cursor;
                var l0 = new List<Expression>();
                while (true)
                {
                    IParseResult<Expression> r2 = null;
                    r2 = this.labeled(ref cursor);
                    if (r2 != null)
                    {
                        l0.Add(r2.Value);
                    }
                    else
                    {
                        break;
                    }
                }
                if (l0.Count >= 0)
                {
                    r1 = new ParseResult<IList<Expression>>(startCursor1, cursor, l0.AsReadOnly());
                }
                else
                {
                    cursor = startCursor1;
                }
                var elementsEnd = cursor;
                var elements = ValueOrDefault(r1);
                if (r1 != null)
                {
                    IParseResult<string> r3 = null;
                    var codeStart = cursor;
                    r3 = this.action(ref cursor);
                    var codeEnd = cursor;
                    var code = ValueOrDefault(r3);
                    if (r3 != null)
                    {
                        r0 = this.ReturnHelper(startCursor0, cursor, () => 
        new SequenceExpression(elements.Concat(new Expression[] { new CodeExpression(code) }))
    );
                    }
                    else
                    {
                        cursor = startCursor0;
                    }
                }
                else
                {
                    cursor = startCursor0;
                }
            }
            if (r0 == null)
            {
                var startCursor2 = cursor;
                IParseResult<IList<Expression>> r4 = null;
                var elementsStart = cursor;
                var startCursor3 = cursor;
                var l1 = new List<Expression>();
                while (true)
                {
                    IParseResult<Expression> r5 = null;
                    r5 = this.labeled(ref cursor);
                    if (r5 != null)
                    {
                        l1.Add(r5.Value);
                    }
                    else
                    {
                        break;
                    }
                }
                if (l1.Count >= 0)
                {
                    r4 = new ParseResult<IList<Expression>>(startCursor3, cursor, l1.AsReadOnly());
                }
                else
                {
                    cursor = startCursor3;
                }
                var elementsEnd = cursor;
                var elements = ValueOrDefault(r4);
                if (r4 != null)
                {
                    r0 = this.ReturnHelper(startCursor2, cursor, () => 
        elements.Count == 1
            ? elements[0]
            : new SequenceExpression(elements)
    );
                }
                else
                {
                    cursor = startCursor2;
                }
            }
            return r0;
        }

        private IParseResult<Expression> labeled(ref Cursor cursor)
        {
            IParseResult<Expression> r0 = null;
            if (r0 == null)
            {
                var startCursor0 = cursor;
                IParseResult<Identifier> r1 = null;
                var labelStart = cursor;
                r1 = this.identifier(ref cursor);
                var labelEnd = cursor;
                var label = ValueOrDefault(r1);
                if (r1 != null)
                {
                    IParseResult<string> r2 = null;
                    r2 = this.colon(ref cursor);
                    if (r2 != null)
                    {
                        IParseResult<Expression> r3 = null;
                        var expressionStart = cursor;
                        r3 = this.prefixed(ref cursor);
                        var expressionEnd = cursor;
                        var expression = ValueOrDefault(r3);
                        if (r3 != null)
                        {
                            r0 = this.ReturnHelper(startCursor0, cursor, () => 
        new PrefixedExpression(label, expression)
    );
                        }
                        else
                        {
                            cursor = startCursor0;
                        }
                    }
                    else
                    {
                        cursor = startCursor0;
                    }
                }
                else
                {
                    cursor = startCursor0;
                }
            }
            if (r0 == null)
            {
                r0 = this.prefixed(ref cursor);
            }
            return r0;
        }

        private IParseResult<Expression> prefixed(ref Cursor cursor)
        {
            IParseResult<Expression> r0 = null;
            if (r0 == null)
            {
                var startCursor0 = cursor;
                IParseResult<string> r1 = null;
                r1 = this.and(ref cursor);
                if (r1 != null)
                {
                    IParseResult<Expression> r2 = null;
                    var expressionStart = cursor;
                    r2 = this.suffixed(ref cursor);
                    var expressionEnd = cursor;
                    var expression = ValueOrDefault(r2);
                    if (r2 != null)
                    {
                        r0 = this.ReturnHelper(startCursor0, cursor, () => 
        new AndExpression(expression)
    );
                    }
                    else
                    {
                        cursor = startCursor0;
                    }
                }
                else
                {
                    cursor = startCursor0;
                }
            }
            if (r0 == null)
            {
                var startCursor1 = cursor;
                IParseResult<string> r3 = null;
                r3 = this.not(ref cursor);
                if (r3 != null)
                {
                    IParseResult<Expression> r4 = null;
                    var expressionStart = cursor;
                    r4 = this.suffixed(ref cursor);
                    var expressionEnd = cursor;
                    var expression = ValueOrDefault(r4);
                    if (r4 != null)
                    {
                        r0 = this.ReturnHelper(startCursor1, cursor, () => 
        new NotExpression(expression)
    );
                    }
                    else
                    {
                        cursor = startCursor1;
                    }
                }
                else
                {
                    cursor = startCursor1;
                }
            }
            if (r0 == null)
            {
                r0 = this.suffixed(ref cursor);
            }
            return r0;
        }

        private IParseResult<Expression> suffixed(ref Cursor cursor)
        {
            IParseResult<Expression> r0 = null;
            if (r0 == null)
            {
                var startCursor0 = cursor;
                IParseResult<Expression> r1 = null;
                var expressionStart = cursor;
                r1 = this.primary(ref cursor);
                var expressionEnd = cursor;
                var expression = ValueOrDefault(r1);
                if (r1 != null)
                {
                    IParseResult<string> r2 = null;
                    r2 = this.question(ref cursor);
                    if (r2 != null)
                    {
                        r0 = this.ReturnHelper(startCursor0, cursor, () => 
        new RepetitionExpression(expression, min: 0, max: 1)
    );
                    }
                    else
                    {
                        cursor = startCursor0;
                    }
                }
                else
                {
                    cursor = startCursor0;
                }
            }
            if (r0 == null)
            {
                var startCursor1 = cursor;
                IParseResult<Expression> r3 = null;
                var expressionStart = cursor;
                r3 = this.primary(ref cursor);
                var expressionEnd = cursor;
                var expression = ValueOrDefault(r3);
                if (r3 != null)
                {
                    IParseResult<string> r4 = null;
                    r4 = this.star(ref cursor);
                    if (r4 != null)
                    {
                        r0 = this.ReturnHelper(startCursor1, cursor, () => 
        new RepetitionExpression(expression, min: 0, max: null)
    );
                    }
                    else
                    {
                        cursor = startCursor1;
                    }
                }
                else
                {
                    cursor = startCursor1;
                }
            }
            if (r0 == null)
            {
                var startCursor2 = cursor;
                IParseResult<Expression> r5 = null;
                var expressionStart = cursor;
                r5 = this.primary(ref cursor);
                var expressionEnd = cursor;
                var expression = ValueOrDefault(r5);
                if (r5 != null)
                {
                    IParseResult<string> r6 = null;
                    r6 = this.plus(ref cursor);
                    if (r6 != null)
                    {
                        r0 = this.ReturnHelper(startCursor2, cursor, () => 
        new RepetitionExpression(expression, min: 1, max: null)
    );
                    }
                    else
                    {
                        cursor = startCursor2;
                    }
                }
                else
                {
                    cursor = startCursor2;
                }
            }
            if (r0 == null)
            {
                r0 = this.primary(ref cursor);
            }
            return r0;
        }

        private IParseResult<Expression> primary(ref Cursor cursor)
        {
            IParseResult<Expression> r0 = null;
            if (r0 == null)
            {
                var startCursor0 = cursor;
                IParseResult<Identifier> r1 = null;
                var nameStart = cursor;
                r1 = this.identifier(ref cursor);
                var nameEnd = cursor;
                var name = ValueOrDefault(r1);
                if (r1 != null)
                {
                    IParseResult<string> r2 = null;
                    var startCursor1 = cursor;
                    IParseResult<string> r3 = null;
                    var startCursor2 = cursor;
                    IParseResult<IList<string>> r4 = null;
                    var startCursor3 = cursor;
                    var l0 = new List<string>();
                    while (l0.Count < 1)
                    {
                        IParseResult<string> r5 = null;
                        r5 = this.@string(ref cursor);
                        if (r5 != null)
                        {
                            l0.Add(r5.Value);
                        }
                        else
                        {
                            break;
                        }
                    }
                    if (l0.Count >= 0)
                    {
                        r4 = new ParseResult<IList<string>>(startCursor3, cursor, l0.AsReadOnly());
                    }
                    else
                    {
                        cursor = startCursor3;
                    }
                    if (r4 != null)
                    {
                        IParseResult<string> r6 = null;
                        r6 = this.equals(ref cursor);
                        if (r6 != null)
                        {
                            var len = cursor.Location - startCursor2.Location;
                            r3 = new ParseResult<string>(startCursor2, cursor, cursor.Subject.Substring(startCursor2.Location, len));
                        }
                        else
                        {
                            cursor = startCursor2;
                        }
                    }
                    else
                    {
                        cursor = startCursor2;
                    }
                    cursor = startCursor1;
                    if (r3 == null)
                    {
                        r2 = new ParseResult<string>(cursor, cursor, string.Empty);
                    }
                    if (r2 != null)
                    {
                        r0 = this.ReturnHelper(startCursor0, cursor, () =>  new NameExpression(name) );
                    }
                    else
                    {
                        cursor = startCursor0;
                    }
                }
                else
                {
                    cursor = startCursor0;
                }
            }
            if (r0 == null)
            {
                r0 = this.literal(ref cursor);
            }
            if (r0 == null)
            {
                r0 = this.@class(ref cursor);
            }
            if (r0 == null)
            {
                var startCursor4 = cursor;
                IParseResult<string> r7 = null;
                r7 = this.dot(ref cursor);
                if (r7 != null)
                {
                    r0 = this.ReturnHelper(startCursor4, cursor, () =>  new WildcardExpression() );
                }
                else
                {
                    cursor = startCursor4;
                }
            }
            if (r0 == null)
            {
                var startCursor5 = cursor;
                IParseResult<string> r8 = null;
                r8 = this.lparen(ref cursor);
                if (r8 != null)
                {
                    IParseResult<Expression> r9 = null;
                    var expressionStart = cursor;
                    r9 = this.expression(ref cursor);
                    var expressionEnd = cursor;
                    var expression = ValueOrDefault(r9);
                    if (r9 != null)
                    {
                        IParseResult<string> r10 = null;
                        r10 = this.rparen(ref cursor);
                        if (r10 != null)
                        {
                            r0 = this.ReturnHelper(startCursor5, cursor, () =>  expression );
                        }
                        else
                        {
                            cursor = startCursor5;
                        }
                    }
                    else
                    {
                        cursor = startCursor5;
                    }
                }
                else
                {
                    cursor = startCursor5;
                }
            }
            return r0;
        }

        private IParseResult<string> action(ref Cursor cursor)
        {
            IParseResult<string> r0 = null;
            var startCursor0 = cursor;
            IParseResult<string> r1 = null;
            var bracedStart = cursor;
            r1 = this.braced(ref cursor);
            var bracedEnd = cursor;
            var braced = ValueOrDefault(r1);
            if (r1 != null)
            {
                IParseResult<IList<string>> r2 = null;
                r2 = this.__(ref cursor);
                if (r2 != null)
                {
                    r0 = this.ReturnHelper(startCursor0, cursor, () =>  braced.Substring(1, braced.Length - 2) );
                }
                else
                {
                    cursor = startCursor0;
                }
            }
            else
            {
                cursor = startCursor0;
            }
            return r0;
        }

        private IParseResult<string> braced(ref Cursor cursor)
        {
            IParseResult<string> r0 = null;
            var startCursor0 = cursor;
            IParseResult<string> r1 = null;
            r1 = this.ParseLiteral(ref cursor, "{");
            if (r1 != null)
            {
                IParseResult<IList<string>> r2 = null;
                var partsStart = cursor;
                var startCursor1 = cursor;
                var l0 = new List<string>();
                while (true)
                {
                    IParseResult<string> r3 = null;
                    if (r3 == null)
                    {
                        r3 = this.braced(ref cursor);
                    }
                    if (r3 == null)
                    {
                        r3 = this.nonBraceCharacters(ref cursor);
                    }
                    if (r3 != null)
                    {
                        l0.Add(r3.Value);
                    }
                    else
                    {
                        break;
                    }
                }
                if (l0.Count >= 0)
                {
                    r2 = new ParseResult<IList<string>>(startCursor1, cursor, l0.AsReadOnly());
                }
                else
                {
                    cursor = startCursor1;
                }
                var partsEnd = cursor;
                var parts = ValueOrDefault(r2);
                if (r2 != null)
                {
                    IParseResult<string> r4 = null;
                    r4 = this.ParseLiteral(ref cursor, "}");
                    if (r4 != null)
                    {
                        var len = cursor.Location - startCursor0.Location;
                        r0 = new ParseResult<string>(startCursor0, cursor, cursor.Subject.Substring(startCursor0.Location, len));
                    }
                    else
                    {
                        cursor = startCursor0;
                    }
                }
                else
                {
                    cursor = startCursor0;
                }
            }
            else
            {
                cursor = startCursor0;
            }
            return r0;
        }

        private IParseResult<string> nonBraceCharacters(ref Cursor cursor)
        {
            IParseResult<string> r0 = null;
            var startCursor0 = cursor;
            IParseResult<IList<string>> r1 = null;
            var charsStart = cursor;
            var startCursor1 = cursor;
            var l0 = new List<string>();
            while (true)
            {
                IParseResult<string> r2 = null;
                r2 = this.nonBraceCharacter(ref cursor);
                if (r2 != null)
                {
                    l0.Add(r2.Value);
                }
                else
                {
                    break;
                }
            }
            if (l0.Count >= 1)
            {
                r1 = new ParseResult<IList<string>>(startCursor1, cursor, l0.AsReadOnly());
            }
            else
            {
                cursor = startCursor1;
            }
            var charsEnd = cursor;
            var chars = ValueOrDefault(r1);
            if (r1 != null)
            {
                r0 = this.ReturnHelper(startCursor0, cursor, () =>  string.Concat(chars) );
            }
            else
            {
                cursor = startCursor0;
            }
            return r0;
        }

        private IParseResult<string> nonBraceCharacter(ref Cursor cursor)
        {
            IParseResult<string> r0 = null;
            r0 = this.ParseClass(ref cursor, "{{}}", "[^{}]", negated: true);
            return r0;
        }

        private IParseResult<string> equals(ref Cursor cursor)
        {
            IParseResult<string> r0 = null;
            var startCursor0 = cursor;
            IParseResult<string> r1 = null;
            r1 = this.ParseLiteral(ref cursor, "=");
            if (r1 != null)
            {
                IParseResult<IList<string>> r2 = null;
                r2 = this.__(ref cursor);
                if (r2 != null)
                {
                    r0 = this.ReturnHelper(startCursor0, cursor, () =>  "=" );
                }
                else
                {
                    cursor = startCursor0;
                }
            }
            else
            {
                cursor = startCursor0;
            }
            return r0;
        }

        private IParseResult<string> colon(ref Cursor cursor)
        {
            IParseResult<string> r0 = null;
            var startCursor0 = cursor;
            IParseResult<string> r1 = null;
            r1 = this.ParseLiteral(ref cursor, ":");
            if (r1 != null)
            {
                IParseResult<IList<string>> r2 = null;
                r2 = this.__(ref cursor);
                if (r2 != null)
                {
                    r0 = this.ReturnHelper(startCursor0, cursor, () =>  ":" );
                }
                else
                {
                    cursor = startCursor0;
                }
            }
            else
            {
                cursor = startCursor0;
            }
            return r0;
        }

        private IParseResult<string> semicolon(ref Cursor cursor)
        {
            IParseResult<string> r0 = null;
            var startCursor0 = cursor;
            IParseResult<string> r1 = null;
            r1 = this.ParseLiteral(ref cursor, ";");
            if (r1 != null)
            {
                IParseResult<IList<string>> r2 = null;
                r2 = this.__(ref cursor);
                if (r2 != null)
                {
                    r0 = this.ReturnHelper(startCursor0, cursor, () =>  ";" );
                }
                else
                {
                    cursor = startCursor0;
                }
            }
            else
            {
                cursor = startCursor0;
            }
            return r0;
        }

        private IParseResult<string> slash(ref Cursor cursor)
        {
            IParseResult<string> r0 = null;
            var startCursor0 = cursor;
            IParseResult<string> r1 = null;
            r1 = this.ParseLiteral(ref cursor, "/");
            if (r1 != null)
            {
                IParseResult<IList<string>> r2 = null;
                r2 = this.__(ref cursor);
                if (r2 != null)
                {
                    r0 = this.ReturnHelper(startCursor0, cursor, () =>  "/" );
                }
                else
                {
                    cursor = startCursor0;
                }
            }
            else
            {
                cursor = startCursor0;
            }
            return r0;
        }

        private IParseResult<string> and(ref Cursor cursor)
        {
            IParseResult<string> r0 = null;
            var startCursor0 = cursor;
            IParseResult<string> r1 = null;
            r1 = this.ParseLiteral(ref cursor, "&");
            if (r1 != null)
            {
                IParseResult<IList<string>> r2 = null;
                r2 = this.__(ref cursor);
                if (r2 != null)
                {
                    r0 = this.ReturnHelper(startCursor0, cursor, () =>  "&" );
                }
                else
                {
                    cursor = startCursor0;
                }
            }
            else
            {
                cursor = startCursor0;
            }
            return r0;
        }

        private IParseResult<string> not(ref Cursor cursor)
        {
            IParseResult<string> r0 = null;
            var startCursor0 = cursor;
            IParseResult<string> r1 = null;
            r1 = this.ParseLiteral(ref cursor, "!");
            if (r1 != null)
            {
                IParseResult<IList<string>> r2 = null;
                r2 = this.__(ref cursor);
                if (r2 != null)
                {
                    r0 = this.ReturnHelper(startCursor0, cursor, () =>  "!" );
                }
                else
                {
                    cursor = startCursor0;
                }
            }
            else
            {
                cursor = startCursor0;
            }
            return r0;
        }

        private IParseResult<string> question(ref Cursor cursor)
        {
            IParseResult<string> r0 = null;
            var startCursor0 = cursor;
            IParseResult<string> r1 = null;
            r1 = this.ParseLiteral(ref cursor, "?");
            if (r1 != null)
            {
                IParseResult<IList<string>> r2 = null;
                r2 = this.__(ref cursor);
                if (r2 != null)
                {
                    r0 = this.ReturnHelper(startCursor0, cursor, () =>  "?" );
                }
                else
                {
                    cursor = startCursor0;
                }
            }
            else
            {
                cursor = startCursor0;
            }
            return r0;
        }

        private IParseResult<string> star(ref Cursor cursor)
        {
            IParseResult<string> r0 = null;
            var startCursor0 = cursor;
            IParseResult<string> r1 = null;
            r1 = this.ParseLiteral(ref cursor, "*");
            if (r1 != null)
            {
                IParseResult<IList<string>> r2 = null;
                r2 = this.__(ref cursor);
                if (r2 != null)
                {
                    r0 = this.ReturnHelper(startCursor0, cursor, () =>  "*" );
                }
                else
                {
                    cursor = startCursor0;
                }
            }
            else
            {
                cursor = startCursor0;
            }
            return r0;
        }

        private IParseResult<string> plus(ref Cursor cursor)
        {
            IParseResult<string> r0 = null;
            var startCursor0 = cursor;
            IParseResult<string> r1 = null;
            r1 = this.ParseLiteral(ref cursor, "+");
            if (r1 != null)
            {
                IParseResult<IList<string>> r2 = null;
                r2 = this.__(ref cursor);
                if (r2 != null)
                {
                    r0 = this.ReturnHelper(startCursor0, cursor, () =>  "+" );
                }
                else
                {
                    cursor = startCursor0;
                }
            }
            else
            {
                cursor = startCursor0;
            }
            return r0;
        }

        private IParseResult<string> lparen(ref Cursor cursor)
        {
            IParseResult<string> r0 = null;
            var startCursor0 = cursor;
            IParseResult<string> r1 = null;
            r1 = this.ParseLiteral(ref cursor, "(");
            if (r1 != null)
            {
                IParseResult<IList<string>> r2 = null;
                r2 = this.__(ref cursor);
                if (r2 != null)
                {
                    r0 = this.ReturnHelper(startCursor0, cursor, () =>  "(" );
                }
                else
                {
                    cursor = startCursor0;
                }
            }
            else
            {
                cursor = startCursor0;
            }
            return r0;
        }

        private IParseResult<string> rparen(ref Cursor cursor)
        {
            IParseResult<string> r0 = null;
            var startCursor0 = cursor;
            IParseResult<string> r1 = null;
            r1 = this.ParseLiteral(ref cursor, ")");
            if (r1 != null)
            {
                IParseResult<IList<string>> r2 = null;
                r2 = this.__(ref cursor);
                if (r2 != null)
                {
                    r0 = this.ReturnHelper(startCursor0, cursor, () =>  ")" );
                }
                else
                {
                    cursor = startCursor0;
                }
            }
            else
            {
                cursor = startCursor0;
            }
            return r0;
        }

        private IParseResult<string> dot(ref Cursor cursor)
        {
            IParseResult<string> r0 = null;
            var startCursor0 = cursor;
            IParseResult<string> r1 = null;
            r1 = this.ParseLiteral(ref cursor, ".");
            if (r1 != null)
            {
                IParseResult<IList<string>> r2 = null;
                r2 = this.__(ref cursor);
                if (r2 != null)
                {
                    r0 = this.ReturnHelper(startCursor0, cursor, () =>  "." );
                }
                else
                {
                    cursor = startCursor0;
                }
            }
            else
            {
                cursor = startCursor0;
            }
            return r0;
        }

        private IParseResult<string> lt(ref Cursor cursor)
        {
            IParseResult<string> r0 = null;
            var startCursor0 = cursor;
            IParseResult<string> r1 = null;
            r1 = this.ParseLiteral(ref cursor, "<");
            if (r1 != null)
            {
                IParseResult<IList<string>> r2 = null;
                r2 = this.__(ref cursor);
                if (r2 != null)
                {
                    r0 = this.ReturnHelper(startCursor0, cursor, () =>  "." );
                }
                else
                {
                    cursor = startCursor0;
                }
            }
            else
            {
                cursor = startCursor0;
            }
            return r0;
        }

        private IParseResult<string> gt(ref Cursor cursor)
        {
            IParseResult<string> r0 = null;
            var startCursor0 = cursor;
            IParseResult<string> r1 = null;
            r1 = this.ParseLiteral(ref cursor, ">");
            if (r1 != null)
            {
                IParseResult<IList<string>> r2 = null;
                r2 = this.__(ref cursor);
                if (r2 != null)
                {
                    r0 = this.ReturnHelper(startCursor0, cursor, () =>  "." );
                }
                else
                {
                    cursor = startCursor0;
                }
            }
            else
            {
                cursor = startCursor0;
            }
            return r0;
        }

        private IParseResult<string> comma(ref Cursor cursor)
        {
            IParseResult<string> r0 = null;
            var startCursor0 = cursor;
            IParseResult<string> r1 = null;
            r1 = this.ParseLiteral(ref cursor, ",");
            if (r1 != null)
            {
                IParseResult<IList<string>> r2 = null;
                r2 = this.__(ref cursor);
                if (r2 != null)
                {
                    r0 = this.ReturnHelper(startCursor0, cursor, () =>  "," );
                }
                else
                {
                    cursor = startCursor0;
                }
            }
            else
            {
                cursor = startCursor0;
            }
            return r0;
        }

        private IParseResult<string> lbracket(ref Cursor cursor)
        {
            IParseResult<string> r0 = null;
            var startCursor0 = cursor;
            IParseResult<string> r1 = null;
            r1 = this.ParseLiteral(ref cursor, "[");
            if (r1 != null)
            {
                IParseResult<IList<string>> r2 = null;
                r2 = this.__(ref cursor);
                if (r2 != null)
                {
                    r0 = this.ReturnHelper(startCursor0, cursor, () =>  "[" );
                }
                else
                {
                    cursor = startCursor0;
                }
            }
            else
            {
                cursor = startCursor0;
            }
            return r0;
        }

        private IParseResult<string> rbracket(ref Cursor cursor)
        {
            IParseResult<string> r0 = null;
            var startCursor0 = cursor;
            IParseResult<string> r1 = null;
            r1 = this.ParseLiteral(ref cursor, "]");
            if (r1 != null)
            {
                IParseResult<IList<string>> r2 = null;
                r2 = this.__(ref cursor);
                if (r2 != null)
                {
                    r0 = this.ReturnHelper(startCursor0, cursor, () =>  "]" );
                }
                else
                {
                    cursor = startCursor0;
                }
            }
            else
            {
                cursor = startCursor0;
            }
            return r0;
        }

        private IParseResult<Identifier> identifier(ref Cursor cursor)
        {
            IParseResult<Identifier> r0 = null;
            var startCursor0 = cursor;
            IParseResult<string> r1 = null;
            var nameStart = cursor;
            var startCursor1 = cursor;
            IParseResult<string> r2 = null;
            var startCursor2 = cursor;
            IParseResult<string> r3 = null;
            r3 = this.digit(ref cursor);
            cursor = startCursor2;
            if (r3 == null)
            {
                r2 = new ParseResult<string>(cursor, cursor, string.Empty);
            }
            if (r2 != null)
            {
                IParseResult<IList<string>> r4 = null;
                var startCursor3 = cursor;
                var l0 = new List<string>();
                while (true)
                {
                    IParseResult<string> r5 = null;
                    if (r5 == null)
                    {
                        r5 = this.letter(ref cursor);
                    }
                    if (r5 == null)
                    {
                        r5 = this.digit(ref cursor);
                    }
                    if (r5 == null)
                    {
                        r5 = this.ParseLiteral(ref cursor, "_");
                    }
                    if (r5 == null)
                    {
                        r5 = this.ParseLiteral(ref cursor, "$");
                    }
                    if (r5 != null)
                    {
                        l0.Add(r5.Value);
                    }
                    else
                    {
                        break;
                    }
                }
                if (l0.Count >= 1)
                {
                    r4 = new ParseResult<IList<string>>(startCursor3, cursor, l0.AsReadOnly());
                }
                else
                {
                    cursor = startCursor3;
                }
                if (r4 != null)
                {
                    var len = cursor.Location - startCursor1.Location;
                    r1 = new ParseResult<string>(startCursor1, cursor, cursor.Subject.Substring(startCursor1.Location, len));
                }
                else
                {
                    cursor = startCursor1;
                }
            }
            else
            {
                cursor = startCursor1;
            }
            var nameEnd = cursor;
            var name = ValueOrDefault(r1);
            if (r1 != null)
            {
                IParseResult<IList<string>> r6 = null;
                r6 = this.__(ref cursor);
                if (r6 != null)
                {
                    r0 = this.ReturnHelper(startCursor0, cursor, () =>  new Identifier(name, nameStart, nameEnd) );
                }
                else
                {
                    cursor = startCursor0;
                }
            }
            else
            {
                cursor = startCursor0;
            }
            return r0;
        }

        private IParseResult<string> type(ref Cursor cursor)
        {
            IParseResult<string> r0 = null;
            var startCursor0 = cursor;
            IParseResult<string> r1 = null;
            var typeStart = cursor;
            r1 = this.nonArrayType(ref cursor);
            var typeEnd = cursor;
            var type = ValueOrDefault(r1);
            if (r1 != null)
            {
                IParseResult<IList<string>> r2 = null;
                var ranksStart = cursor;
                var startCursor1 = cursor;
                var l0 = new List<string>();
                while (true)
                {
                    IParseResult<string> r3 = null;
                    r3 = this.rankSpecifiers(ref cursor);
                    if (r3 != null)
                    {
                        l0.Add(r3.Value);
                    }
                    else
                    {
                        break;
                    }
                }
                if (l0.Count >= 0)
                {
                    r2 = new ParseResult<IList<string>>(startCursor1, cursor, l0.AsReadOnly());
                }
                else
                {
                    cursor = startCursor1;
                }
                var ranksEnd = cursor;
                var ranks = ValueOrDefault(r2);
                if (r2 != null)
                {
                    r0 = this.ReturnHelper(startCursor0, cursor, () =>  type + string.Concat(ranks) );
                }
                else
                {
                    cursor = startCursor0;
                }
            }
            else
            {
                cursor = startCursor0;
            }
            return r0;
        }

        private IParseResult<string> nonArrayType(ref Cursor cursor)
        {
            IParseResult<string> r0 = null;
            if (r0 == null)
            {
                r0 = this.nullableType(ref cursor);
            }
            if (r0 == null)
            {
                r0 = this.typeName(ref cursor);
            }
            return r0;
        }

        private IParseResult<string> nullableType(ref Cursor cursor)
        {
            IParseResult<string> r0 = null;
            var startCursor0 = cursor;
            IParseResult<string> r1 = null;
            var typeStart = cursor;
            r1 = this.typeName(ref cursor);
            var typeEnd = cursor;
            var type = ValueOrDefault(r1);
            if (r1 != null)
            {
                IParseResult<string> r2 = null;
                r2 = this.question(ref cursor);
                if (r2 != null)
                {
                    r0 = this.ReturnHelper(startCursor0, cursor, () =>  type + "?" );
                }
                else
                {
                    cursor = startCursor0;
                }
            }
            else
            {
                cursor = startCursor0;
            }
            return r0;
        }

        private IParseResult<string> rankSpecifiers(ref Cursor cursor)
        {
            IParseResult<string> r0 = null;
            var startCursor0 = cursor;
            IParseResult<string> r1 = null;
            r1 = this.lbracket(ref cursor);
            if (r1 != null)
            {
                IParseResult<IList<string>> r2 = null;
                var dimensionsStart = cursor;
                var startCursor1 = cursor;
                var l0 = new List<string>();
                while (l0.Count < 1)
                {
                    IParseResult<string> r3 = null;
                    r3 = this.dimSeparator(ref cursor);
                    if (r3 != null)
                    {
                        l0.Add(r3.Value);
                    }
                    else
                    {
                        break;
                    }
                }
                if (l0.Count >= 0)
                {
                    r2 = new ParseResult<IList<string>>(startCursor1, cursor, l0.AsReadOnly());
                }
                else
                {
                    cursor = startCursor1;
                }
                var dimensionsEnd = cursor;
                var dimensions = ValueOrDefault(r2);
                if (r2 != null)
                {
                    IParseResult<string> r4 = null;
                    r4 = this.rbracket(ref cursor);
                    if (r4 != null)
                    {
                        r0 = this.ReturnHelper(startCursor0, cursor, () =>  "[" + dimensions.SingleOrDefault() + "]" );
                    }
                    else
                    {
                        cursor = startCursor0;
                    }
                }
                else
                {
                    cursor = startCursor0;
                }
            }
            else
            {
                cursor = startCursor0;
            }
            return r0;
        }

        private IParseResult<string> dimSeparator(ref Cursor cursor)
        {
            IParseResult<string> r0 = null;
            var startCursor0 = cursor;
            IParseResult<IList<string>> r1 = null;
            var commasStart = cursor;
            var startCursor1 = cursor;
            var l0 = new List<string>();
            while (true)
            {
                IParseResult<string> r2 = null;
                r2 = this.comma(ref cursor);
                if (r2 != null)
                {
                    l0.Add(r2.Value);
                }
                else
                {
                    break;
                }
            }
            if (l0.Count >= 1)
            {
                r1 = new ParseResult<IList<string>>(startCursor1, cursor, l0.AsReadOnly());
            }
            else
            {
                cursor = startCursor1;
            }
            var commasEnd = cursor;
            var commas = ValueOrDefault(r1);
            if (r1 != null)
            {
                r0 = this.ReturnHelper(startCursor0, cursor, () =>  new string(',', commas.Count) );
            }
            else
            {
                cursor = startCursor0;
            }
            return r0;
        }

        private IParseResult<string> typeName(ref Cursor cursor)
        {
            IParseResult<string> r0 = null;
            if (r0 == null)
            {
                var startCursor0 = cursor;
                IParseResult<Identifier> r1 = null;
                var identStart = cursor;
                r1 = this.identifier(ref cursor);
                var identEnd = cursor;
                var ident = ValueOrDefault(r1);
                if (r1 != null)
                {
                    IParseResult<IList<string>> r2 = null;
                    var argsStart = cursor;
                    var startCursor1 = cursor;
                    var l0 = new List<string>();
                    while (l0.Count < 1)
                    {
                        IParseResult<string> r3 = null;
                        r3 = this.typeArgumentList(ref cursor);
                        if (r3 != null)
                        {
                            l0.Add(r3.Value);
                        }
                        else
                        {
                            break;
                        }
                    }
                    if (l0.Count >= 0)
                    {
                        r2 = new ParseResult<IList<string>>(startCursor1, cursor, l0.AsReadOnly());
                    }
                    else
                    {
                        cursor = startCursor1;
                    }
                    var argsEnd = cursor;
                    var args = ValueOrDefault(r2);
                    if (r2 != null)
                    {
                        IParseResult<string> r4 = null;
                        r4 = this.dot(ref cursor);
                        if (r4 != null)
                        {
                            IParseResult<string> r5 = null;
                            var restStart = cursor;
                            r5 = this.typeName(ref cursor);
                            var restEnd = cursor;
                            var rest = ValueOrDefault(r5);
                            if (r5 != null)
                            {
                                r0 = this.ReturnHelper(startCursor0, cursor, () =>  ident.Name + args.SingleOrDefault() + "." + rest );
                            }
                            else
                            {
                                cursor = startCursor0;
                            }
                        }
                        else
                        {
                            cursor = startCursor0;
                        }
                    }
                    else
                    {
                        cursor = startCursor0;
                    }
                }
                else
                {
                    cursor = startCursor0;
                }
            }
            if (r0 == null)
            {
                var startCursor2 = cursor;
                IParseResult<Identifier> r6 = null;
                var identStart = cursor;
                r6 = this.identifier(ref cursor);
                var identEnd = cursor;
                var ident = ValueOrDefault(r6);
                if (r6 != null)
                {
                    IParseResult<IList<string>> r7 = null;
                    var argsStart = cursor;
                    var startCursor3 = cursor;
                    var l1 = new List<string>();
                    while (l1.Count < 1)
                    {
                        IParseResult<string> r8 = null;
                        r8 = this.typeArgumentList(ref cursor);
                        if (r8 != null)
                        {
                            l1.Add(r8.Value);
                        }
                        else
                        {
                            break;
                        }
                    }
                    if (l1.Count >= 0)
                    {
                        r7 = new ParseResult<IList<string>>(startCursor3, cursor, l1.AsReadOnly());
                    }
                    else
                    {
                        cursor = startCursor3;
                    }
                    var argsEnd = cursor;
                    var args = ValueOrDefault(r7);
                    if (r7 != null)
                    {
                        r0 = this.ReturnHelper(startCursor2, cursor, () =>  ident.Name + args.SingleOrDefault() );
                    }
                    else
                    {
                        cursor = startCursor2;
                    }
                }
                else
                {
                    cursor = startCursor2;
                }
            }
            return r0;
        }

        private IParseResult<string> typeArgumentList(ref Cursor cursor)
        {
            IParseResult<string> r0 = null;
            var startCursor0 = cursor;
            IParseResult<string> r1 = null;
            r1 = this.lt(ref cursor);
            if (r1 != null)
            {
                IParseResult<string> r2 = null;
                var argsStart = cursor;
                r2 = this.typeArguments(ref cursor);
                var argsEnd = cursor;
                var args = ValueOrDefault(r2);
                if (r2 != null)
                {
                    IParseResult<string> r3 = null;
                    r3 = this.gt(ref cursor);
                    if (r3 != null)
                    {
                        r0 = this.ReturnHelper(startCursor0, cursor, () =>  "<" + args + ">" );
                    }
                    else
                    {
                        cursor = startCursor0;
                    }
                }
                else
                {
                    cursor = startCursor0;
                }
            }
            else
            {
                cursor = startCursor0;
            }
            return r0;
        }

        private IParseResult<string> typeArguments(ref Cursor cursor)
        {
            IParseResult<string> r0 = null;
            if (r0 == null)
            {
                var startCursor0 = cursor;
                IParseResult<string> r1 = null;
                var typeStart = cursor;
                r1 = this.type(ref cursor);
                var typeEnd = cursor;
                var type = ValueOrDefault(r1);
                if (r1 != null)
                {
                    IParseResult<string> r2 = null;
                    r2 = this.comma(ref cursor);
                    if (r2 != null)
                    {
                        IParseResult<string> r3 = null;
                        var restStart = cursor;
                        r3 = this.typeArguments(ref cursor);
                        var restEnd = cursor;
                        var rest = ValueOrDefault(r3);
                        if (r3 != null)
                        {
                            r0 = this.ReturnHelper(startCursor0, cursor, () =>  type + ", " + rest );
                        }
                        else
                        {
                            cursor = startCursor0;
                        }
                    }
                    else
                    {
                        cursor = startCursor0;
                    }
                }
                else
                {
                    cursor = startCursor0;
                }
            }
            if (r0 == null)
            {
                r0 = this.type(ref cursor);
            }
            return r0;
        }

        private IParseResult<Expression> literal(ref Cursor cursor)
        {
            IParseResult<Expression> r0 = null;
            var startCursor0 = cursor;
            IParseResult<string> r1 = null;
            var valueStart = cursor;
            if (r1 == null)
            {
                r1 = this.doubleQuotedString(ref cursor);
            }
            if (r1 == null)
            {
                r1 = this.singleQuotedString(ref cursor);
            }
            var valueEnd = cursor;
            var value = ValueOrDefault(r1);
            if (r1 != null)
            {
                IParseResult<IList<string>> r2 = null;
                var flagsStart = cursor;
                var startCursor1 = cursor;
                var l0 = new List<string>();
                while (l0.Count < 1)
                {
                    IParseResult<string> r3 = null;
                    r3 = this.ParseLiteral(ref cursor, "i");
                    if (r3 != null)
                    {
                        l0.Add(r3.Value);
                    }
                    else
                    {
                        break;
                    }
                }
                if (l0.Count >= 0)
                {
                    r2 = new ParseResult<IList<string>>(startCursor1, cursor, l0.AsReadOnly());
                }
                else
                {
                    cursor = startCursor1;
                }
                var flagsEnd = cursor;
                var flags = ValueOrDefault(r2);
                if (r2 != null)
                {
                    IParseResult<IList<string>> r4 = null;
                    r4 = this.__(ref cursor);
                    if (r4 != null)
                    {
                        r0 = this.ReturnHelper(startCursor0, cursor, () => 
        new LiteralExpression(value, ignoreCase: flags.SingleOrDefault() == "i")
    );
                    }
                    else
                    {
                        cursor = startCursor0;
                    }
                }
                else
                {
                    cursor = startCursor0;
                }
            }
            else
            {
                cursor = startCursor0;
            }
            return r0;
        }

        private IParseResult<string> @string(ref Cursor cursor)
        {
            IParseResult<string> r0 = null;
            var startCursor0 = cursor;
            IParseResult<string> r1 = null;
            var stringStart = cursor;
            if (r1 == null)
            {
                r1 = this.doubleQuotedString(ref cursor);
            }
            if (r1 == null)
            {
                r1 = this.singleQuotedString(ref cursor);
            }
            var stringEnd = cursor;
            var @string = ValueOrDefault(r1);
            if (r1 != null)
            {
                IParseResult<IList<string>> r2 = null;
                r2 = this.__(ref cursor);
                if (r2 != null)
                {
                    r0 = this.ReturnHelper(startCursor0, cursor, () =>  @string );
                }
                else
                {
                    cursor = startCursor0;
                }
            }
            else
            {
                cursor = startCursor0;
            }
            return r0;
        }

        private IParseResult<string> doubleQuotedString(ref Cursor cursor)
        {
            IParseResult<string> r0 = null;
            var startCursor0 = cursor;
            IParseResult<string> r1 = null;
            r1 = this.ParseLiteral(ref cursor, "\"");
            if (r1 != null)
            {
                IParseResult<IList<string>> r2 = null;
                var charsStart = cursor;
                var startCursor1 = cursor;
                var l0 = new List<string>();
                while (true)
                {
                    IParseResult<string> r3 = null;
                    r3 = this.doubleQuotedCharacter(ref cursor);
                    if (r3 != null)
                    {
                        l0.Add(r3.Value);
                    }
                    else
                    {
                        break;
                    }
                }
                if (l0.Count >= 0)
                {
                    r2 = new ParseResult<IList<string>>(startCursor1, cursor, l0.AsReadOnly());
                }
                else
                {
                    cursor = startCursor1;
                }
                var charsEnd = cursor;
                var chars = ValueOrDefault(r2);
                if (r2 != null)
                {
                    IParseResult<string> r4 = null;
                    r4 = this.ParseLiteral(ref cursor, "\"");
                    if (r4 != null)
                    {
                        r0 = this.ReturnHelper(startCursor0, cursor, () =>  string.Concat(chars) );
                    }
                    else
                    {
                        cursor = startCursor0;
                    }
                }
                else
                {
                    cursor = startCursor0;
                }
            }
            else
            {
                cursor = startCursor0;
            }
            return r0;
        }

        private IParseResult<string> doubleQuotedCharacter(ref Cursor cursor)
        {
            IParseResult<string> r0 = null;
            if (r0 == null)
            {
                r0 = this.simpleDoubleQuotedCharacter(ref cursor);
            }
            if (r0 == null)
            {
                r0 = this.simpleEscapeSequence(ref cursor);
            }
            if (r0 == null)
            {
                r0 = this.zeroEscapeSequence(ref cursor);
            }
            if (r0 == null)
            {
                r0 = this.hexEscapeSequence(ref cursor);
            }
            if (r0 == null)
            {
                r0 = this.unicodeEscapeSequence(ref cursor);
            }
            if (r0 == null)
            {
                r0 = this.eolEscapeSequence(ref cursor);
            }
            return r0;
        }

        private IParseResult<string> simpleDoubleQuotedCharacter(ref Cursor cursor)
        {
            IParseResult<string> r0 = null;
            var startCursor0 = cursor;
            IParseResult<string> r1 = null;
            var startCursor1 = cursor;
            IParseResult<string> r2 = null;
            if (r2 == null)
            {
                r2 = this.ParseLiteral(ref cursor, "\"");
            }
            if (r2 == null)
            {
                r2 = this.ParseLiteral(ref cursor, "\\");
            }
            if (r2 == null)
            {
                r2 = this.eolChar(ref cursor);
            }
            cursor = startCursor1;
            if (r2 == null)
            {
                r1 = new ParseResult<string>(cursor, cursor, string.Empty);
            }
            if (r1 != null)
            {
                IParseResult<string> r3 = null;
                var charStart = cursor;
                r3 = this.ParseAny(ref cursor);
                var charEnd = cursor;
                var @char = ValueOrDefault(r3);
                if (r3 != null)
                {
                    r0 = this.ReturnHelper(startCursor0, cursor, () =>  @char );
                }
                else
                {
                    cursor = startCursor0;
                }
            }
            else
            {
                cursor = startCursor0;
            }
            return r0;
        }

        private IParseResult<string> singleQuotedString(ref Cursor cursor)
        {
            IParseResult<string> r0 = null;
            var startCursor0 = cursor;
            IParseResult<string> r1 = null;
            r1 = this.ParseLiteral(ref cursor, "\'");
            if (r1 != null)
            {
                IParseResult<IList<string>> r2 = null;
                var charsStart = cursor;
                var startCursor1 = cursor;
                var l0 = new List<string>();
                while (true)
                {
                    IParseResult<string> r3 = null;
                    r3 = this.singleQuotedCharacter(ref cursor);
                    if (r3 != null)
                    {
                        l0.Add(r3.Value);
                    }
                    else
                    {
                        break;
                    }
                }
                if (l0.Count >= 0)
                {
                    r2 = new ParseResult<IList<string>>(startCursor1, cursor, l0.AsReadOnly());
                }
                else
                {
                    cursor = startCursor1;
                }
                var charsEnd = cursor;
                var chars = ValueOrDefault(r2);
                if (r2 != null)
                {
                    IParseResult<string> r4 = null;
                    r4 = this.ParseLiteral(ref cursor, "\'");
                    if (r4 != null)
                    {
                        r0 = this.ReturnHelper(startCursor0, cursor, () =>  string.Concat(chars) );
                    }
                    else
                    {
                        cursor = startCursor0;
                    }
                }
                else
                {
                    cursor = startCursor0;
                }
            }
            else
            {
                cursor = startCursor0;
            }
            return r0;
        }

        private IParseResult<string> singleQuotedCharacter(ref Cursor cursor)
        {
            IParseResult<string> r0 = null;
            if (r0 == null)
            {
                r0 = this.simpleSingleQuotedCharacter(ref cursor);
            }
            if (r0 == null)
            {
                r0 = this.simpleEscapeSequence(ref cursor);
            }
            if (r0 == null)
            {
                r0 = this.zeroEscapeSequence(ref cursor);
            }
            if (r0 == null)
            {
                r0 = this.hexEscapeSequence(ref cursor);
            }
            if (r0 == null)
            {
                r0 = this.unicodeEscapeSequence(ref cursor);
            }
            if (r0 == null)
            {
                r0 = this.eolEscapeSequence(ref cursor);
            }
            return r0;
        }

        private IParseResult<string> simpleSingleQuotedCharacter(ref Cursor cursor)
        {
            IParseResult<string> r0 = null;
            var startCursor0 = cursor;
            IParseResult<string> r1 = null;
            var startCursor1 = cursor;
            IParseResult<string> r2 = null;
            if (r2 == null)
            {
                r2 = this.ParseLiteral(ref cursor, "\'");
            }
            if (r2 == null)
            {
                r2 = this.ParseLiteral(ref cursor, "\\");
            }
            if (r2 == null)
            {
                r2 = this.eolChar(ref cursor);
            }
            cursor = startCursor1;
            if (r2 == null)
            {
                r1 = new ParseResult<string>(cursor, cursor, string.Empty);
            }
            if (r1 != null)
            {
                IParseResult<string> r3 = null;
                var charStart = cursor;
                r3 = this.ParseAny(ref cursor);
                var charEnd = cursor;
                var @char = ValueOrDefault(r3);
                if (r3 != null)
                {
                    r0 = this.ReturnHelper(startCursor0, cursor, () =>  @char );
                }
                else
                {
                    cursor = startCursor0;
                }
            }
            else
            {
                cursor = startCursor0;
            }
            return r0;
        }

        private IParseResult<Expression> @class(ref Cursor cursor)
        {
            IParseResult<Expression> r0 = null;
            var startCursor0 = cursor;
            IParseResult<string> r1 = null;
            r1 = this.ParseLiteral(ref cursor, "[");
            if (r1 != null)
            {
                IParseResult<IList<string>> r2 = null;
                var invertedStart = cursor;
                var startCursor1 = cursor;
                var l0 = new List<string>();
                while (l0.Count < 1)
                {
                    IParseResult<string> r3 = null;
                    r3 = this.ParseLiteral(ref cursor, "^");
                    if (r3 != null)
                    {
                        l0.Add(r3.Value);
                    }
                    else
                    {
                        break;
                    }
                }
                if (l0.Count >= 0)
                {
                    r2 = new ParseResult<IList<string>>(startCursor1, cursor, l0.AsReadOnly());
                }
                else
                {
                    cursor = startCursor1;
                }
                var invertedEnd = cursor;
                var inverted = ValueOrDefault(r2);
                if (r2 != null)
                {
                    IParseResult<IList<CharacterRange>> r4 = null;
                    var partsStart = cursor;
                    var startCursor2 = cursor;
                    var l1 = new List<CharacterRange>();
                    while (true)
                    {
                        IParseResult<CharacterRange> r5 = null;
                        if (r5 == null)
                        {
                            r5 = this.classCharacterRange(ref cursor);
                        }
                        if (r5 == null)
                        {
                            r5 = this.classCharacter(ref cursor);
                        }
                        if (r5 != null)
                        {
                            l1.Add(r5.Value);
                        }
                        else
                        {
                            break;
                        }
                    }
                    if (l1.Count >= 0)
                    {
                        r4 = new ParseResult<IList<CharacterRange>>(startCursor2, cursor, l1.AsReadOnly());
                    }
                    else
                    {
                        cursor = startCursor2;
                    }
                    var partsEnd = cursor;
                    var parts = ValueOrDefault(r4);
                    if (r4 != null)
                    {
                        IParseResult<string> r6 = null;
                        r6 = this.ParseLiteral(ref cursor, "]");
                        if (r6 != null)
                        {
                            IParseResult<IList<string>> r7 = null;
                            var flagsStart = cursor;
                            var startCursor3 = cursor;
                            var l2 = new List<string>();
                            while (l2.Count < 1)
                            {
                                IParseResult<string> r8 = null;
                                r8 = this.ParseLiteral(ref cursor, "i");
                                if (r8 != null)
                                {
                                    l2.Add(r8.Value);
                                }
                                else
                                {
                                    break;
                                }
                            }
                            if (l2.Count >= 0)
                            {
                                r7 = new ParseResult<IList<string>>(startCursor3, cursor, l2.AsReadOnly());
                            }
                            else
                            {
                                cursor = startCursor3;
                            }
                            var flagsEnd = cursor;
                            var flags = ValueOrDefault(r7);
                            if (r7 != null)
                            {
                                IParseResult<IList<string>> r9 = null;
                                r9 = this.__(ref cursor);
                                if (r9 != null)
                                {
                                    r0 = this.ReturnHelper(startCursor0, cursor, () => 
        new ClassExpression(
            parts,
            negated: inverted.SingleOrDefault() == "^",
            ignoreCase: flags.SingleOrDefault() == "i")
    );
                                }
                                else
                                {
                                    cursor = startCursor0;
                                }
                            }
                            else
                            {
                                cursor = startCursor0;
                            }
                        }
                        else
                        {
                            cursor = startCursor0;
                        }
                    }
                    else
                    {
                        cursor = startCursor0;
                    }
                }
                else
                {
                    cursor = startCursor0;
                }
            }
            else
            {
                cursor = startCursor0;
            }
            return r0;
        }

        private IParseResult<CharacterRange> classCharacterRange(ref Cursor cursor)
        {
            IParseResult<CharacterRange> r0 = null;
            var startCursor0 = cursor;
            IParseResult<string> r1 = null;
            var beginStart = cursor;
            r1 = this.bracketDelimitedCharacter(ref cursor);
            var beginEnd = cursor;
            var begin = ValueOrDefault(r1);
            if (r1 != null)
            {
                IParseResult<string> r2 = null;
                r2 = this.ParseLiteral(ref cursor, "-");
                if (r2 != null)
                {
                    IParseResult<string> r3 = null;
                    var endStart = cursor;
                    r3 = this.bracketDelimitedCharacter(ref cursor);
                    var endEnd = cursor;
                    var end = ValueOrDefault(r3);
                    if (r3 != null)
                    {
                        r0 = this.ReturnHelper(startCursor0, cursor, () => 
        new CharacterRange(begin[0], end[0])
    );
                    }
                    else
                    {
                        cursor = startCursor0;
                    }
                }
                else
                {
                    cursor = startCursor0;
                }
            }
            else
            {
                cursor = startCursor0;
            }
            return r0;
        }

        private IParseResult<CharacterRange> classCharacter(ref Cursor cursor)
        {
            IParseResult<CharacterRange> r0 = null;
            var startCursor0 = cursor;
            IParseResult<string> r1 = null;
            var char_Start = cursor;
            r1 = this.bracketDelimitedCharacter(ref cursor);
            var char_End = cursor;
            var char_ = ValueOrDefault(r1);
            if (r1 != null)
            {
                r0 = this.ReturnHelper(startCursor0, cursor, () => 
        new CharacterRange(char_[0], char_[0])
    );
            }
            else
            {
                cursor = startCursor0;
            }
            return r0;
        }

        private IParseResult<string> bracketDelimitedCharacter(ref Cursor cursor)
        {
            IParseResult<string> r0 = null;
            if (r0 == null)
            {
                r0 = this.simpleBracketDelimitedCharacter(ref cursor);
            }
            if (r0 == null)
            {
                r0 = this.simpleEscapeSequence(ref cursor);
            }
            if (r0 == null)
            {
                r0 = this.zeroEscapeSequence(ref cursor);
            }
            if (r0 == null)
            {
                r0 = this.hexEscapeSequence(ref cursor);
            }
            if (r0 == null)
            {
                r0 = this.unicodeEscapeSequence(ref cursor);
            }
            if (r0 == null)
            {
                r0 = this.eolEscapeSequence(ref cursor);
            }
            return r0;
        }

        private IParseResult<string> simpleBracketDelimitedCharacter(ref Cursor cursor)
        {
            IParseResult<string> r0 = null;
            var startCursor0 = cursor;
            IParseResult<string> r1 = null;
            var startCursor1 = cursor;
            IParseResult<string> r2 = null;
            if (r2 == null)
            {
                r2 = this.ParseLiteral(ref cursor, "]");
            }
            if (r2 == null)
            {
                r2 = this.ParseLiteral(ref cursor, "\\");
            }
            if (r2 == null)
            {
                r2 = this.eolChar(ref cursor);
            }
            cursor = startCursor1;
            if (r2 == null)
            {
                r1 = new ParseResult<string>(cursor, cursor, string.Empty);
            }
            if (r1 != null)
            {
                IParseResult<string> r3 = null;
                var charStart = cursor;
                r3 = this.ParseAny(ref cursor);
                var charEnd = cursor;
                var @char = ValueOrDefault(r3);
                if (r3 != null)
                {
                    r0 = this.ReturnHelper(startCursor0, cursor, () =>  @char );
                }
                else
                {
                    cursor = startCursor0;
                }
            }
            else
            {
                cursor = startCursor0;
            }
            return r0;
        }

        private IParseResult<string> simpleEscapeSequence(ref Cursor cursor)
        {
            IParseResult<string> r0 = null;
            var startCursor0 = cursor;
            IParseResult<string> r1 = null;
            r1 = this.ParseLiteral(ref cursor, "\\");
            if (r1 != null)
            {
                IParseResult<string> r2 = null;
                var startCursor1 = cursor;
                IParseResult<string> r3 = null;
                if (r3 == null)
                {
                    r3 = this.digit(ref cursor);
                }
                if (r3 == null)
                {
                    r3 = this.ParseLiteral(ref cursor, "x");
                }
                if (r3 == null)
                {
                    r3 = this.ParseLiteral(ref cursor, "u");
                }
                if (r3 == null)
                {
                    r3 = this.eolChar(ref cursor);
                }
                cursor = startCursor1;
                if (r3 == null)
                {
                    r2 = new ParseResult<string>(cursor, cursor, string.Empty);
                }
                if (r2 != null)
                {
                    IParseResult<string> r4 = null;
                    var charStart = cursor;
                    r4 = this.ParseAny(ref cursor);
                    var charEnd = cursor;
                    var @char = ValueOrDefault(r4);
                    if (r4 != null)
                    {
                        r0 = this.ReturnHelper(startCursor0, cursor, () => 
        @char
            .Replace("b", "\b")
            .Replace("f", "\f")
            .Replace("n", "\n")
            .Replace("r", "\r")
            .Replace("t", "\t")
            .Replace("v", "\v")
    );
                    }
                    else
                    {
                        cursor = startCursor0;
                    }
                }
                else
                {
                    cursor = startCursor0;
                }
            }
            else
            {
                cursor = startCursor0;
            }
            return r0;
        }

        private IParseResult<string> zeroEscapeSequence(ref Cursor cursor)
        {
            IParseResult<string> r0 = null;
            var startCursor0 = cursor;
            IParseResult<string> r1 = null;
            r1 = this.ParseLiteral(ref cursor, "\\0");
            if (r1 != null)
            {
                IParseResult<string> r2 = null;
                var startCursor1 = cursor;
                IParseResult<string> r3 = null;
                r3 = this.digit(ref cursor);
                cursor = startCursor1;
                if (r3 == null)
                {
                    r2 = new ParseResult<string>(cursor, cursor, string.Empty);
                }
                if (r2 != null)
                {
                    r0 = this.ReturnHelper(startCursor0, cursor, () =>  "\x00" );
                }
                else
                {
                    cursor = startCursor0;
                }
            }
            else
            {
                cursor = startCursor0;
            }
            return r0;
        }

        private IParseResult<string> hexEscapeSequence(ref Cursor cursor)
        {
            IParseResult<string> r0 = null;
            var startCursor0 = cursor;
            IParseResult<string> r1 = null;
            r1 = this.ParseLiteral(ref cursor, "\\x");
            if (r1 != null)
            {
                IParseResult<string> r2 = null;
                var h1Start = cursor;
                r2 = this.hexDigit(ref cursor);
                var h1End = cursor;
                var h1 = ValueOrDefault(r2);
                if (r2 != null)
                {
                    IParseResult<string> r3 = null;
                    var h2Start = cursor;
                    r3 = this.hexDigit(ref cursor);
                    var h2End = cursor;
                    var h2 = ValueOrDefault(r3);
                    if (r3 != null)
                    {
                        r0 = this.ReturnHelper(startCursor0, cursor, () => 
        ((char)Convert.ToInt32(h1 + h2, 16)).ToString()
    );
                    }
                    else
                    {
                        cursor = startCursor0;
                    }
                }
                else
                {
                    cursor = startCursor0;
                }
            }
            else
            {
                cursor = startCursor0;
            }
            return r0;
        }

        private IParseResult<string> unicodeEscapeSequence(ref Cursor cursor)
        {
            IParseResult<string> r0 = null;
            var startCursor0 = cursor;
            IParseResult<string> r1 = null;
            r1 = this.ParseLiteral(ref cursor, "\\u");
            if (r1 != null)
            {
                IParseResult<string> r2 = null;
                var h1Start = cursor;
                r2 = this.hexDigit(ref cursor);
                var h1End = cursor;
                var h1 = ValueOrDefault(r2);
                if (r2 != null)
                {
                    IParseResult<string> r3 = null;
                    var h2Start = cursor;
                    r3 = this.hexDigit(ref cursor);
                    var h2End = cursor;
                    var h2 = ValueOrDefault(r3);
                    if (r3 != null)
                    {
                        IParseResult<string> r4 = null;
                        var h3Start = cursor;
                        r4 = this.hexDigit(ref cursor);
                        var h3End = cursor;
                        var h3 = ValueOrDefault(r4);
                        if (r4 != null)
                        {
                            IParseResult<string> r5 = null;
                            var h4Start = cursor;
                            r5 = this.hexDigit(ref cursor);
                            var h4End = cursor;
                            var h4 = ValueOrDefault(r5);
                            if (r5 != null)
                            {
                                r0 = this.ReturnHelper(startCursor0, cursor, () => 
        ((char)Convert.ToInt32(h1 + h2 + h3 + h4, 16)).ToString()
    );
                            }
                            else
                            {
                                cursor = startCursor0;
                            }
                        }
                        else
                        {
                            cursor = startCursor0;
                        }
                    }
                    else
                    {
                        cursor = startCursor0;
                    }
                }
                else
                {
                    cursor = startCursor0;
                }
            }
            else
            {
                cursor = startCursor0;
            }
            return r0;
        }

        private IParseResult<string> eolEscapeSequence(ref Cursor cursor)
        {
            IParseResult<string> r0 = null;
            var startCursor0 = cursor;
            IParseResult<string> r1 = null;
            r1 = this.ParseLiteral(ref cursor, "\\");
            if (r1 != null)
            {
                IParseResult<string> r2 = null;
                var eolStart = cursor;
                r2 = this.eol(ref cursor);
                var eolEnd = cursor;
                var eol = ValueOrDefault(r2);
                if (r2 != null)
                {
                    r0 = this.ReturnHelper(startCursor0, cursor, () =>  eol );
                }
                else
                {
                    cursor = startCursor0;
                }
            }
            else
            {
                cursor = startCursor0;
            }
            return r0;
        }

        private IParseResult<string> digit(ref Cursor cursor)
        {
            IParseResult<string> r0 = null;
            r0 = this.ParseClass(ref cursor, "09", "[0-9]");
            return r0;
        }

        private IParseResult<string> hexDigit(ref Cursor cursor)
        {
            IParseResult<string> r0 = null;
            r0 = this.ParseClass(ref cursor, "09afAF", "[0-9a-fA-F]");
            return r0;
        }

        private IParseResult<string> letter(ref Cursor cursor)
        {
            IParseResult<string> r0 = null;
            if (r0 == null)
            {
                r0 = this.lowerCaseLetter(ref cursor);
            }
            if (r0 == null)
            {
                r0 = this.upperCaseLetter(ref cursor);
            }
            return r0;
        }

        private IParseResult<string> lowerCaseLetter(ref Cursor cursor)
        {
            IParseResult<string> r0 = null;
            r0 = this.ParseClass(ref cursor, "az", "[a-z]");
            return r0;
        }

        private IParseResult<string> upperCaseLetter(ref Cursor cursor)
        {
            IParseResult<string> r0 = null;
            r0 = this.ParseClass(ref cursor, "AZ", "[A-Z]");
            return r0;
        }

        private IParseResult<IList<string>> __(ref Cursor cursor)
        {
            IParseResult<IList<string>> r0 = null;
            var startCursor0 = cursor;
            var l0 = new List<string>();
            while (true)
            {
                IParseResult<string> r1 = null;
                if (r1 == null)
                {
                    r1 = this.whitespace(ref cursor);
                }
                if (r1 == null)
                {
                    r1 = this.eol(ref cursor);
                }
                if (r1 == null)
                {
                    r1 = this.comment(ref cursor);
                }
                if (r1 != null)
                {
                    l0.Add(r1.Value);
                }
                else
                {
                    break;
                }
            }
            if (l0.Count >= 0)
            {
                r0 = new ParseResult<IList<string>>(startCursor0, cursor, l0.AsReadOnly());
            }
            else
            {
                cursor = startCursor0;
            }
            return r0;
        }

        private IParseResult<string> comment(ref Cursor cursor)
        {
            IParseResult<string> r0 = null;
            if (r0 == null)
            {
                r0 = this.singleLineComment(ref cursor);
            }
            if (r0 == null)
            {
                r0 = this.multiLineComment(ref cursor);
            }
            return r0;
        }

        private IParseResult<string> singleLineComment(ref Cursor cursor)
        {
            IParseResult<string> r0 = null;
            var startCursor0 = cursor;
            IParseResult<string> r1 = null;
            r1 = this.ParseLiteral(ref cursor, "//");
            if (r1 != null)
            {
                IParseResult<IList<string>> r2 = null;
                var startCursor1 = cursor;
                var l0 = new List<string>();
                while (true)
                {
                    IParseResult<string> r3 = null;
                    var startCursor2 = cursor;
                    IParseResult<string> r4 = null;
                    var startCursor3 = cursor;
                    IParseResult<string> r5 = null;
                    r5 = this.eolChar(ref cursor);
                    cursor = startCursor3;
                    if (r5 == null)
                    {
                        r4 = new ParseResult<string>(cursor, cursor, string.Empty);
                    }
                    if (r4 != null)
                    {
                        IParseResult<string> r6 = null;
                        r6 = this.ParseAny(ref cursor);
                        if (r6 != null)
                        {
                            var len = cursor.Location - startCursor2.Location;
                            r3 = new ParseResult<string>(startCursor2, cursor, cursor.Subject.Substring(startCursor2.Location, len));
                        }
                        else
                        {
                            cursor = startCursor2;
                        }
                    }
                    else
                    {
                        cursor = startCursor2;
                    }
                    if (r3 != null)
                    {
                        l0.Add(r3.Value);
                    }
                    else
                    {
                        break;
                    }
                }
                if (l0.Count >= 0)
                {
                    r2 = new ParseResult<IList<string>>(startCursor1, cursor, l0.AsReadOnly());
                }
                else
                {
                    cursor = startCursor1;
                }
                if (r2 != null)
                {
                    var len = cursor.Location - startCursor0.Location;
                    r0 = new ParseResult<string>(startCursor0, cursor, cursor.Subject.Substring(startCursor0.Location, len));
                }
                else
                {
                    cursor = startCursor0;
                }
            }
            else
            {
                cursor = startCursor0;
            }
            return r0;
        }

        private IParseResult<string> multiLineComment(ref Cursor cursor)
        {
            IParseResult<string> r0 = null;
            var startCursor0 = cursor;
            IParseResult<string> r1 = null;
            r1 = this.ParseLiteral(ref cursor, "/*");
            if (r1 != null)
            {
                IParseResult<IList<string>> r2 = null;
                var startCursor1 = cursor;
                var l0 = new List<string>();
                while (true)
                {
                    IParseResult<string> r3 = null;
                    var startCursor2 = cursor;
                    IParseResult<string> r4 = null;
                    var startCursor3 = cursor;
                    IParseResult<string> r5 = null;
                    r5 = this.ParseLiteral(ref cursor, "*/");
                    cursor = startCursor3;
                    if (r5 == null)
                    {
                        r4 = new ParseResult<string>(cursor, cursor, string.Empty);
                    }
                    if (r4 != null)
                    {
                        IParseResult<string> r6 = null;
                        r6 = this.ParseAny(ref cursor);
                        if (r6 != null)
                        {
                            var len = cursor.Location - startCursor2.Location;
                            r3 = new ParseResult<string>(startCursor2, cursor, cursor.Subject.Substring(startCursor2.Location, len));
                        }
                        else
                        {
                            cursor = startCursor2;
                        }
                    }
                    else
                    {
                        cursor = startCursor2;
                    }
                    if (r3 != null)
                    {
                        l0.Add(r3.Value);
                    }
                    else
                    {
                        break;
                    }
                }
                if (l0.Count >= 0)
                {
                    r2 = new ParseResult<IList<string>>(startCursor1, cursor, l0.AsReadOnly());
                }
                else
                {
                    cursor = startCursor1;
                }
                if (r2 != null)
                {
                    IParseResult<string> r7 = null;
                    r7 = this.ParseLiteral(ref cursor, "*/");
                    if (r7 != null)
                    {
                        var len = cursor.Location - startCursor0.Location;
                        r0 = new ParseResult<string>(startCursor0, cursor, cursor.Subject.Substring(startCursor0.Location, len));
                    }
                    else
                    {
                        cursor = startCursor0;
                    }
                }
                else
                {
                    cursor = startCursor0;
                }
            }
            else
            {
                cursor = startCursor0;
            }
            return r0;
        }

        private IParseResult<string> eol(ref Cursor cursor)
        {
            IParseResult<string> r0 = null;
            if (r0 == null)
            {
                r0 = this.ParseLiteral(ref cursor, "\n");
            }
            if (r0 == null)
            {
                r0 = this.ParseLiteral(ref cursor, "\r\n");
            }
            if (r0 == null)
            {
                r0 = this.ParseLiteral(ref cursor, "\r");
            }
            if (r0 == null)
            {
                r0 = this.ParseLiteral(ref cursor, "\u2028");
            }
            if (r0 == null)
            {
                r0 = this.ParseLiteral(ref cursor, "\u2029");
            }
            return r0;
        }

        private IParseResult<string> eolChar(ref Cursor cursor)
        {
            IParseResult<string> r0 = null;
            r0 = this.ParseClass(ref cursor, "\n\n\r\r\u2028\u2028\u2029\u2029", "[\\n\\r\\u2028\\u2029]");
            return r0;
        }

        private IParseResult<string> whitespace(ref Cursor cursor)
        {
            IParseResult<string> r0 = null;
            r0 = this.ParseClass(ref cursor, "  \t\t\v\v\f\f\u00a0\u00a0\ufeff\ufeff\u1680\u1680\u180e\u180e\u2000\u200a\u202f\u202f\u205f\u205f\u3000\u3000", "[ \\t\\v\\f\\u00a0\\ufeff\\u1680\\u180e\\u2000-\\u200a\\u202f\\u205f\\u3000]");
            return r0;
        }

        private IParseResult<string> ParseLiteral(ref Cursor cursor, string literal, bool ignoreCase = false)
        {
            if (cursor.Location + literal.Length <= cursor.Subject.Length)
            {
                var substr = cursor.Subject.Substring(cursor.Location, literal.Length);
                if (ignoreCase ? substr.Equals(literal, StringComparison.OrdinalIgnoreCase) : substr == literal)
                {
                    var endCursor = cursor.Advance(substr.Length);
                    var result = new ParseResult<string>(cursor, endCursor, substr);
                    cursor = endCursor;
                    return result;
                }
            }
            this.ReportError(cursor, "'" + literal + "'");
            return null;
        }

        private IParseResult<string> ParseClass(ref Cursor cursor, string characterRanges, string readableRanges, bool negated = false, bool ignoreCase = false)
        {
            if (cursor.Location + 1 <= cursor.Subject.Length)
            {
                var c = cursor.Subject[cursor.Location];
                bool match = false;
                for (int i = 0; !match && i < characterRanges.Length; i += 2)
                {
                    match = c >= characterRanges[i] && c <= characterRanges[i + 1];
                }
                if (!match && ignoreCase && (char.IsUpper(c) || char.IsLower(c)))
                {
                    var cs = c.ToString();
                    for (int i = 0; !match && i < characterRanges.Length; i += 2)
                    {
                        var min = characterRanges[i];
                        var max = characterRanges[i + 1];
                        for (char o = min; !match && o <= max; o++)
                        {
                            match = (char.IsUpper(o) || char.IsLower(o)) && cs.Equals(o.ToString(), StringComparison.CurrentCultureIgnoreCase);
                        }
                    }
                }
                if (match ^ negated)
                {
                    var endCursor = cursor.Advance(1);
                    var result = new ParseResult<string>(cursor, endCursor, cursor.Subject.Substring(cursor.Location, 1));
                    cursor = endCursor;
                    return result;
                }
            }
            this.ReportError(cursor, readableRanges);
            return null;
        }

        private IParseResult<string> ParseAny(ref Cursor cursor)
        {
            if (cursor.Location + 1 <= cursor.Subject.Length)
            {
                var substr = cursor.Subject.Substring(cursor.Location, 1);
                var endCursor = cursor.Advance(1);
                var result = new ParseResult<string>(cursor, endCursor, substr);
                cursor = endCursor;
                return result;
            }
            this.ReportError(cursor, "any character");
            return null;
        }

        private IParseResult<T> ReturnHelper<T>(Cursor startCursor, Cursor endCursor, Func<T> wrappedCode)
        {
            return new ParseResult<T>(startCursor, endCursor, wrappedCode());
        }

        private T ValueOrDefault<T>(IParseResult<T> result)
        {
            return result == null
                ? default(T)
                : result.Value;
        }

        private void ReportError(Cursor cursor, string expected)
        {
            if (this.rightmostErrorCursor != null && this.rightmostErrorCursor.Location > cursor.Location)
            {
                return;
            }
            if (this.rightmostErrorCursor == null || this.rightmostErrorCursor.Location < cursor.Location)
            {
                this.rightmostErrorCursor = cursor;
                this.rightmostErrors.Clear();
            }
            this.rightmostErrors.Add(expected);
        }
    }
}
