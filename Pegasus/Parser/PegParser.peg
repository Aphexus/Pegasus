@namespace Pegasus.Parser
@classname PegParser
@using System.Linq
@using Pegasus.Expressions

grammar
  = <Grammar> __ settings:setting* initializer:initializer? rules:rule* {
        new Grammar(rules, settings, initializer.SingleOrDefault())
    }

setting
  = <KeyValuePair<string, string>> "@" key:identifier value:(string / type) semicolon? {
        new KeyValuePair<string, string>(key, value)
    }

initializer
  = code:action semicolon? { code }

rule
  = <Rule> name:identifier displayName:string? equals expression:expression semicolon? {
        new Rule(
            name: name,
            displayName: displayName.SingleOrDefault(),
            expression: expression)
    }

expression
  = <Expression> type:expressionType? choice:choice {{
        var typeValue = type.SingleOrDefault();
        return typeValue != null
            ? new TypedExpression(typeValue, choice)
            : choice;
    }}

expressionType
  = lt name:type gt { name }

choice
  = <Expression> head:sequence tail:(<Expression> slash sequence:sequence { sequence })* {
        tail.Count == 0
            ? head
            : new ChoiceExpression(new [] { head }.Concat(tail))
    }

sequence
  = <Expression> elements:labeled* code:action {
        new SequenceExpression(elements.Concat(new Expression[] { new CodeExpression(code) }))
    }
  / elements:labeled* {
        elements.Count == 1
            ? elements[0]
            : new SequenceExpression(elements)
    }

labeled
  = <Expression> label:identifier colon expression:prefixed {
        new PrefixedExpression(label, expression)
    }
  / prefixed

prefixed
  = <Expression> and expression:suffixed {
        new AndExpression(expression)
    }
  / not expression:suffixed {
        new NotExpression(expression)
    }
  / suffixed

suffixed
  = <Expression> expression:primary question {
        new RepetitionExpression(expression, min: 0, max: 1)
    }
  / expression:primary star {
        new RepetitionExpression(expression, min: 0, max: null)
    }
  / expression:primary plus {
        new RepetitionExpression(expression, min: 1, max: null)
    }
  / primary

primary
  = <Expression> name:identifier !(string? equals) { new NameExpression(name) }
  / literal
  / class
  / dot { new WildcardExpression() }
  / lparen expression:expression rparen { expression }

/* "Lexical" elements */

action "action"
  = braced:braced __ { braced.Substring(1, braced.Length - 2) }

braced
  = "{" parts:(braced / nonBraceCharacters)* "}"

nonBraceCharacters
  = chars:nonBraceCharacter+ { string.Concat(chars) }

nonBraceCharacter
  = [^{}]

equals    = "=" __ { "=" }
colon     = ":" __ { ":" }
semicolon = ";" __ { ";" }
slash     = "/" __ { "/" }
and       = "&" __ { "&" }
not       = "!" __ { "!" }
question  = "?" __ { "?" }
star      = "*" __ { "*" }
plus      = "+" __ { "+" }
lparen    = "(" __ { "(" }
rparen    = ")" __ { ")" }
dot       = "." __ { "." }
lt        = "<" __ { "." }
gt        = ">" __ { "." }
comma     = "," __ { "," }
lbracket  = "[" __ { "[" }
rbracket  = "]" __ { "]" }

/*
 * Modeled after ECMA-262, 5th ed., 7.6, but much simplified:
 *
 * * no Unicode escape sequences
 *
 * * "Unicode combining marks" and "Unicode connection punctuation" can't be
 *   part of the identifier
 *
 * * only [a-zA-Z] is considered a "Unicode letter"
 *
 * * only [0-9] is considered a "Unicode digit"
 *
 * The simplifications were made just to make the implementation little bit
 * easier, there is no "philosophical" reason behind them.
 */
identifier "identifier"
  = name:(!digit (letter / digit / "_" / "$")+) __ { name }

/*
 * Modeled after C# Language Specification, Version 4.0, appendix B.2, but simplified:
 *
 * * the "identifier" class is as above.
 *
 * * no support for qualified namespaces. ("global::System.String", for example)
 *
 * * no support for \u characters directly in the name.
 *
 * Again, these simplifications are simply for ease of implementation.
 */
type
  = type:nonArrayType ranks:rankSpecifiers* { type + string.Concat(ranks) }

nonArrayType
  = nullableType
  / typeName

nullableType
  = type:typeName question { type + "?" }

rankSpecifiers
  = lbracket dimensions:dimSeparator? rbracket { "[" + dimensions.SingleOrDefault() + "]" }

dimSeparator
  = commas:comma+ { new string(',', commas.Count) }

typeName
  = ident:identifier args:typeArgumentList? dot rest:typeName { ident + args.SingleOrDefault() + "." + rest }
  / ident:identifier args:typeArgumentList? { ident + args.SingleOrDefault() }

typeArgumentList
  = lt args:typeArguments gt { "<" + args + ">" }

typeArguments
  = type:type comma rest:typeArguments { type + ", " + rest }
  / type

/*
 * Modeled after ECMA-262, 5th ed., 7.8.4. (syntax & semantics, rules only
 * vaguely).
 */
literal "literal"
  = <Expression> value:(doubleQuotedString / singleQuotedString) flags:"i"? __ {
        new LiteralExpression(value, ignoreCase: flags.SingleOrDefault() == "i")
    }

string "string"
  = string:(doubleQuotedString / singleQuotedString) __ { @string }

doubleQuotedString
  = '"' chars:doubleQuotedCharacter* '"' { string.Concat(chars) }

doubleQuotedCharacter
  = simpleDoubleQuotedCharacter
  / simpleEscapeSequence
  / zeroEscapeSequence
  / hexEscapeSequence
  / unicodeEscapeSequence
  / eolEscapeSequence

simpleDoubleQuotedCharacter
  = !('"' / "\\" / eolChar) char:. { @char }

singleQuotedString
  = "'" chars:singleQuotedCharacter* "'" { string.Concat(chars) }

singleQuotedCharacter
  = simpleSingleQuotedCharacter
  / simpleEscapeSequence
  / zeroEscapeSequence
  / hexEscapeSequence
  / unicodeEscapeSequence
  / eolEscapeSequence

simpleSingleQuotedCharacter
  = !("'" / "\\" / eolChar) char:. { @char }

class "character class"
  = <Expression> "[" inverted:"^"? parts:(classCharacterRange / classCharacter)* "]" flags:"i"? __ {
        new ClassExpression(
            parts,
            negated: inverted.SingleOrDefault() == "^",
            ignoreCase: flags.SingleOrDefault() == "i")
    }

classCharacterRange
  = <CharacterRange> begin:bracketDelimitedCharacter "-" end:bracketDelimitedCharacter {
        new CharacterRange(begin[0], end[0])
    }

classCharacter
  = <CharacterRange> char_:bracketDelimitedCharacter {
        new CharacterRange(char_[0], char_[0])
    }

bracketDelimitedCharacter
  = simpleBracketDelimitedCharacter
  / simpleEscapeSequence
  / zeroEscapeSequence
  / hexEscapeSequence
  / unicodeEscapeSequence
  / eolEscapeSequence

simpleBracketDelimitedCharacter
  = !("]" / "\\" / eolChar) char:. { @char }

simpleEscapeSequence
  = "\\" !(digit / "x" / "u" / eolChar) char:. {
        @char
            .Replace("b", "\b")
            .Replace("f", "\f")
            .Replace("n", "\n")
            .Replace("r", "\r")
            .Replace("t", "\t")
            .Replace("v", "\v")
    }

zeroEscapeSequence
  = "\\0" !digit { "\x00" }

hexEscapeSequence
  = "\\x" h1:hexDigit h2:hexDigit {
        ((char)Convert.ToInt32(h1 + h2, 16)).ToString()
    }

unicodeEscapeSequence
  = "\\u" h1:hexDigit h2:hexDigit h3:hexDigit h4:hexDigit {
        ((char)Convert.ToInt32(h1 + h2 + h3 + h4, 16)).ToString()
    }

eolEscapeSequence
  = "\\" eol:eol { eol }

digit
  = [0-9]

hexDigit
  = [0-9a-fA-F]

letter
  = lowerCaseLetter
  / upperCaseLetter

lowerCaseLetter
  = [a-z]

upperCaseLetter
  = [A-Z]

__ = (whitespace / eol / comment)*

/* Modeled after ECMA-262, 5th ed., 7.4. */
comment "comment"
  = singleLineComment
  / multiLineComment

singleLineComment
  = "//" (!eolChar .)*

multiLineComment
  = "/*" (!"*/" .)* "*/"

/* Modeled after ECMA-262, 5th ed., 7.3. */
eol "end of line"
  = "\n"
  / "\r\n"
  / "\r"
  / "\u2028"
  / "\u2029"

eolChar
  = [\n\r\u2028\u2029]

/* Modeled after ECMA-262, 5th ed., 7.2. */
whitespace "whitespace"
  = [ \t\v\f\u00A0\uFEFF\u1680\u180E\u2000-\u200A\u202F\u205F\u3000]