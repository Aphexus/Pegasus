@namespace Pegasus.Parser
@classname PegParser
@using System.Globalization
@using System.Linq
@using System.Text.RegularExpressions
@using Pegasus.Expressions
@using Pegasus.Properties

grammar <Grammar>
  = _ settings:setting<0,,_> _ rules:rule<0,,_> _ EOF {
        new Grammar(rules, settings, rulesEnd)
    }

setting <KeyValuePair<Identifier, object>>
  = key:settingName _ value:(<object> string / code / type) (_ semicolon)? {
        new KeyValuePair<Identifier, object>(key, value)
    }

settingName <Identifier> -lexical
  = "@" name:identifier { name }

rulePreamble
  = (!quantifier expressionType _)? ruleFlag<0,,_> _ equals

rule <Rule>
  = name:ruleName _ type:expressionType? _ flags:ruleFlag<0,,_> _ equals _ expression:expression _ semicolon? {{
        var typeValue = type.SingleOrDefault();
        return new Rule(
            identifier: name,
            expression: typeValue != null ? new TypedExpression(typeValue, expression) : expression,
            flags: flags);
    }}

ruleName -lexical
  = identifier

ruleFlag <Identifier> -memoize -lexical
  = "-" flag:identifier { flag }

expression <Expression>
  = choice

expressionType <CodeSpan> -memoize
  = lt _ name:type _ gt { name }
  / &lt #ERROR{ "PEG0014:" + Resources.PEG0014_ERROR_PARSER_InvalidType }

choice <Expression>
  = choices:sequence<1,,_ slash _> { choices.Count == 1 ? choices[0] : new ChoiceExpression(choices) }

sequence <Expression>
  = elements:labeled<0,,_> _ code:action {
        new SequenceExpression(elements.Concat(new Expression[] { code }))
    }
  / elements:labeled<0,,_> {
        elements.Count == 1
            ? elements[0]
            : new SequenceExpression(elements)
    }

labeled <Expression> -memoize
  = label:identifier _ colon _ expression:prefixed {
        new PrefixedExpression(label, expression)
    }
  / prefixed
  / code:action &{ code.CodeType == CodeType.State || code.CodeType == CodeType.Error } { code }

prefixed <Expression>
  = and _ code:code {
        new AndCodeExpression(code)
    }
  / and _ expression:suffixed {
        new AndExpression(expression)
    }
  / not _ code:code {
        new NotCodeExpression(code)
    }
  / not _ expression:suffixed {
        new NotExpression(expression)
    }
  / suffixed

suffixed <Expression>
  = expression:primary _ q:quantifier {
        new RepetitionExpression(expression, q)
    }
  / primary

primary <Expression> -memoize
  = name:ruleName !(_ rulePreamble) { new NameExpression(name) }
  / literal
  / class
  / dot { new WildcardExpression() }
  / lparen _ type:expressionType? _ expression:expression _ rparen {{
        var typeValue = type.SingleOrDefault();
        return typeValue != null ? new TypedExpression(typeValue, expression) : expression;
    }}

quantifier <Quantifier> -memoize
  = q:question { new Quantifier(qStart, qEnd, min: 0, max: 1) }
  / q:star { new Quantifier(qStart, qEnd, min: 0, max: null) }
  / q:plus { new Quantifier(qStart, qEnd, min: 1, max: null) }
  / start:lt _ min:integer _ comma _ max:integer? _ comma _ delimiter:expression _ end:gt { new Quantifier(startStart, endEnd, min: min, max: max.Cast<int?>().SingleOrDefault(), delimiter: delimiter) }
  / start:lt _ min:integer _ comma _ max:integer? _ end:gt { new Quantifier(startStart, endEnd, min: min, max: max.Cast<int?>().SingleOrDefault()) }
  / start:lt _ count:integer _ end:gt { new Quantifier(startStart, endEnd, min: count, max: count) }

integer <int> -lexical
  = digits:(digit+ "") { int.Parse(digits) }

action <CodeExpression> -memoize
  = type:actionType code:code { new CodeExpression(code, type) }

actionType <CodeType> -lexical
  = "#ERROR"i     { CodeType.Error }
  / "#PARSE"i     { CodeType.Parse }
  / "#" "STATE"i? { CodeType.State }
  /               { CodeType.Result }

code <CodeSpan> -lexical
  = "{" contents:braceContents "}" { new CodeSpan(contents, contentsStart, contentsEnd) }
  / "{" #ERROR{ "PEG0011:" + Resources.PEG0011_ERROR_PARSER_UnterminatedCode }

braceContents
  = parts:(nonBraceCharacters / "{" braceContents "}")* { string.Concat(parts) }

nonBraceCharacters
  = chars:nonBraceCharacter+ { string.Concat(chars) }

nonBraceCharacter
  = [^{}]

equals    -lexical = "="
colon     -lexical = ":"
semicolon -lexical = ";"
slash     -lexical = "/"
and       -lexical = "&"
not       -lexical = "!"
question  -lexical = "?"
star      -lexical = "*"
plus      -lexical = "+"
lparen    -lexical = "("
rparen    -lexical = ")"
dot       -lexical = "."
lt        -lexical = "<"
gt        -lexical = ">"
comma     -lexical = ","
lbracket  -lexical = "["
rbracket  -lexical = "]"

identifier <Identifier> -memoize -lexical
  = name:(!digit (letter / digit / "_" / "$")+) { new Identifier(name, nameStart, nameEnd) }

type <CodeSpan> -lexical
  = type:(nonArrayType (_ rankSpecifiers)*) { new CodeSpan(type, typeStart, typeEnd, value: Regex.Replace(Regex.Replace(type, @"(?<!,)\s+|\s+(?=[,\]])", ""), @",(?=\w)", ", ")) }

nonArrayType
  = nullableType
  / typeName

nullableType
  = typeName _ question

rankSpecifiers
  = lbracket _ comma<0,,_> _ rbracket

typeName
  = identifier (_ typeArgumentList)? _ dot _ typeName
  / identifier (_ typeArgumentList)?

typeArgumentList
  = lt _ typeArguments _ gt

typeArguments
  = type<1,,_ comma _>

literal <Expression> -lexical
  = value:string flags:("ir" / "ri" / "i" / "r" / ) {
        new LiteralExpression(valueStart, flagsEnd, value, ignoreCase: flags.Contains('i'), fromResource: flags.Contains('r'))
    }

string -lexical
  = string:(doubleQuotedString / singleQuotedString) { @string }

doubleQuotedString
  = '"' chars:doubleQuotedCharacter* ('"' / #ERROR{ "PEG0009:" + Resources.PEG0009_ERROR_PARSER_UnterminatedString }) { string.Concat(chars) }

doubleQuotedCharacter
  = simpleDoubleQuotedCharacter
  / simpleEscapeSequence
  / zeroEscapeSequence
  / hexEscapeSequence
  / unicodeEscapeSequence
  / eolEscapeSequence

simpleDoubleQuotedCharacter
  = !('"' / "\\" / eolChar) char:. { @char }

singleQuotedString
  = "'" chars:singleQuotedCharacter* ("'" / #ERROR{ "PEG0009:" + Resources.PEG0009_ERROR_PARSER_UnterminatedString }) { string.Concat(chars) }

singleQuotedCharacter
  = simpleSingleQuotedCharacter
  / simpleEscapeSequence
  / zeroEscapeSequence
  / hexEscapeSequence
  / unicodeEscapeSequence
  / eolEscapeSequence

simpleSingleQuotedCharacter
  = !("'" / "\\" / eolChar) char:. { @char }

class <Expression> -lexical
  = lbracket inverted:"^"? parts:(classCharacterRange / classCharacter)* (rbracket / #ERROR{ "PEG0010:" + Resources.PEG0010_ERROR_PARSER_UnterminatedClass }) flags:"i"? {
        new ClassExpression(
            parts,
            negated: inverted.SingleOrDefault() == "^",
            ignoreCase: flags.SingleOrDefault() == "i")
    }

classCharacterRange <CharacterRange>
  = begin:bracketDelimitedCharacter "-" end:bracketDelimitedCharacter {
        new CharacterRange(begin[0], end[0])
    }

classCharacter <CharacterRange>
  = char_:bracketDelimitedCharacter {
        new CharacterRange(char_[0], char_[0])
    }

bracketDelimitedCharacter
  = simpleBracketDelimitedCharacter
  / simpleEscapeSequence
  / zeroEscapeSequence
  / hexEscapeSequence
  / unicodeEscapeSequence
  / eolEscapeSequence

simpleBracketDelimitedCharacter
  = !("]" / "\\" / eolChar) char:. { @char }

simpleEscapeSequence
  = "\\" !(digit / "x" / "u" / eolChar) char:. {
        @char
            .Replace("b", "\b")
            .Replace("f", "\f")
            .Replace("n", "\n")
            .Replace("r", "\r")
            .Replace("t", "\t")
            .Replace("v", "\v")
    }

zeroEscapeSequence
  = "\\0" !digit { "\0" }

hexEscapeSequence
  = "\\x" digits:(hexDigit hexDigit) {
        ((char)Convert.ToInt32(digits, 16)).ToString()
    }

unicodeEscapeSequence
  = "\\u" digits:(hexDigit hexDigit hexDigit hexDigit) {
        ((char)Convert.ToInt32(digits, 16)).ToString()
    }

eolEscapeSequence
  = "\\" eol:eol { eol }

digit
  = [0-9]

hexDigit
  = [0-9a-fA-F]

letter
  = lowerCaseLetter
  / upperCaseLetter

lowerCaseLetter
  = [a-z]

upperCaseLetter
  = [A-Z]

_ = (whitespace / eol / comment)*

comment
  = singleLineComment
  / multiLineComment

singleLineComment -lexical
  = "//" (!eolChar .)*

multiLineComment -lexical
  = "/*" (!"*/" .)* "*/"

eol
  = "\n"
  / "\r\n"
  / "\r"
  / "\u2028"
  / "\u2029"

eolChar
  = [\n\r\u2028\u2029]

whitespace -lexical
  = [ \t\v\f\u00A0\uFEFF\u1680\u180E\u2000-\u200A\u202F\u205F\u3000]

EOF
  = !.
  / unexpected:&. #ERROR{ "PEG0008:" + string.Format(CultureInfo.CurrentCulture, Resources.PEG0008_ERROR_PARSER_UnexpectedEndOfInput, unexpected) }
